{"version":3,"sources":["../../../src/lib/stream/parserstream.js"],"names":["ParserStream","parser","source","input","offsets","index","location","getOffset","endOfStream","result","parse","isAccepted","offset","value","Error","factory"],"mappings":";;;;;;;;AAQA;;;;;;;;;;+eARA;;;;;;;;AAUA;;;IAGMA,Y;;;AACF,0BAAYC,MAAZ,EAAoBC,MAApB,EAA4B;AAAA;;AAAA;;AAExB,cAAKA,MAAL,GAAcD,MAAd;AACA,cAAKE,KAAL,GAAaD,MAAb;AACA,cAAKE,OAAL,GAAe,EAAf;AAJwB;AAK3B;;;;kCAESC,K,EAAO;AACb,mBAAO,KAAKD,OAAL,CAAaC,KAAb,KAAuBA,KAA9B;AACH;;AAED;;;;iCACSA,K,EAAO;AACZ,mBAAO,KAAKF,KAAL,CAAWG,QAAX,CAAoB,KAAKC,SAAL,CAAeF,QAAQ,CAAvB,IAA4B,CAAhD,CAAP;AACH;;AAED;;;;oCACYA,K,EAAO;AACf,mBAAO,KAAKF,KAAL,CAAWK,WAAX,CAAuB,KAAKD,SAAL,CAAeF,KAAf,CAAvB,CAAP;AACH;;AAED;;;;kCACUA,K,EAAO;AACb,gBAAII,SAAS,KAAKP,MAAL,CAAYQ,KAAZ,CAAkB,KAAKP,KAAvB,EAA8B,KAAKI,SAAL,CAAeF,KAAf,CAA9B,CAAb;;AAEA,gBAAII,OAAOE,UAAP,EAAJ,EAAyB;AACrB,qBAAKP,OAAL,CAAaC,QAAQ,CAArB,IAA0BI,OAAOG,MAAjC;AACA,uBAAOH,OAAOI,KAAd;AACH,aAHD,MAGO;AACH,sBAAM,IAAIC,KAAJ,EAAN;AACH;AACJ;;;;;;AAGL,SAASC,OAAT,CAAiBd,MAAjB,EAAyBC,MAAzB,EAAiC;AAC7B,WAAO,IAAIF,YAAJ,CAAiBC,MAAjB,EAAyBC,MAAzB,CAAP;AACH;;kBAEca,O","file":"parserstream.js","sourcesContent":["/*\n * Parsec\n * https://github.com/d-plaindoux/parsec\n *\n * Copyright (c) 2016 Didier Plaindoux\n * Licensed under the LGPL2 license.\n */\n\nimport Stream from './stream';\n\n/**\n * ParserStream stream class\n */\nclass ParserStream extends Stream {\n    constructor(parser, source) {\n        super();\n        this.source = parser;\n        this.input = source;\n        this.offsets = {};\n    }\n\n    getOffset(index) {\n        return this.offsets[index] || index;\n    }\n\n    // Stream 'a => number -> number\n    location(index) {\n        return this.input.location(this.getOffset(index - 1) + 1);\n    }\n\n    // ParserStream 'a => unit -> boolean\n    endOfStream(index) {\n        return this.input.endOfStream(this.getOffset(index));\n    }\n\n    // ParserStream 'a => number -> 'a <+> error\n    unsafeGet(index) {\n        var result = this.source.parse(this.input, this.getOffset(index));\n\n        if (result.isAccepted()) {\n            this.offsets[index + 1] = result.offset;\n            return result.value;\n        } else {\n            throw new Error();\n        }\n    }\n}\n\nfunction factory(parser, source) {\n    return new ParserStream(parser, source);\n}\n\nexport default factory;\n"]}