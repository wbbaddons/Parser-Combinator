{"version":3,"sources":["../../../src/lib/data/list.js"],"names":["arguments","length","Array","isArray","List","prototype","slice","call","value","element","concat","list","funcall","result","i","push","map","forEach","append","sep","join"],"mappings":";;;;;;;;kBA4De,YAAW;AACtB,QAAIA,UAAUC,MAAV,KAAqB,CAArB,IAA0BC,MAAMC,OAAN,CAAcH,UAAU,CAAV,CAAd,CAA9B,EAA2D;AACvD,eAAO,IAAII,IAAJ,CAASJ,UAAU,CAAV,CAAT,CAAP;AACH;;AAED,WAAO,IAAII,IAAJ,CAASF,MAAMG,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2BP,SAA3B,CAAT,CAAP;AACH,C;;;;AAlED;;;;;;;;IAQMI,I;AACF,kBAAYI,KAAZ,EAAmB;AAAA;;AACf,aAAKA,KAAL,GAAaA,KAAb;AACH;;;;+BAEM;AACH,mBAAO,KAAKA,KAAL,CAAWP,MAAlB;AACH;;;kCAES;AACN,mBAAO,KAAKO,KAAL,CAAWP,MAAX,KAAsB,CAA7B;AACH;;;4BAEGQ,O,EAAS;AACT,mBAAO,IAAIL,IAAJ,CAAS,KAAKI,KAAL,CAAWE,MAAX,CAAkB,CAACD,OAAD,CAAlB,CAAT,CAAP;AACH;;;+BAEME,I,EAAM;AACT,mBAAO,IAAIP,IAAJ,CAAS,KAAKI,KAAL,CAAWE,MAAX,CAAkBC,KAAKH,KAAvB,CAAT,CAAP;AACH;;;+BAEMI,O,EAAS;AACZ,gBAAIC,SAAS,EAAb;AACA,iBAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAI,KAAKN,KAAL,CAAWP,MAA/B,EAAuCa,GAAvC,EAA4C;AACxC,oBAAIF,QAAQ,KAAKJ,KAAL,CAAWM,CAAX,CAAR,CAAJ,EAA4B;AACxBD,2BAAOE,IAAP,CAAY,KAAKP,KAAL,CAAWM,CAAX,CAAZ;AACH;AACJ;AACD,mBAAO,IAAIV,IAAJ,CAASS,MAAT,CAAP;AACH;;;4BAEGD,O,EAAS;AACT,mBAAO,IAAIR,IAAJ,CAAS,KAAKI,KAAL,CAAWQ,GAAX,CAAeJ,OAAf,CAAT,CAAP;AACH;;;gCAEOA,O,EAAS;AACb,gBAAIC,SAAS,IAAIT,IAAJ,CAAS,EAAT,CAAb;AACA,iBAAKI,KAAL,CAAWS,OAAX,CAAmB,iBAAS;AACxBJ,yBAASA,OAAOK,MAAP,CAAcN,QAAQJ,KAAR,CAAd,CAAT;AACH,aAFD;AAGA,mBAAOK,MAAP;AACH;;;gCAEO;AACJ,mBAAO,KAAKL,KAAL,CAAWF,KAAX,EAAP;AACH;;;6BAEIa,G,EAAK;AACN,mBAAO,KAAKX,KAAL,CAAWY,IAAX,CAAgBD,GAAhB,CAAP;AACH","file":"list.js","sourcesContent":["/*\n * Parsec\n * https://github.com/d-plaindoux/parsec\n *\n * Copyright (c) 2015-2016 Didier Plaindoux\n * Licensed under the LGPL2 license.\n */\n\nclass List {\n    constructor(value) {\n        this.value = value;\n    }\n\n    size() {\n        return this.value.length;\n    }\n\n    isEmpty() {\n        return this.value.length === 0;\n    }\n\n    add(element) {\n        return new List(this.value.concat([element]));\n    }\n\n    append(list) {\n        return new List(this.value.concat(list.value));\n    }\n\n    filter(funcall) {\n        var result = [];\n        for (var i = 0; i < this.value.length; i++) {\n            if (funcall(this.value[i])) {\n                result.push(this.value[i]);\n            }\n        }\n        return new List(result);\n    }\n\n    map(funcall) {\n        return new List(this.value.map(funcall));\n    }\n\n    flatMap(funcall) {\n        var result = new List([]);\n        this.value.forEach(value => {\n            result = result.append(funcall(value));\n        });\n        return result;\n    }\n\n    array() {\n        return this.value.slice();\n    }\n\n    join(sep) {\n        return this.value.join(sep);\n    }\n}\n\nexport default function() {\n    if (arguments.length === 1 && Array.isArray(arguments[0])) {\n        return new List(arguments[0]);\n    }\n\n    return new List(Array.prototype.slice.call(arguments));\n}\n"]}