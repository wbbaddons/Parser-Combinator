{"version":3,"sources":["../../../../src/lib/standard/markdown/bullet-parser.js"],"names":["stop","eos","or","charIn","pureText","not","rep","map","chars","join","formattedSequence","bulletLv1","char","optrep","then","thenRight","bullet","level","content","someText","array","bulletLv2","fourSpacesBlock","try","parseBullet","line","offset","parse","ofString"],"mappings":";;;;;;AAIA;;AACA;;;;AACA;;;;AACA;;;;;;AAPA;;;;AASA,SAASA,IAAT,GAAgB;AACZ,WAAO,SAAEC,GAAF,CAAMC,EAAN,CAAS,SAAEC,MAAF,CAAS,QAAT,CAAT,CAAP;AACH;;AAED,SAASC,QAAT,GAAoB;AAChB,WAAO,SAAEC,GAAF,CAAML,MAAN,EAAcM,GAAd,GAAoBC,GAApB,CAAwB;AAAA,eAASC,MAAMC,IAAN,CAAW,EAAX,CAAT;AAAA,KAAxB,CAAP;AACH;;AAED,SAASC,iBAAT,GAA6B;AACzB,WAAO,qBAAWA,iBAAX,CAA6BN,UAA7B,EAAyCJ,MAAzC,CAAP;AACH;;AAED,SAASW,SAAT,GAAqB;AACjB,WAAO,SAAEC,IAAF,CAAO,IAAP,EACFC,MADE,GAEFC,IAFE,CAEG,SAAEX,MAAF,CAAS,IAAT,CAFH,EAEmB;AAFnB,KAGFW,IAHE,CAGG,SAAEX,MAAF,CAAS,OAAT,CAHH,EAGwB;AAHxB,KAIFY,SAJE,CAIQL,mBAJR,EAKFH,GALE,CAKE;AAAA,eAAa,EAACS,QAAQ,EAACC,OAAO,CAAR,EAAWC,SAASC,SAASC,KAAT,EAApB,EAAT,EAAb;AAAA,KALF,CAAP;AAMH;;AAED,SAASC,SAAT,GAAqB;AACjB,WAAO,SAAET,IAAF,CAAO,IAAP,EACFC,MADE,GAEFC,IAFE,CAEG,gBAAEQ,eAAF,EAFH,EAGFR,IAHE,CAGG,SAAEF,IAAF,CAAO,GAAP,EAAYC,MAAZ,EAHH,EAGyB;AAHzB,KAIFC,IAJE,CAIG,SAAEX,MAAF,CAAS,IAAT,CAJH,EAImB;AAJnB,KAKFW,IALE,CAKG,SAAEX,MAAF,CAAS,OAAT,CALH,EAKwB;AALxB,KAMFY,SANE,CAMQL,mBANR,EAOFH,GAPE,CAOE;AAAA,eAAa,EAACS,QAAQ,EAACC,OAAO,CAAR,EAAWC,SAASC,SAASC,KAAT,EAApB,EAAT,EAAb;AAAA,KAPF,CAAP;AAQH;;AAED,SAASJ,MAAT,GAAkB;AACd,WAAO,SAAEO,GAAF,CAAMF,WAAN,EAAmBnB,EAAnB,CAAsBS,WAAtB,CAAP;AACH;;AAED,SAASa,WAAT,CAAqBC,IAArB,EAAuC;AAAA,QAAZC,MAAY,uEAAH,CAAG;;AACnC,WAAOV,SAASW,KAAT,CAAe,gBAAOC,QAAP,CAAgBH,IAAhB,CAAf,EAAsCC,MAAtC,CAAP;AACH;;kBAEc;AACXf,wBADW;AAEXU,wBAFW;AAGXL,kBAHW;;AAKXW,SALW,iBAKLF,IALK,EAKC;AACR,eAAOD,YAAYC,IAAZ,EAAkB,CAAlB,CAAP;AACH;AAPU,C","file":"bullet-parser.js","sourcesContent":["/**\n * Created by Simon on 24/12/2016.\n */\n\nimport {F, C} from '../../parsec/index';\nimport stream from '../../stream/index';\nimport textParser from './text-parser';\nimport T from './token';\n\nfunction stop() {\n    return F.eos.or(C.charIn('\\r\\n*`'));\n}\n\nfunction pureText() {\n    return F.not(stop()).rep().map(chars => chars.join(''));\n}\n\nfunction formattedSequence() {\n    return textParser.formattedSequence(pureText(), stop());\n}\n\nfunction bulletLv1() {\n    return C.char('\\n')\n        .optrep()\n        .then(C.charIn('*-')) //first character of a bullet is  * or -\n        .then(C.charIn(' \\u00A0')) // second character of a bullet is space or non-breakable space\n        .thenRight(formattedSequence())\n        .map(someText => ({bullet: {level: 1, content: someText.array()}}));\n}\n\nfunction bulletLv2() {\n    return C.char('\\n')\n        .optrep()\n        .then(T.fourSpacesBlock())\n        .then(C.char(' ').optrep()) //careful. This will accept 8 space. therefore the code-parser must have higher priority\n        .then(C.charIn('*-')) //first character of a bullet is  * or -\n        .then(C.charIn(' \\u00A0')) // second character of a bullet is space or non-breakable space\n        .thenRight(formattedSequence())\n        .map(someText => ({bullet: {level: 2, content: someText.array()}}));\n}\n\nfunction bullet() {\n    return F.try(bulletLv2()).or(bulletLv1());\n}\n\nfunction parseBullet(line, offset = 0) {\n    return bullet().parse(stream.ofString(line), offset);\n}\n\nexport default {\n    bulletLv1,\n    bulletLv2,\n    bullet,\n\n    parse(line) {\n        return parseBullet(line, 0);\n    },\n};\n"]}