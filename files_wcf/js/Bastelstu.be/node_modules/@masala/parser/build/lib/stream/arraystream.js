'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _stream = require('./stream');

var _stream2 = _interopRequireDefault(_stream);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /*
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Parsec
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * https://github.com/d-plaindoux/parsec
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright (c) 2016 Didier Plaindoux
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Licensed under the LGPL2 license.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


/**
 * Array stream class
 */
var ArrayStream = function (_Stream) {
    _inherits(ArrayStream, _Stream);

    function ArrayStream(source) {
        _classCallCheck(this, ArrayStream);

        var _this = _possibleConstructorReturn(this, (ArrayStream.__proto__ || Object.getPrototypeOf(ArrayStream)).call(this));

        _this.source = source;
        return _this;
    }

    // ArrayStream 'a => unit -> boolean


    _createClass(ArrayStream, [{
        key: 'endOfStream',
        value: function endOfStream(index) {
            return this.source.length <= index;
        }

        // ArrayStream 'a => number -> 'a <+> error

    }, {
        key: 'unsafeGet',
        value: function unsafeGet(index) {
            return this.source[index];
        }
    }]);

    return ArrayStream;
}(_stream2.default);

function factory(source) {
    return new ArrayStream(source);
}

exports.default = factory;
//# sourceMappingURL=arraystream.js.map