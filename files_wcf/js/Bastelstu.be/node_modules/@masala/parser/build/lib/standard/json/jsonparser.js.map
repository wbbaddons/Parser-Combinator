{"version":3,"sources":["../../../../src/lib/standard/json/jsonparser.js"],"names":["tkNumber","parser","number","tkString","string","tkKeyword","keyword","tkKey","s","match","arrayOrNothing","value","addValue","concat","e","getValue","item","lazy","expr","map","then","thenRight","optrep","opt","objectOrNothing","attribute","thenLeft","or","thenReturns","parse","source","keywords","tokenizer","generator","tokenBetweenSpaces","builder","chain","eos"],"mappings":";;;;;;AAQA;;;;AACA;;;;AACA;;;;AAEA;AACA;AACA;;AAEA,IAAIA,WAAW,gBAAMC,MAAN,CAAaC,MAA5B;AAAA,IACIC,WAAW,gBAAMF,MAAN,CAAaG,MAD5B;AAAA,IAEIC,YAAY,gBAAMJ,MAAN,CAAaK,OAF7B,C,CAhBA;;;;;;;;AAoBA,SAASC,KAAT,CAAeC,CAAf,EAAkB;AACd,WAAOH,UAAUI,KAAV,CAAgBD,CAAhB,CAAP;AACH;;AAED;AACA,SAASE,cAAT,GAA0B;AACtB,QAAIC,QAAQ,EAAZ;AAAA,QACIC,WAAW,SAAXA,QAAW,IAAK;AACZD,gBAAQA,MAAME,MAAN,CAAaC,CAAb,CAAR;AACH,KAHL;AAAA,QAIIC,WAAW,SAAXA,QAAW;AAAA,eAAMJ,KAAN;AAAA,KAJf;AAAA,QAKIK,OAAO,SAAEC,IAAF,CAAOC,IAAP,EAAaC,GAAb,CAAiBP,QAAjB,CALX;AAMA,WAAOI,KAAKI,IAAL,CAAUb,MAAM,GAAN,EAAWc,SAAX,CAAqBL,IAArB,EAA2BM,MAA3B,EAAV,EAA+CC,GAA/C,GAAqDJ,GAArD,CAAyDJ,QAAzD,CAAP;AACH;;AAED;AACA,SAASS,eAAT,GAA2B;AACvB,QAAIb,QAAQ,EAAZ;AAAA,QACIC,WAAW,SAAXA,QAAW,IAAK;AACZD,cAAMG,EAAE,CAAF,CAAN,IAAcA,EAAE,CAAF,CAAd;AACH,KAHL;AAAA,QAIIC,WAAW,SAAXA,QAAW;AAAA,eAAMJ,KAAN;AAAA,KAJf;AAAA,QAKIc,YAAYtB,SACPuB,QADO,CACEnB,MAAM,GAAN,CADF,EAEPa,IAFO,CAEF,SAAEH,IAAF,CAAOC,IAAP,CAFE,EAGPC,GAHO,CAGHP,QAHG,CALhB;AASA,WAAOa,UACFC,QADE,CACOnB,MAAM,GAAN,EAAWa,IAAX,CAAgBK,SAAhB,EAA2BH,MAA3B,EADP,EAEFC,GAFE,GAGFJ,GAHE,CAGEJ,QAHF,CAAP;AAIH;;AAED;AACA,SAASG,IAAT,GAAgB;AACZ,WAAOlB,SACF2B,EADE,CACCxB,QADD,EAEFwB,EAFE,CAECpB,MAAM,MAAN,EAAcqB,WAAd,CAA0B,IAA1B,CAFD,EAGFD,EAHE,CAGCpB,MAAM,MAAN,EAAcqB,WAAd,CAA0B,IAA1B,CAHD,EAIFD,EAJE,CAICpB,MAAM,OAAN,EAAeqB,WAAf,CAA2B,KAA3B,CAJD,EAKFD,EALE,CAKCpB,MAAM,GAAN,EAAWc,SAAX,CAAqB,SAAEJ,IAAF,CAAOP,cAAP,CAArB,EAA6CgB,QAA7C,CAAsDnB,MAAM,GAAN,CAAtD,CALD,EAMFoB,EANE,CAMCpB,MAAM,GAAN,EAAWc,SAAX,CAAqB,SAAEJ,IAAF,CAAOO,eAAP,CAArB,EAA8CE,QAA9C,CAAuDnB,MAAM,GAAN,CAAvD,CAND,CAAP;AAOH;;AAED;kBACe;AACXsB,WAAO,eAASC,MAAT,EAAiB;AACpB,YAAIC,WAAW,CAAC,MAAD,EAAS,OAAT,EAAkB,MAAlB,EAA0B,GAA1B,EAA+B,GAA/B,EAAoC,GAApC,EAAyC,GAAzC,EAA8C,GAA9C,EAAmD,GAAnD,CAAf;AAAA,YACIC,YAAY,iBACPC,SADO,CACGF,QADH,EAEPG,kBAFO,CAEY,gBAAMC,OAFlB,CADhB;;AAKA,eAAOH,UAAUI,KAAV,CAAgBlB,OAAOQ,QAAP,CAAgB,SAAEW,GAAlB,CAAhB,EAAwCR,KAAxC,CAA8CC,MAA9C,EAAsD,CAAtD,CAAP;AACH;AARU,C","file":"jsonparser.js","sourcesContent":["/*\n * Parsec\n * https://github.com/d-plaindoux/parsec\n *\n * Copyright (c) 2016 Didier Plaindoux\n * Licensed under the LGPL2 license.\n */\n\nimport genlex from '../../genlex/genlex.js';\nimport token from '../../genlex/token';\nimport {F} from '../../parsec/index';\n\n//\n// Facilities\n//\n\nvar tkNumber = token.parser.number,\n    tkString = token.parser.string,\n    tkKeyword = token.parser.keyword;\n\nfunction tkKey(s) {\n    return tkKeyword.match(s);\n}\n\n// unit -> Parser ? Token\nfunction arrayOrNothing() {\n    var value = [],\n        addValue = e => {\n            value = value.concat(e);\n        },\n        getValue = () => value,\n        item = F.lazy(expr).map(addValue);\n    return item.then(tkKey(',').thenRight(item).optrep()).opt().map(getValue);\n}\n\n// unit -> Parser ? Token\nfunction objectOrNothing() {\n    var value = {},\n        addValue = e => {\n            value[e[0]] = e[1];\n        },\n        getValue = () => value,\n        attribute = tkString\n            .thenLeft(tkKey(':'))\n            .then(F.lazy(expr))\n            .map(addValue);\n    return attribute\n        .thenLeft(tkKey(',').then(attribute).optrep())\n        .opt()\n        .map(getValue);\n}\n\n// unit -> Parser ? Token\nfunction expr() {\n    return tkNumber\n        .or(tkString)\n        .or(tkKey('null').thenReturns(null))\n        .or(tkKey('true').thenReturns(true))\n        .or(tkKey('false').thenReturns(false))\n        .or(tkKey('[').thenRight(F.lazy(arrayOrNothing)).thenLeft(tkKey(']')))\n        .or(tkKey('{').thenRight(F.lazy(objectOrNothing)).thenLeft(tkKey('}')));\n}\n\n//const parse =\nexport default {\n    parse: function(source) {\n        var keywords = ['null', 'false', 'true', '{', '}', '[', ']', ':', ','],\n            tokenizer = genlex\n                .generator(keywords)\n                .tokenBetweenSpaces(token.builder);\n\n        return tokenizer.chain(expr().thenLeft(F.eos)).parse(source, 0);\n    },\n};\n"]}