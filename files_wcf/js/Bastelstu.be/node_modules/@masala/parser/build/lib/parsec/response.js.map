{"version":3,"sources":["../../../src/lib/parsec/response.js"],"names":["Response","fold","success","accept","value","failure","Error","reject","offset","Reject","consumed","_","Accept","input","endOfStream","callback","predicate","stream","response"],"mappings":";;;;;;qjBAAA;;;;;;;;AAQA;;;;;;;;;;;;AAEA;;;;IAIMA,Q;;;;;;;;AACF;qCACa;AACT,mBAAO,KAAKC,IAAL,CACH,YAAW;AACP,uBAAO,IAAP;AACH,aAHE,EAIH,YAAW;AACP,uBAAO,KAAP;AACH,aANE,CAAP;AAQH;;AAED;;;;gCACQ;AACJ,mBAAO,KAAKA,IAAL,CACH;AAAA,uBAAU,cAAKC,OAAL,CAAaC,OAAOC,KAApB,CAAV;AAAA,aADG,EAEH;AAAA,uBACI,cAAKC,OAAL,CAAa,IAAIC,KAAJ,CAAU,qBAAqBC,OAAOC,MAAtC,CAAb,CADJ;AAAA,aAFG,CAAP;AAKH;;;qCAEY;AACT,mBAAO,KAAP,CADS,CACK;AACjB;;;;;;AAGL;;;;;IAGMC,M;;;AACF,oBAAYD,MAAZ,EAAoBE,QAApB,EAA8B;AAAA;;AAAA;;AAE1B,cAAKF,MAAL,GAAcA,MAAd;AACA,cAAKE,QAAL,GAAgBA,QAAhB;AAH0B;AAI7B;;AAED;;;;;6BACKC,C,EAAGJ,M,EAAQ;AACZ,mBAAOA,OAAO,IAAP,CAAP;AACH;;AAED;;;;8BACM;AACF,mBAAO,IAAP;AACH;;AAED;;;;kCACU;AACN,mBAAO,IAAP;AACH;;AAED;;;;iCACS;AACL,mBAAO,IAAIE,MAAJ,CAAW,KAAKD,MAAhB,EAAwB,KAAxB,CAAP;AACH;;;;EAzBgBR,Q;;AA4BrB;;;;;IAGMY,M;;;AACF,oBAAYR,KAAZ,EAAmBS,KAAnB,EAA0BL,MAA1B,EAAkCE,QAAlC,EAA4C;AAAA;;AAAA;;AAExC,eAAKF,MAAL,GAAcA,MAAd;AACA,eAAKE,QAAL,GAAgBA,QAAhB;AACA,eAAKN,KAAL,GAAaA,KAAb;AACA,eAAKS,KAAL,GAAaA,KAAb;AALwC;AAM3C;;;;qCAEY;AACT,mBAAO,KAAKA,KAAL,CAAWC,WAAX,CAAuB,KAAKN,MAA5B,CAAP;AACH;;AAED;;;;6BACKL,M,EAAQ;AACT,mBAAOA,OAAO,IAAP,CAAP;AACH;;AAED;;;;4BACIY,Q,EAAU;AACV,mBAAO,IAAIH,MAAJ,CACHG,SAAS,KAAKX,KAAd,CADG,EAEH,KAAKS,KAFF,EAGH,KAAKL,MAHF,EAIH,KAAKE,QAJF,CAAP;AAMH;;AAED;;;;gCACQK,Q,EAAU;AACd,mBAAOA,SAAS,KAAKX,KAAd,CAAP;AACH;;AAED;;;;+BACOY,S,EAAW;AACd,gBAAIA,UAAU,KAAKZ,KAAf,CAAJ,EAA2B;AACvB,uBAAO,IAAP;AACH,aAFD,MAEO;AACH,uBAAO,IAAIK,MAAJ,CAAW,KAAKD,MAAhB,EAAwB,KAAxB,CAAP;AACH;AACJ;;;;EAxCgBR,Q;;AA2CrB;;;;;AAGA,IAAMG,SAAS,SAATA,MAAS,CAACC,KAAD,EAAQa,MAAR,EAAgBT,MAAhB,EAAwBE,QAAxB;AAAA,WACX,IAAIE,MAAJ,CAAWR,KAAX,EAAkBa,MAAlB,EAA0BT,MAA1B,EAAkCE,QAAlC,CADW;AAAA,CAAf;AAEA,IAAMH,SAAS,SAATA,MAAS,CAACC,MAAD,EAASE,QAAT;AAAA,WAAsB,IAAID,MAAJ,CAAWD,MAAX,EAAmBE,QAAnB,CAAtB;AAAA,CAAf;AACA,IAAMQ,WAAW,EAACf,cAAD,EAASI,cAAT,EAAjB;;kBAEeW,Q","file":"response.js","sourcesContent":["/*\n * Parsec\n * https://github.com/d-plaindoux/parsec\n *\n * Copyright (c) 2016 Didier Plaindoux\n * Licensed under the LGPL2 license.\n */\n\nimport atry from '../data/try.js';\n\n/**\n * Response basic type\n * fold() is an abstract method implemented in Accept and Reject\n */\nclass Response {\n    // Response 'a 'c => unit -> bool\n    isAccepted() {\n        return this.fold(\n            function() {\n                return true;\n            },\n            function() {\n                return false;\n            }\n        );\n    }\n\n    // Response 'a 'c => unit -> bool\n    toTry() {\n        return this.fold(\n            accept => atry.success(accept.value),\n            reject =>\n                atry.failure(new Error('parser error at ' + reject.offset))\n        );\n    }\n\n    isConsumed() {\n        return false; //overridden by Accept\n    }\n}\n\n/**\n * Reject response class\n */\nclass Reject extends Response {\n    constructor(offset, consumed) {\n        super();\n        this.offset = offset;\n        this.consumed = consumed;\n    }\n\n    // Response 'a 'c => (Accept 'a 'c -> 'a) -> (Reject 'a 'c -> 'a) -> 'a\n    fold(_, reject) {\n        return reject(this);\n    }\n\n    // Response 'a 'c => ('a -> 'b) -> Response 'b 'c\n    map() {\n        return this;\n    }\n\n    // Response 'a 'c => ('a -> Response 'b 'c) -> Response 'b 'c\n    flatMap() {\n        return this;\n    }\n\n    // Response 'a 'c => ('a -> bool) -> Response 'b 'c\n    filter() {\n        return new Reject(this.offset, false);\n    }\n}\n\n/**\n * Accept response class\n */\nclass Accept extends Response {\n    constructor(value, input, offset, consumed) {\n        super();\n        this.offset = offset;\n        this.consumed = consumed;\n        this.value = value;\n        this.input = input;\n    }\n\n    isConsumed() {\n        return this.input.endOfStream(this.offset);\n    }\n\n    // Response 'a 'c => (Accept 'a 'c -> 'a) -> (Reject 'a 'c -> 'a) -> 'a\n    fold(accept) {\n        return accept(this);\n    }\n\n    // Response 'a 'c => ('a -> 'b) -> Response 'b 'c\n    map(callback) {\n        return new Accept(\n            callback(this.value),\n            this.input,\n            this.offset,\n            this.consumed\n        );\n    }\n\n    // Response 'a 'c => ('a -> Response 'b 'c) -> Response 'b 'c\n    flatMap(callback) {\n        return callback(this.value);\n    }\n\n    // Response 'a 'c => ('a -> bool) -> Response 'b 'c\n    filter(predicate) {\n        if (predicate(this.value)) {\n            return this;\n        } else {\n            return new Reject(this.offset, false);\n        }\n    }\n}\n\n/**\n * Constructors\n */\nconst accept = (value, stream, offset, consumed) =>\n    new Accept(value, stream, offset, consumed);\nconst reject = (offset, consumed) => new Reject(offset, consumed);\nconst response = {accept, reject};\n\nexport default response;\n"]}