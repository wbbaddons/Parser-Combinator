{"version":3,"sources":["../../../src/lib/parsec/chars-bundle.js"],"names":["ASCII_LETTER","Symbol","OCCIDENTAL_LETTER","UTF8_LETTER","isUtf8Letter","char","toLowerCase","toUpperCase","isExtendedOccidental","v","test","letter","symbol","satisfy","c","toString","utf8Letter","emoji","isEmojiRegex","rep","letters","symbolOrTestFunctionOrRegex","map","values","join","length","Error","notChar","charIn","indexOf","charNotIn","subString","subStream","s","stringIn","array","tryString","try","nop","initial","workArray","slice","reduce","accu","next","or","notString","not","stringLiteral","anyChar","thenRight","optrep","thenLeft","r","charLiteral","lowerCase","upperCase","letterAs","lettersAs","string"],"mappings":"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","file":"chars-bundle.js","sourcesContent":["/*\n * Parsec\n * https://github.com/d-plaindoux/parsec\n *\n * Copyright (c) 2016 Didier Plaindoux\n * Licensed under the LGPL2 license.\n */\nimport F from './flow-bundle';\nimport {string} from './flow-bundle';\n\nconst ASCII_LETTER = Symbol('ASCII');\nconst OCCIDENTAL_LETTER = Symbol('OCCIDENTAL');\nconst UTF8_LETTER = Symbol('UTF8');\n\nfunction isUtf8Letter(char) {\n    return char.toLowerCase() !== char.toUpperCase();\n}\n\nfunction isExtendedOccidental(v) {\n    return /(?![\\u00F7\\u00D7])[\\u00C0-\\u017F^\\u00F7]/.test(v);\n}\n\n// unit -> Parser char char\nfunction letter(symbol = null) {\n    // For performance, we do not factorize mainstream letters in function\n    if (symbol === null || symbol === OCCIDENTAL_LETTER) {\n        return F.satisfy(\n            c =>\n                ('a' <= c && c <= 'z') ||\n                ('A' <= c && c <= 'Z') ||\n                isExtendedOccidental(c)\n        );\n    }\n\n    if (symbol === ASCII_LETTER) {\n        return F.satisfy(c => ('a' <= c && c <= 'z') || ('A' <= c && c <= 'Z'));\n    }\n\n    if (symbol === UTF8_LETTER) {\n        return F.satisfy(\n            c =>\n                ('a' <= c && c <= 'z') ||\n                ('A' <= c && c <= 'Z') ||\n                isUtf8Letter(c)\n        );\n    }\n\n    throw 'Parameter ' +\n        symbol.toString() +\n        ' has wrong type : Should be C.OCCIDENTAL_LETTER, C.ASCII_LETTER or C.UTF8_LETTER';\n}\n\nfunction utf8Letter() {\n    return F.satisfy(isUtf8Letter);\n}\n\nfunction emoji() {\n    return F.satisfy(c => !isUtf8Letter(c) && isEmojiRegex(c)).rep();\n}\n\nfunction letters(symbolOrTestFunctionOrRegex) {\n    return letter(symbolOrTestFunctionOrRegex)\n        .rep()\n        .map(values => values.join(''));\n}\n\n// char -> Parser char char\nfunction char(c) {\n    if (c.length !== 1) {\n        throw new Error('Char parser must contains one character');\n    }\n\n    return F.satisfy(v => c === v);\n}\n\n// char -> Parser char char\nfunction notChar(c) {\n    if (c.length !== 1) {\n        throw new Error('Char parser must contains one character');\n    }\n\n    return F.satisfy(v => c !== v);\n}\n\n// string -> Parser char char\nfunction charIn(c) {\n    return F.satisfy(v => c.indexOf(v) !== -1);\n}\n\n// string -> Parser char char\nfunction charNotIn(c) {\n    return F.satisfy(v => c.indexOf(v) === -1);\n}\n\n// int -> Parser string char\nfunction subString(length) {\n    return F.subStream(length).map(s => s.join(''));\n}\n\n// string -> Parser string char\n// index is forwarded at the length of the string\n/*function string(s) {\n    return new Parser((input, index = 0) => {\n        if (input.subStreamAt(s.split(''), index)) {\n            return response.accept(s, input, index + s.length, true);\n        } else {\n            return response.reject(input.location(index), false);\n        }\n    });\n}*/\n\nfunction stringIn(array) {\n    const tryString = s => F.try(string(s));\n\n    if (array.length === 0) {\n        return F.nop();\n    }\n    if (array.length === 1) {\n        return tryString(array[0]);\n    }\n\n    // Try the first string\n    const initial = tryString(array[0]);\n    const workArray = array.slice(1);\n    return workArray.reduce(\n        // Then try again and again the next one, coming always back to start\n        (accu, next) => accu.or(tryString(next)),\n        initial\n    );\n}\n\n// string -> Parser string char\nfunction notString(s) {\n    return F.not(string(s));\n}\n\n// unit -> Parser string char\nfunction stringLiteral() {\n    const anyChar = string('\\\\\"').or(notChar('\"'));\n    return char('\"')\n        .thenRight(anyChar.optrep())\n        .thenLeft(char('\"'))\n        .map(r => r.join(''));\n}\n\n// unit -> Parser char char\nfunction charLiteral() {\n    const anyChar = string(\"\\\\'\").or(notChar(\"'\"));\n    return char(\"'\").thenRight(anyChar).thenLeft(char(\"'\"));\n}\n\n// unit -> Parser char char\nfunction lowerCase() {\n    return F.satisfy(v => 'a' <= v && v <= 'z');\n}\n\n// unit -> Parser char char\nfunction upperCase() {\n    return F.satisfy(v => 'A' <= v && v <= 'Z');\n}\n\nexport default {\n    utf8Letter: utf8Letter(),\n    letter: letter(),\n    letterAs: letter,\n    letters: letters(),\n    lettersAs: letters,\n    emoji: emoji(),\n    notChar,\n    char,\n    charIn,\n    charNotIn,\n    subString,\n    string,\n    stringIn,\n    notString,\n    charLiteral: charLiteral(),\n    stringLiteral: stringLiteral(),\n    lowerCase: lowerCase(),\n    upperCase: upperCase(),\n    UTF8_LETTER,\n    OCCIDENTAL_LETTER,\n    ASCII_LETTER,\n};\n\n// Based on https://github.com/mathiasbynens/emoji-regex\nfunction isEmojiRegex() {\n    return /\\uD83C\\uDFF4\\uDB40\\uDC67\\uDB40\\uDC62(?:\\uDB40\\uDC65\\uDB40\\uDC6E\\uDB40\\uDC67|\\uDB40\\uDC77\\uDB40\\uDC6C\\uDB40\\uDC73|\\uDB40\\uDC73\\uDB40\\uDC63\\uDB40\\uDC74)\\uDB40\\uDC7F|\\uD83D\\uDC69\\u200D\\uD83D\\uDC69\\u200D(?:\\uD83D\\uDC66\\u200D\\uD83D\\uDC66|\\uD83D\\uDC67\\u200D(?:\\uD83D[\\uDC66\\uDC67]))|\\uD83D\\uDC68(?:\\u200D(?:\\u2764\\uFE0F\\u200D(?:\\uD83D\\uDC8B\\u200D)?\\uD83D\\uDC68|(?:\\uD83D[\\uDC68\\uDC69])\\u200D(?:\\uD83D\\uDC66\\u200D\\uD83D\\uDC66|\\uD83D\\uDC67\\u200D(?:\\uD83D[\\uDC66\\uDC67]))|\\uD83D\\uDC66\\u200D\\uD83D\\uDC66|\\uD83D\\uDC67\\u200D(?:\\uD83D[\\uDC66\\uDC67])|[\\u2695\\u2696\\u2708]\\uFE0F|\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92])|(?:\\uD83C[\\uDFFB-\\uDFFF])\\u200D[\\u2695\\u2696\\u2708]\\uFE0F|(?:\\uD83C[\\uDFFB-\\uDFFF])\\u200D(?:\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]))|\\uD83D\\uDC69\\u200D(?:\\u2764\\uFE0F\\u200D(?:\\uD83D\\uDC8B\\u200D(?:\\uD83D[\\uDC68\\uDC69])|\\uD83D[\\uDC68\\uDC69])|\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92])|\\uD83D\\uDC69\\u200D\\uD83D\\uDC66\\u200D\\uD83D\\uDC66|(?:\\uD83D\\uDC41\\uFE0F\\u200D\\uD83D\\uDDE8|\\uD83D\\uDC69(?:\\uD83C[\\uDFFB-\\uDFFF])\\u200D[\\u2695\\u2696\\u2708]|(?:(?:\\u26F9|\\uD83C[\\uDFCB\\uDFCC]|\\uD83D\\uDD75)\\uFE0F|\\uD83D\\uDC6F|\\uD83E[\\uDD3C\\uDDDE\\uDDDF])\\u200D[\\u2640\\u2642]|(?:\\u26F9|\\uD83C[\\uDFCB\\uDFCC]|\\uD83D\\uDD75)(?:\\uD83C[\\uDFFB-\\uDFFF])\\u200D[\\u2640\\u2642]|(?:\\uD83C[\\uDFC3\\uDFC4\\uDFCA]|\\uD83D[\\uDC6E\\uDC71\\uDC73\\uDC77\\uDC81\\uDC82\\uDC86\\uDC87\\uDE45-\\uDE47\\uDE4B\\uDE4D\\uDE4E\\uDEA3\\uDEB4-\\uDEB6]|\\uD83E[\\uDD26\\uDD37-\\uDD39\\uDD3D\\uDD3E\\uDDD6-\\uDDDD])(?:(?:\\uD83C[\\uDFFB-\\uDFFF])\\u200D[\\u2640\\u2642]|\\u200D[\\u2640\\u2642])|\\uD83D\\uDC69\\u200D[\\u2695\\u2696\\u2708])\\uFE0F|\\uD83D\\uDC69\\u200D\\uD83D\\uDC67\\u200D(?:\\uD83D[\\uDC66\\uDC67])|\\uD83D\\uDC69\\u200D\\uD83D\\uDC69\\u200D(?:\\uD83D[\\uDC66\\uDC67])|\\uD83D\\uDC68(?:\\u200D(?:(?:\\uD83D[\\uDC68\\uDC69])\\u200D(?:\\uD83D[\\uDC66\\uDC67])|\\uD83D[\\uDC66\\uDC67])|\\uD83C[\\uDFFB-\\uDFFF])|\\uD83C\\uDFF3\\uFE0F\\u200D\\uD83C\\uDF08|\\uD83D\\uDC69\\u200D\\uD83D\\uDC67|\\uD83D\\uDC69(?:\\uD83C[\\uDFFB-\\uDFFF])\\u200D(?:\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92])|\\uD83D\\uDC69\\u200D\\uD83D\\uDC66|\\uD83C\\uDDF4\\uD83C\\uDDF2|\\uD83C\\uDDFD\\uD83C\\uDDF0|\\uD83C\\uDDF6\\uD83C\\uDDE6|\\uD83D\\uDC69(?:\\uD83C[\\uDFFB-\\uDFFF])|\\uD83C\\uDDFC(?:\\uD83C[\\uDDEB\\uDDF8])|\\uD83C\\uDDEB(?:\\uD83C[\\uDDEE-\\uDDF0\\uDDF2\\uDDF4\\uDDF7])|\\uD83C\\uDDE9(?:\\uD83C[\\uDDEA\\uDDEC\\uDDEF\\uDDF0\\uDDF2\\uDDF4\\uDDFF])|\\uD83C\\uDDE7(?:\\uD83C[\\uDDE6\\uDDE7\\uDDE9-\\uDDEF\\uDDF1-\\uDDF4\\uDDF6-\\uDDF9\\uDDFB\\uDDFC\\uDDFE\\uDDFF])|\\uD83C\\uDDF1(?:\\uD83C[\\uDDE6-\\uDDE8\\uDDEE\\uDDF0\\uDDF7-\\uDDFB\\uDDFE])|\\uD83C\\uDDFE(?:\\uD83C[\\uDDEA\\uDDF9])|\\uD83C\\uDDF9(?:\\uD83C[\\uDDE6\\uDDE8\\uDDE9\\uDDEB-\\uDDED\\uDDEF-\\uDDF4\\uDDF7\\uDDF9\\uDDFB\\uDDFC\\uDDFF])|\\uD83C\\uDDF5(?:\\uD83C[\\uDDE6\\uDDEA-\\uDDED\\uDDF0-\\uDDF3\\uDDF7-\\uDDF9\\uDDFC\\uDDFE])|\\uD83C\\uDDEF(?:\\uD83C[\\uDDEA\\uDDF2\\uDDF4\\uDDF5])|\\uD83C\\uDDED(?:\\uD83C[\\uDDF0\\uDDF2\\uDDF3\\uDDF7\\uDDF9\\uDDFA])|\\uD83C\\uDDEE(?:\\uD83C[\\uDDE8-\\uDDEA\\uDDF1-\\uDDF4\\uDDF6-\\uDDF9])|\\uD83C\\uDDFB(?:\\uD83C[\\uDDE6\\uDDE8\\uDDEA\\uDDEC\\uDDEE\\uDDF3\\uDDFA])|\\uD83C\\uDDEC(?:\\uD83C[\\uDDE6\\uDDE7\\uDDE9-\\uDDEE\\uDDF1-\\uDDF3\\uDDF5-\\uDDFA\\uDDFC\\uDDFE])|\\uD83C\\uDDF7(?:\\uD83C[\\uDDEA\\uDDF4\\uDDF8\\uDDFA\\uDDFC])|\\uD83C\\uDDEA(?:\\uD83C[\\uDDE6\\uDDE8\\uDDEA\\uDDEC\\uDDED\\uDDF7-\\uDDFA])|\\uD83C\\uDDFA(?:\\uD83C[\\uDDE6\\uDDEC\\uDDF2\\uDDF3\\uDDF8\\uDDFE\\uDDFF])|\\uD83C\\uDDE8(?:\\uD83C[\\uDDE6\\uDDE8\\uDDE9\\uDDEB-\\uDDEE\\uDDF0-\\uDDF5\\uDDF7\\uDDFA-\\uDDFF])|\\uD83C\\uDDE6(?:\\uD83C[\\uDDE8-\\uDDEC\\uDDEE\\uDDF1\\uDDF2\\uDDF4\\uDDF6-\\uDDFA\\uDDFC\\uDDFD\\uDDFF])|[#\\*0-9]\\uFE0F\\u20E3|\\uD83C\\uDDF8(?:\\uD83C[\\uDDE6-\\uDDEA\\uDDEC-\\uDDF4\\uDDF7-\\uDDF9\\uDDFB\\uDDFD-\\uDDFF])|\\uD83C\\uDDFF(?:\\uD83C[\\uDDE6\\uDDF2\\uDDFC])|\\uD83C\\uDDF0(?:\\uD83C[\\uDDEA\\uDDEC-\\uDDEE\\uDDF2\\uDDF3\\uDDF5\\uDDF7\\uDDFC\\uDDFE\\uDDFF])|\\uD83C\\uDDF3(?:\\uD83C[\\uDDE6\\uDDE8\\uDDEA-\\uDDEC\\uDDEE\\uDDF1\\uDDF4\\uDDF5\\uDDF7\\uDDFA\\uDDFF])|\\uD83C\\uDDF2(?:\\uD83C[\\uDDE6\\uDDE8-\\uDDED\\uDDF0-\\uDDFF])|(?:\\uD83C[\\uDFC3\\uDFC4\\uDFCA]|\\uD83D[\\uDC6E\\uDC71\\uDC73\\uDC77\\uDC81\\uDC82\\uDC86\\uDC87\\uDE45-\\uDE47\\uDE4B\\uDE4D\\uDE4E\\uDEA3\\uDEB4-\\uDEB6]|\\uD83E[\\uDD26\\uDD37-\\uDD39\\uDD3D\\uDD3E\\uDDD6-\\uDDDD])(?:\\uD83C[\\uDFFB-\\uDFFF])|(?:\\u26F9|\\uD83C[\\uDFCB\\uDFCC]|\\uD83D\\uDD75)(?:\\uD83C[\\uDFFB-\\uDFFF])|(?:[\\u261D\\u270A-\\u270D]|\\uD83C[\\uDF85\\uDFC2\\uDFC7]|\\uD83D[\\uDC42\\uDC43\\uDC46-\\uDC50\\uDC66\\uDC67\\uDC70\\uDC72\\uDC74-\\uDC76\\uDC78\\uDC7C\\uDC83\\uDC85\\uDCAA\\uDD74\\uDD7A\\uDD90\\uDD95\\uDD96\\uDE4C\\uDE4F\\uDEC0\\uDECC]|\\uD83E[\\uDD18-\\uDD1C\\uDD1E\\uDD1F\\uDD30-\\uDD36\\uDDD1-\\uDDD5])(?:\\uD83C[\\uDFFB-\\uDFFF])|(?:[\\u261D\\u26F9\\u270A-\\u270D]|\\uD83C[\\uDF85\\uDFC2-\\uDFC4\\uDFC7\\uDFCA-\\uDFCC]|\\uD83D[\\uDC42\\uDC43\\uDC46-\\uDC50\\uDC66-\\uDC69\\uDC6E\\uDC70-\\uDC78\\uDC7C\\uDC81-\\uDC83\\uDC85-\\uDC87\\uDCAA\\uDD74\\uDD75\\uDD7A\\uDD90\\uDD95\\uDD96\\uDE45-\\uDE47\\uDE4B-\\uDE4F\\uDEA3\\uDEB4-\\uDEB6\\uDEC0\\uDECC]|\\uD83E[\\uDD18-\\uDD1C\\uDD1E\\uDD1F\\uDD26\\uDD30-\\uDD39\\uDD3D\\uDD3E\\uDDD1-\\uDDDD])(?:\\uD83C[\\uDFFB-\\uDFFF])?|(?:[\\u231A\\u231B\\u23E9-\\u23EC\\u23F0\\u23F3\\u25FD\\u25FE\\u2614\\u2615\\u2648-\\u2653\\u267F\\u2693\\u26A1\\u26AA\\u26AB\\u26BD\\u26BE\\u26C4\\u26C5\\u26CE\\u26D4\\u26EA\\u26F2\\u26F3\\u26F5\\u26FA\\u26FD\\u2705\\u270A\\u270B\\u2728\\u274C\\u274E\\u2753-\\u2755\\u2757\\u2795-\\u2797\\u27B0\\u27BF\\u2B1B\\u2B1C\\u2B50\\u2B55]|\\uD83C[\\uDC04\\uDCCF\\uDD8E\\uDD91-\\uDD9A\\uDDE6-\\uDDFF\\uDE01\\uDE1A\\uDE2F\\uDE32-\\uDE36\\uDE38-\\uDE3A\\uDE50\\uDE51\\uDF00-\\uDF20\\uDF2D-\\uDF35\\uDF37-\\uDF7C\\uDF7E-\\uDF93\\uDFA0-\\uDFCA\\uDFCF-\\uDFD3\\uDFE0-\\uDFF0\\uDFF4\\uDFF8-\\uDFFF]|\\uD83D[\\uDC00-\\uDC3E\\uDC40\\uDC42-\\uDCFC\\uDCFF-\\uDD3D\\uDD4B-\\uDD4E\\uDD50-\\uDD67\\uDD7A\\uDD95\\uDD96\\uDDA4\\uDDFB-\\uDE4F\\uDE80-\\uDEC5\\uDECC\\uDED0-\\uDED2\\uDEEB\\uDEEC\\uDEF4-\\uDEF8]|\\uD83E[\\uDD10-\\uDD3A\\uDD3C-\\uDD3E\\uDD40-\\uDD45\\uDD47-\\uDD4C\\uDD50-\\uDD6B\\uDD80-\\uDD97\\uDDC0\\uDDD0-\\uDDE6])|(?:[#\\*0-9\\xA9\\xAE\\u203C\\u2049\\u2122\\u2139\\u2194-\\u2199\\u21A9\\u21AA\\u231A\\u231B\\u2328\\u23CF\\u23E9-\\u23F3\\u23F8-\\u23FA\\u24C2\\u25AA\\u25AB\\u25B6\\u25C0\\u25FB-\\u25FE\\u2600-\\u2604\\u260E\\u2611\\u2614\\u2615\\u2618\\u261D\\u2620\\u2622\\u2623\\u2626\\u262A\\u262E\\u262F\\u2638-\\u263A\\u2640\\u2642\\u2648-\\u2653\\u2660\\u2663\\u2665\\u2666\\u2668\\u267B\\u267F\\u2692-\\u2697\\u2699\\u269B\\u269C\\u26A0\\u26A1\\u26AA\\u26AB\\u26B0\\u26B1\\u26BD\\u26BE\\u26C4\\u26C5\\u26C8\\u26CE\\u26CF\\u26D1\\u26D3\\u26D4\\u26E9\\u26EA\\u26F0-\\u26F5\\u26F7-\\u26FA\\u26FD\\u2702\\u2705\\u2708-\\u270D\\u270F\\u2712\\u2714\\u2716\\u271D\\u2721\\u2728\\u2733\\u2734\\u2744\\u2747\\u274C\\u274E\\u2753-\\u2755\\u2757\\u2763\\u2764\\u2795-\\u2797\\u27A1\\u27B0\\u27BF\\u2934\\u2935\\u2B05-\\u2B07\\u2B1B\\u2B1C\\u2B50\\u2B55\\u3030\\u303D\\u3297\\u3299]|\\uD83C[\\uDC04\\uDCCF\\uDD70\\uDD71\\uDD7E\\uDD7F\\uDD8E\\uDD91-\\uDD9A\\uDDE6-\\uDDFF\\uDE01\\uDE02\\uDE1A\\uDE2F\\uDE32-\\uDE3A\\uDE50\\uDE51\\uDF00-\\uDF21\\uDF24-\\uDF93\\uDF96\\uDF97\\uDF99-\\uDF9B\\uDF9E-\\uDFF0\\uDFF3-\\uDFF5\\uDFF7-\\uDFFF]|\\uD83D[\\uDC00-\\uDCFD\\uDCFF-\\uDD3D\\uDD49-\\uDD4E\\uDD50-\\uDD67\\uDD6F\\uDD70\\uDD73-\\uDD7A\\uDD87\\uDD8A-\\uDD8D\\uDD90\\uDD95\\uDD96\\uDDA4\\uDDA5\\uDDA8\\uDDB1\\uDDB2\\uDDBC\\uDDC2-\\uDDC4\\uDDD1-\\uDDD3\\uDDDC-\\uDDDE\\uDDE1\\uDDE3\\uDDE8\\uDDEF\\uDDF3\\uDDFA-\\uDE4F\\uDE80-\\uDEC5\\uDECB-\\uDED2\\uDEE0-\\uDEE5\\uDEE9\\uDEEB\\uDEEC\\uDEF0\\uDEF3-\\uDEF8]|\\uD83E[\\uDD10-\\uDD3A\\uDD3C-\\uDD3E\\uDD40-\\uDD45\\uDD47-\\uDD4C\\uDD50-\\uDD6B\\uDD80-\\uDD97\\uDDC0\\uDDD0-\\uDDE6])\\uFE0F/;\n}\n"]}