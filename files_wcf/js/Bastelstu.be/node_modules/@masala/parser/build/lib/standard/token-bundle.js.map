{"version":3,"sources":["../../../src/lib/standard/token-bundle.js"],"names":["_inQuote","char","then","notChar","rep","map","item","array","email","illegalCharSet1","illegalCharSet2","or","charNotIn","characters","join","date","digits","charIn","thenReturns","dateValues","reverse","dateArray","blank","charsOrParser","optrep","eol","string"],"mappings":";;;;;;AAAA;;AAEA,SAASA,QAAT,GAAoB;AAChB,WAAO,SAAEC,IAAF,CAAO,GAAP,EACFC,IADE,CACG,SAAEC,OAAF,CAAU,GAAV,EAAeC,GAAf,GAAqBC,GAArB,CAAyB;AAAA,eAAQC,KAAKC,KAAL,EAAR;AAAA,KAAzB,CADH,EAEFL,IAFE,CAEG,SAAED,IAAF,CAAO,GAAP,CAFH,CAAP;AAGH;;AAED;AACA,SAASO,KAAT,GAAiB;AACb,QAAIC,kBAAkB,YAAtB;AACA,QAAIC,kBAAkB,aAAtB;;AAEA,WAAOV,WACFW,EADE,CACC,SAAEC,SAAF,CAAYH,eAAZ,CADD,EAEFL,GAFE,GAGFC,GAHE,CAGE;AAAA,eAAQC,KAAKC,KAAL,EAAR;AAAA,KAHF,EAGwB;AAHxB,KAIFL,IAJE,CAIG,SAAED,IAAF,CAAO,GAAP,CAJH,EAKFC,IALE,CAKG,SAAEU,SAAF,CAAYF,eAAZ,EAA6BN,GAA7B,GAAmCC,GAAnC,CAAuC;AAAA,eAAQC,KAAKC,KAAL,EAAR;AAAA,KAAvC,CALH,EAMFL,IANE,CAMG,SAAED,IAAF,CAAO,GAAP,CANH,EAOFC,IAPE,CAOG,SAAEU,SAAF,CAAYF,eAAZ,EAA6BN,GAA7B,GAAmCC,GAAnC,CAAuC;AAAA,eAAQC,KAAKC,KAAL,EAAR;AAAA,KAAvC,CAPH,EAQFF,GARE,CAQE;AAAA,eAAe,EAACG,OAAOK,WAAWC,IAAX,CAAgB,EAAhB,CAAR,EAAf;AAAA,KARF,CAAP;AASH;;AAED,SAASC,IAAT,GAAgB;AACZ,WAAO,SAAEC,MAAF,CACFd,IADE,CACG,SAAEe,MAAF,CAAS,IAAT,EAAeC,WAAf,CAA2B,GAA3B,CADH,EAEFhB,IAFE,CAEG,SAAEc,MAFL,EAGFd,IAHE,CAGG,SAAEe,MAAF,CAAS,IAAT,EAAeC,WAAf,CAA2B,GAA3B,CAHH,EAIFhB,IAJE,CAIG,SAAEc,MAJL,EAKFX,GALE,CAMC;AAAA,eACIc,WAAW,CAAX,IAAgB,IAAhB,GAAuBA,WAAWC,OAAX,EAAvB,GAA8CD,UADlD;AAAA,KAND,EASFd,GATE,CASE;AAAA,eAAagB,UAAUP,IAAV,CAAe,EAAf,CAAb;AAAA,KATF,CAAP;AAUH;;AAED,SAASQ,KAAT,GAAsC;AAAA,QAAvBC,aAAuB,uEAAP,KAAO;;AAClC,QAAI,OAAOA,aAAP,KAAyB,QAA7B,EAAuC;AACnC,eAAO,SAAEN,MAAF,CAASM,aAAT,EAAwBC,MAAxB,GAAiCN,WAAjC,CAA6C,EAA7C,CAAP;AACH,KAFD,MAEO;AACH,eAAOK,cAAcC,MAAd,GAAuBN,WAAvB,CAAmC,EAAnC,CAAP;AACH;AACJ;;AAED,SAASO,GAAT,GAAe;AACX,WAAO,SAAExB,IAAF,CAAO,IAAP,EAAaU,EAAb,CAAgB,SAAEe,MAAF,CAAS,MAAT,CAAhB,CAAP;AACH;;kBAEc;AACXlB,gBADW;AAEXO,cAFW;AAGXO,gBAHW;AAIXG,SAAKA;AAJM,C","file":"token-bundle.js","sourcesContent":["import {C, N} from '../parsec/index';\n\nfunction _inQuote() {\n    return C.char('\"')\n        .then(C.notChar('\"').rep().map(item => item.array()))\n        .then(C.char('\"'));\n}\n\n// accept simon@gmail.com, but also  simon\"le gr@nd\"@gmail.com\nfunction email() {\n    let illegalCharSet1 = ' @\\u00A0\\n\\t';\n    let illegalCharSet2 = ' @\\u00A0\\n\\t.';\n\n    return _inQuote()\n        .or(C.charNotIn(illegalCharSet1))\n        .rep()\n        .map(item => item.array()) // this mean:   repeat(inQuote or anyCharacter)\n        .then(C.char('@'))\n        .then(C.charNotIn(illegalCharSet2).rep().map(item => item.array()))\n        .then(C.char('.'))\n        .then(C.charNotIn(illegalCharSet2).rep().map(item => item.array()))\n        .map(characters => ({email: characters.join('')}));\n}\n\nfunction date() {\n    return N.digits\n        .then(C.charIn('-/').thenReturns('-'))\n        .then(N.digits)\n        .then(C.charIn('-/').thenReturns('-'))\n        .then(N.digits)\n        .map(\n            dateValues =>\n                dateValues[4] > 2000 ? dateValues.reverse() : dateValues\n        )\n        .map(dateArray => dateArray.join(''));\n}\n\nfunction blank(charsOrParser = ' \\t') {\n    if (typeof charsOrParser === 'string') {\n        return C.charIn(charsOrParser).optrep().thenReturns('');\n    } else {\n        return charsOrParser.optrep().thenReturns('');\n    }\n}\n\nfunction eol() {\n    return C.char('\\n').or(C.string('\\r\\n'));\n}\n\nexport default {\n    email,\n    date,\n    blank,\n    eol: eol(),\n};\n"]}