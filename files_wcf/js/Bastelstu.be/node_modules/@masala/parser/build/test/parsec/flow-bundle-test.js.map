{"version":3,"sources":["../../../src/test/parsec/flow-bundle-test.js"],"names":["value","undefined","accepted","testParser","parser","string","stream","ofString","parsing","parse","isAccepted","setUp","done","test","char","then","deepEqual","any","rep","eos","thenReturns","ok","object","startsWith","drop","equals","join","line","combinator","moveUntil","offset","document","start","length","ofArray","found","e","dropTo","SomeLazyParser","second","opt","map","orElse","lazy","first"],"mappings":"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","file":"flow-bundle-test.js","sourcesContent":["import Streams from '../../lib/stream/index';\nimport {F, C} from '../../lib/parsec/index';\n\nlet value = undefined;\nlet accepted = undefined;\n\nfunction testParser(parser, string) {\n    let stream = Streams.ofString(string);\n    let parsing = parser.parse(stream);\n\n    value = parsing.value;\n    accepted = parsing.isAccepted();\n}\n\nexport default {\n    setUp: function(done) {\n        done();\n    },\n\n    'expect flatten result to be ok': function(test) {\n        const string = 'foobar';\n        // tests here\n        const parser = C.char('f')\n            .then(C.char('o'))\n            .then(C.char('o'))\n            .then(C.string('bar'));\n        testParser(parser, string);\n        test.deepEqual(value, ['f', 'o', 'o', 'bar'], 'flatten result not ok');\n        test.done();\n    },\n\n    'expect thenReturns to be ok when empty': function(test) {\n        const string = 'some';\n        // tests here\n        const parser = F.any.rep().then(F.eos).thenReturns([]);\n        testParser(parser, string);\n        test.ok(accepted);\n        test.deepEqual(value, [], 'flatten result not ok');\n        test.done();\n    },\n\n    'expect startsWith to start': function(test) {\n        const string = ' world';\n        const object = 'hello';\n        // tests here\n        const parser = F.startsWith(object)\n            .then(C.string(' world'))\n            .then(F.eos.drop());\n        testParser(parser, string);\n        test.ok(accepted);\n        test.equals(value.join(''), 'hello world');\n        test.done();\n    },\n\n    'test moveUntilFast string': function(test) {\n        const line = Streams.ofString('soXYZso');\n\n        const combinator = F.moveUntil('XYZ');\n        const parser = combinator.parse(line);\n        const value = parser.value;\n        const offset = parser.offset;\n\n        test.equals(value, 'so');\n        test.equals(offset, 2);\n        test.done();\n    },\n    'test moveUntilFast string with continuation': function(test) {\n        const document = 'start-detect-XYZ-continues';\n        const line = Streams.ofString(document);\n\n        const start = C.string('start-');\n\n        const combinator = start\n            .drop()\n            .then(F.moveUntil('XYZ'))\n            .then(C.string('XYZ-continues').drop());\n        const parser = combinator.parse(line);\n        const value = parser.value;\n        const offset = parser.offset;\n\n        test.equals(value, 'detect-');\n        test.equals(offset, document.length);\n        test.done();\n    },\n    'test moveUntilFast array of string with continuation': function(test) {\n        const document = 'start-detect-XYZ-continues';\n        const line = Streams.ofString(document);\n\n        const start = C.string('start-');\n\n        const combinator = start\n            .drop()\n            .then(F.moveUntil(['ABC', 'ZE', 'XYZ']))\n            .then(C.string('XYZ-continues').drop());\n\n        const parser = combinator.parse(line);\n        const value = parser.value;\n        const offset = parser.offset;\n\n        test.equals(value, 'detect-');\n        test.equals(offset, document.length);\n        test.done();\n    },\n    'test moveUntilFast string fails': function(test) {\n        const document = 'start-detect-XYZ-continues';\n        const line = Streams.ofString(document);\n\n        const start = C.string('start-');\n\n        const combinator = start\n            .drop()\n            .then(F.moveUntil('EEE'))\n            .then(C.string('XYZ-continues').drop());\n\n        const parsing = combinator.parse(line);\n\n        test.ok(!parsing.isAccepted());\n        test.done();\n    },\n    'test moveUntilFast array of string fails': function(test) {\n        const document = 'start-detect-XYZ-continues';\n        const line = Streams.ofString(document);\n\n        const start = C.string('start-');\n\n        const combinator = start\n            .drop()\n            .then(F.moveUntil(['ABC', 'ZE', 'EEE']))\n            .then(C.string('XYZ-continues').drop());\n\n        const parsing = combinator.parse(line);\n\n        test.ok(!parsing.isAccepted());\n        test.done();\n    },\n    'test moveUntilFast fails if array stream': function(test) {\n        const document = ['More', 'XYZ'];\n        const line = Streams.ofArray(document);\n\n        const combinator = F.moveUntil(['ABC', 'ZE', 'XYZ']);\n        let found = false;\n        try {\n            combinator.parse(line);\n        } catch (e) {\n            if (e === 'Input source must be a String') {\n                found = true;\n            }\n        }\n\n        test.ok(found);\n        test.done();\n    },\n    'test moveUntilFastString fails if array stream': function(test) {\n        const document = ['More', 'XYZ'];\n        const line = Streams.ofArray(document);\n\n        const combinator = F.moveUntil('XYZ');\n        let found = false;\n        try {\n            combinator.parse(line);\n        } catch (e) {\n            if (e === 'Input source must be a String') {\n                found = true;\n            }\n        }\n\n        test.ok(found);\n        test.done();\n    },\n\n    'test moveUntil': function(test) {\n        const line = Streams.ofString('I write until James appears');\n\n        const combinator = F.moveUntil(C.string('James')).then(F.any.drop());\n        const value = combinator.parse(line).value;\n\n        test.equals(value, 'I write until ');\n        test.done();\n    },\n    'test moveUntil Not found': function(test) {\n        const line = Streams.ofString('I write until James appears');\n\n        const combinator = F.moveUntil(C.string('Indiana'))\n            .then(C.string('I'))\n            .then(F.any.drop());\n        const accepted = combinator.parse(line).isAccepted();\n\n        test.ok(!accepted);\n        test.done();\n    },\n    'test moveUntil  found with failing parser': function(test) {\n        const line = Streams.ofString('I write until James Bond appears');\n\n        const combinator = F.moveUntil(C.string('James')).then(F.dropTo(F.eos));\n        const accepted = combinator.parse(line).isAccepted();\n\n        test.ok(!accepted);\n        test.done();\n    },\n    'test dropTo with string': function(test) {\n        const line = Streams.ofString('I write until James Bond appears');\n\n        const combinator = F.dropTo('James')\n            .then(C.string(' Bond appears'))\n            .then(F.eos);\n        const accepted = combinator.parse(line).isAccepted();\n\n        test.ok(accepted);\n        test.done();\n    },\n    'test dropTo with string fail': function(test) {\n        const line = Streams.ofString('I write until James Bond appears');\n\n        const combinator = F.dropTo('James')\n            .then(C.string(' Bond appears'))\n            .then(F.eos);\n        const accepted = combinator.parse(line).isAccepted();\n\n        test.ok(accepted);\n        test.done();\n    },\n    'test dropTo with parser': function(test) {\n        const line = Streams.ofString('I write until James Bond appears');\n\n        const combinator = F.dropTo(C.string('James'))\n            .then(C.string(' Bond appears'))\n            .then(F.eos);\n        const accepted = combinator.parse(line).isAccepted();\n\n        test.ok(accepted);\n        test.done();\n    },\n    'test moveUntil found with more parsers': function(test) {\n        const line = Streams.ofString('I write until James Bond appears');\n\n        const combinator = F.moveUntil(C.string('James'))\n            .then(F.dropTo('appears'))\n            .then(F.eos.drop());\n        const value = combinator.parse(line).value;\n\n        test.equals(value, 'I write until ');\n        test.done();\n    },\n\n    'lazy with a class': function(test) {\n        class SomeLazyParser {\n            constructor(char) {\n                this.char = char;\n            }\n\n            first() {\n                return C.char(this.char).then(\n                    this.second().opt().map(opt => opt.orElse(''))\n                );\n            }\n\n            second() {\n                return C.char('b').then(F.lazy(this.first, ['a'], this));\n            }\n        }\n\n        const line = Streams.ofString('ababa');\n\n        const combinator = new SomeLazyParser('a').first().then(F.eos.drop());\n        const value = combinator.parse(line).value;\n\n        test.equals(value.join(''), 'ababa');\n        test.done();\n    },\n};\n\n"]}