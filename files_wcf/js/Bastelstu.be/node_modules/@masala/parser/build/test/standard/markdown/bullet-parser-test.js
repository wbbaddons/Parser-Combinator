'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _bulletParser = require('../../../lib/standard/markdown/bullet-parser');

var _bulletParser2 = _interopRequireDefault(_bulletParser);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var value = undefined; /**
                        * Created by Simon on 25/12/2016.
                        */

var accepted = undefined;

function testLine(line) {
    var parsing = _bulletParser2.default.parse(line);
    value = parsing.value;
    accepted = parsing.isAccepted();
}

exports.default = {
    setUp: function setUp(done) {
        done();
    },

    'test text normal': function testTextNormal(test) {
        var line = 'This is not a bullet';
        testLine(line);
        test.ok(!accepted, 'Normal text should not be accepted as a bullet');
        test.done();
    },

    'test normal bullet': function testNormalBullet(test) {
        var line = '* This is a bullet';
        testLine(line);
        test.deepEqual({
            bullet: {
                level: 1,
                content: [{ text: 'This is a bullet' }]
            }
        }, value, 'problem test:test normal bullet');
        test.done();
    },

    'test bullet level 2': function testBulletLevel2(test) {
        var line = '      * This is a lvl2 bullet \n  ';
        testLine(line);
        test.deepEqual({
            bullet: {
                level: 2,
                content: [{ text: 'This is a lvl2 bullet ' }]
            }
        }, value, 'problem test:test bullet Lvl2');
        test.done();
    },

    'test bullet level 2 mix tab spaces': function testBulletLevel2MixTabSpaces(test) {
        var line = '\t  * This is another lvl2 bullet \n  ';
        testLine(line);
        test.deepEqual({
            bullet: {
                level: 2,
                content: [{ text: 'This is another lvl2 bullet ' }]
            }
        }, value, 'problem test:test bullet Lvl2');
        test.done();
    },

    'test bullet et format': function testBulletEtFormat(test) {
        var line = '* This is a bullet *with italic* and even **bold characters**\n  ';
        testLine(line);
        test.deepEqual({
            bullet: {
                level: 1,
                content: [{ text: 'This is a bullet ' }, { italic: 'with italic' }, { text: ' and even ' }, { bold: 'bold characters' }]
            }
        }, value, 'problem test:test bullet et format');
        test.done();
    }
};
//# sourceMappingURL=bullet-parser-test.js.map