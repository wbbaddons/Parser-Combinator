{"version":3,"sources":["../../../../src/test/standard/json/jsonparser_test.js"],"names":["setUp","done","test","expect","ok","parse","ofString","isAccepted","equal","result","offset"],"mappings":"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","file":"jsonparser_test.js","sourcesContent":["import stream from '../../../lib/stream/index';\nimport jsonparser from '../../../lib/standard/json/jsonparser';\n\n/*\n  ======== A Handy Little Nodeunit Reference ========\n  https://github.com/caolan/nodeunit\n\n  Test methods:\n    test.expect(numAssertions)\n    test.done()\n  Test assertions:\n    test.ok(value, [message])\n    test.equal(actual, expected, [message])\n    test.notEqual(actual, expected, [message])\n    test.deepEqual(actual, expected, [message])\n    test.notDeepEqual(actual, expected, [message])\n    test.strictEqual(actual, expected, [message])\n    test.notStrictEqual(actual, expected, [message])\n    test.throws(block, [error], [message])\n    test.doesNotThrow(block, [error], [message])\n    test.ifError(value)\n*/\n\nexport default {\n    setUp: function(done) {\n        done();\n    },\n\n    'number accepted': function(test) {\n        test.expect(1);\n        // tests here\n        test.ok(\n            jsonparser.parse(stream.ofString('123')).isAccepted(),\n            'should be accepted.'\n        );\n        test.done();\n    },\n\n    'string accepted': function(test) {\n        test.expect(1);\n        // tests here\n        test.ok(\n            jsonparser.parse(stream.ofString('\"123\"')).isAccepted(),\n            'should be accepted.'\n        );\n        test.done();\n    },\n\n    'string and unrecognized item rejected': function(test) {\n        test.expect(1);\n        // tests here\n        test.equal(\n            jsonparser.parse(stream.ofString('\"123\" -')).isAccepted(),\n            false,\n            'should be rejected.'\n        );\n        test.done();\n    },\n\n    'string and unrecognized item rejected with correct offset': function(\n        test\n    ) {\n        test.expect(1);\n        // tests here\n        var result = jsonparser.parse(stream.ofString('[\"123\", -]'));\n        test.equal(result.offset, 7, 'should be 7.');\n        test.done();\n    },\n\n    'null accepted': function(test) {\n        test.expect(1);\n        // tests here\n        test.ok(\n            jsonparser.parse(stream.ofString('null')).isAccepted(),\n            'should be accepted.'\n        );\n        test.done();\n    },\n\n    'true accepted': function(test) {\n        test.expect(1);\n        // tests here\n        test.ok(\n            jsonparser.parse(stream.ofString('true')).isAccepted(),\n            'should be accepted.'\n        );\n        test.done();\n    },\n\n    'false accepted': function(test) {\n        test.expect(1);\n        // tests here\n        test.ok(\n            jsonparser.parse(stream.ofString('false')).isAccepted(),\n            'should be accepted.'\n        );\n        test.done();\n    },\n\n    'empty array accepted': function(test) {\n        test.expect(1);\n        // tests here\n        test.ok(\n            jsonparser.parse(stream.ofString('[ ]')).isAccepted(),\n            'should be accepted.'\n        );\n        test.done();\n    },\n\n    'singleton array accepted': function(test) {\n        test.expect(1);\n        // tests here\n        test.ok(\n            jsonparser.parse(stream.ofString('[ 123 ]')).isAccepted(),\n            'should be accepted.'\n        );\n        test.done();\n    },\n\n    'multi element array accepted': function(test) {\n        test.expect(1);\n        // tests here\n        test.ok(\n            jsonparser.parse(stream.ofString('[ 123 , 234 ]')).isAccepted(),\n            'should be accepted.'\n        );\n        test.done();\n    },\n\n    'empty object accepted': function(test) {\n        test.expect(1);\n        // tests here\n        test.ok(\n            jsonparser.parse(stream.ofString('{ }')).isAccepted(),\n            'should be accepted.'\n        );\n        test.done();\n    },\n\n    'singleton object accepted': function(test) {\n        test.expect(1);\n        // tests here\n        test.ok(\n            jsonparser.parse(stream.ofString('{ \"a\" : \"v\" }')).isAccepted(),\n            'should be accepted.'\n        );\n        test.done();\n    },\n\n    'multi element object accepted': function(test) {\n        test.expect(1);\n        // tests here\n        test.ok(\n            jsonparser\n                .parse(stream.ofString('{ \"a\" : \"v\", \"a\" : [] }'))\n                .isAccepted(),\n            'should be accepted.'\n        );\n        test.done();\n    },\n\n    'multi level object accepted': function(test) {\n        test.expect(1);\n        // tests here\n        test.ok(\n            jsonparser\n                .parse(stream.ofString('{ \"a\" : \"v\", \"b\" : {\"c\":{\"d\":12} }}'))\n                .isAccepted(),\n            'should be accepted.'\n        );\n        test.done();\n    },\n};\n"]}