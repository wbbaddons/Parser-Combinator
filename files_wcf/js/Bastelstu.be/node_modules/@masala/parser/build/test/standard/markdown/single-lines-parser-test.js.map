{"version":3,"sources":["../../../../src/test/standard/markdown/single-lines-parser-test.js"],"names":["value","undefined","testLine","line","parsing","parseLine","setUp","done","test","expected","title","level","text","deepEqual","paragraph","italic","bold","bullet","content"],"mappings":"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","file":"single-lines-parser-test.js","sourcesContent":["/**\n * Created by Simon on 16/12/2016.\n *\n */\n\nimport mdParser from '../../../lib/standard/markdown/markdown-parser';\n\nlet value = undefined;\n\nfunction testLine(line) {\n    let parsing = mdParser.parseLine(line);\n    value = parsing.value;\n}\n\nexport default {\n    setUp: function(done) {\n        done();\n    },\n\n    /*\n    'test empty text2': function (test) {\n        testLine('   ');\n        test.ok(accepted, 'blank line is accepted');\n        test.done();\n    },\n\n    'test empty text3': function (test) {\n        testLine('  \\n\\n  \\n    \\n ');\n        test.ok(accepted, 'blank lines are accepted');\n        test.done();\n    },   */\n\n    'test level1': function(test) {\n        testLine('# title1\\n');\n        let expected = {title: {level: 1, text: 'title1'}};\n        test.deepEqual(expected, value, 'test title1');\n        test.done();\n    },\n\n    'test level3': function(test) {\n        testLine('### title\\n');\n        let expected = {title: {level: 3, text: 'title'}};\n        test.deepEqual(expected, value, 'test title level 3');\n        test.done();\n    },\n\n    'title alternate 1 should be accepted': function(test) {\n        testLine('Title\\n=====\\n');\n        let expected = {title: {level: 1, text: 'Title'}};\n        test.deepEqual(expected, value, 'test title1 alt');\n        test.done();\n    },\n\n    'title alternate 1 should be title1': function(test) {\n        testLine('Title\\n=====   \\n');\n        let expected = {title: {level: 1, text: 'Title'}};\n        test.deepEqual(expected, value, 'test title1 alt');\n        test.done();\n    },\n\n    'title alternate 2 should be accepted': function(test) {\n        testLine('Title\\n-----\\n');\n        let expected = {title: {level: 2, text: 'Title'}};\n        test.deepEqual(expected, value, 'test title2 alt');\n        test.done();\n    },\n\n    'title alternate 2 should be title1': function(test) {\n        testLine('Title\\n------   \\n');\n        let expected = {title: {level: 2, text: 'Title'}};\n        test.deepEqual(expected, value, 'test title2 alt');\n        test.done();\n    },\n\n    ' stars into title': function(test) {\n        testLine('2*3*4 = 24\\n------   \\n');\n        let expected = {title: {level: 2, text: '2*3*4 = 24'}};\n        test.deepEqual(expected, value, 'test stars in title1');\n        test.done();\n    },\n\n    ' stars into title2': function(test) {\n        testLine('## 2*3*4 = 24\\n');\n        let expected = {title: {level: 2, text: '2*3*4 = 24'}};\n        test.deepEqual(expected, value, 'test stars in title2');\n        test.done();\n    },\n\n    'test simple text': function(test) {\n        testLine('text');\n        test.deepEqual({paragraph: [{text: 'text'}]}, value);\n        test.done();\n    },\n\n    'test simple text2': function(test) {\n        testLine('  text ');\n        test.deepEqual({paragraph: [{text: 'text'}]}, value);\n        test.done();\n    },\n\n    'test italic': function(test) {\n        testLine('*text*');\n        test.deepEqual({paragraph: [{italic: 'text'}]}, value);\n        test.done();\n    },\n\n    'test bold': function(test) {\n        testLine('**text**');\n        test.deepEqual({paragraph: [{bold: 'text'}]}, value);\n        test.done();\n    },\n\n    'test combined format': function(test) {\n        testLine('  *italic* text **then bold** ');\n        let expected = {\n            paragraph: [\n                {italic: 'italic'},\n                {text: ' text '},\n                {bold: 'then bold'},\n                {text: ' '},\n            ],\n        };\n        test.deepEqual(expected, value);\n        test.done();\n    },\n\n    'single \\\\n must be translated as space': function(test) {\n        testLine('  *italic* text\\n**then bold** ');\n        let expected = {\n            paragraph: [\n                {italic: 'italic'},\n                {text: ' text '},\n                {bold: 'then bold'},\n                {text: ' '},\n            ],\n        };\n        test.deepEqual(expected, value);\n        test.done();\n    },\n\n    'test normal bullet': function(test) {\n        const line = `* This is a bullet`;\n        testLine(line);\n        test.deepEqual(\n            {bullet: {level: 1, content: [{text: 'This is a bullet'}]}},\n            value,\n            'problem test:test normal bullet'\n        );\n        test.done();\n    },\n\n    'test complex bullet': function(test) {\n        const line = '*    This is a bullet \\n  ';\n        testLine(line);\n        test.deepEqual(\n            {bullet: {level: 1, content: [{text: '   This is a bullet '}]}},\n            value,\n            'problem test:test complex bullet '\n        );\n        test.done();\n    },\n};\n"]}