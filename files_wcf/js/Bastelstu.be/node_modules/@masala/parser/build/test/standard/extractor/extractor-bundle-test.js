'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extractorBundle = require('../../../lib/standard/extractor/extractor-bundle');

var _extractorBundle2 = _interopRequireDefault(_extractorBundle);

var _index = require('../../../lib/parsec/index');

var _index2 = require('../../../lib/stream/index');

var _index3 = _interopRequireDefault(_index2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    setUp: function setUp(done) {
        done();
    },

    'test spaces': function testSpaces(test) {
        var line = _index3.default.ofString('    this starts with 4 spaces');

        var x = new _extractorBundle2.default();
        var combinator = x.spaces().thenLeft(_index.F.any.rep());
        var value = combinator.parse(line).value;
        test.equals(value.length, 4);
        test.done();
    },
    'test spaces and line feed': function testSpacesAndLineFeed(test) {
        var line = _index3.default.ofString('    this \n contains line feed');

        var x = new _extractorBundle2.default();
        var combinator = x.spaces().then(x.word()).thenRight(x.spaces()).thenLeft(_index.F.any);
        var value = combinator.parse(line).value;
        test.equals(value.length, 3);
        test.done();
    },
    'test spaces, tabs and line feed': function testSpacesTabsAndLineFeed(test) {
        var line = _index3.default.ofString('    this \n \t contains line feed');

        var x = new _extractorBundle2.default();
        var combinator = x.spaces().then(x.word()).thenRight(x.spaces()).thenLeft(_index.F.any);
        var value = combinator.parse(line).value;
        test.equals(value.length, 5);
        test.done();
    },
    'test numbers': function testNumbers(test) {
        var line = _index3.default.ofString('98');

        var x = new _extractorBundle2.default();
        var combinator = x.number();
        var value = combinator.parse(line).value;
        test.ok(value === 98);
        test.done();
    },
    'test digits': function testDigits(test) {
        var line = _index3.default.ofString('98');

        var x = new _extractorBundle2.default();
        var combinator = x.digits();
        var value = combinator.parse(line).value;
        test.ok(value === '98');
        test.done();
    },
    'test single word': function testSingleWord(test) {
        var line = _index3.default.ofString('Parsec-');

        var x = new _extractorBundle2.default();
        var combinator = x.word().thenLeft(_index.C.char('-'));
        var value = combinator.parse(line).value;
        test.ok(value === 'Parsec');
        test.done();
    },

    'test single word hexadecimal': function testSingleWordHexadecimal(test) {
        var line = _index3.default.ofString('10FF-hexadecimal');
        var hexadecimal = _index.C.charIn('0123456789ABCDEF');

        var x = new _extractorBundle2.default({ letter: hexadecimal });
        var combinator = x.word().map(function (x) {
            return parseInt(x, 16);
        }).thenLeft(_index.C.char('-')).thenLeft(_index.C.string('hexadecimal'));
        var value = combinator.parse(line).value;
        test.equals(value, 4351);
        test.done();
    },
    'single word with bad letters should fail': function singleWordWithBadLettersShouldFail(test) {
        var line = _index3.default.ofString('classicWord-notHexadecimal');
        var hexadecimal = _index.C.charIn('0123456789ABCDEF');

        var x = new _extractorBundle2.default({ letter: hexadecimal });
        var combinator = x.word().map(function (x) {
            return parseInt(x, 16);
        }).thenLeft(_index.C.char('-')).thenLeft(_index.C.string('notHexadecimal'));
        var accepted = combinator.parse(line).isAccepted();
        test.ok(!accepted);
        test.done();
    },

    'test words': function testWords(test) {
        var line = _index3.default.ofString('The James Bond series, by writer Ian Fleming');

        var x = new _extractorBundle2.default();
        var combinator = x.words();
        var value = combinator.parse(line).value;
        test.ok(value[1] === ' ');
        test.ok(_includes(value, 'Bond'));
        test.done();
    },

    'test wordsIn': function testWordsIn(test) {
        var line = _index3.default.ofString('James Bond by Ian Fleming');

        var x = new _extractorBundle2.default();
        var combinator = x.wordsIn(['James', 'Bond', 'by', 'Ian', 'Fleming'], true);
        var value = combinator.parse(line).value;
        test.ok(value.length === 9);
        test.ok(_includes(value, 'James'));
        test.ok(_includes(value, 'Bond'));
        test.ok(_includes(value, 'Fleming'));
        test.done();
    },

    'test wordsIn without keeping spaces': function testWordsInWithoutKeepingSpaces(test) {
        var line = _index3.default.ofString('James Bond by Ian Fleming');

        var x = new _extractorBundle2.default();
        var combinator = x.wordsIn(['James', 'Bond', 'by', 'Ian', 'Fleming'], false);
        var value = combinator.parse(line).value;
        test.ok(value.length === 5);
        test.ok(_includes(value, 'James'));
        test.ok(_includes(value, 'Bond'));
        test.ok(_includes(value, 'Fleming'));
        test.done();
    },

    'test wordsIn keeping spaces with alt spaces': function testWordsInKeepingSpacesWithAltSpaces(test) {
        var line = _index3.default.ofString('James%Bond%by Ian=Fleming');

        var x = new _extractorBundle2.default({ moreSeparators: '%=' });
        var combinator = x.wordsIn(['James', 'Bond', 'by', 'Ian', 'Fleming'], false);
        var value = combinator.parse(line).value;
        test.ok(value.length === 5);
        test.ok(_includes(value, 'James'));
        test.ok(_includes(value, 'Bond'));
        test.ok(_includes(value, 'Fleming'));
        test.done();
    },

    'test wordsIn with custom spaces': function testWordsInWithCustomSpaces(test) {
        var str = 'JamesSPACEBondSPACEbySPACEIanSPACEFlemingSPACESPACE';
        var line = _index3.default.ofString(str);

        var x = new _extractorBundle2.default({ wordSeparators: _index.C.string('SPACE') });
        var combinator = x.wordsIn(['James', 'Bond', 'by', 'Ian', 'Fleming'], false);
        var value = combinator.parse(line).value;
        test.ok(value.length === 5);
        test.ok(_includes(value, 'James'));
        test.ok(_includes(value, 'Bond'));
        test.ok(_includes(value, 'Fleming'));
        test.done();
    },
    'test wordsIn with both custom spaces and more Sep': function testWordsInWithBothCustomSpacesAndMoreSep(test) {
        var str = 'James=BondSPACEbySPACEIanSPACEFlemingSPACESPACE';
        var line = _index3.default.ofString(str);

        var found = false;
        var original = console.warn;
        console.warn = function () {
            found = true;
        };
        var x = new _extractorBundle2.default({
            wordSeparators: _index.C.string('SPACE'),
            moreSeparators: '%='
        });

        var combinator = x.wordsIn(['James=Bond', 'by', 'Ian', 'Fleming'], false);

        var value = combinator.parse(line).value;

        test.ok(found);
        test.ok(value.length === 4);
        test.ok(_includes(value, 'James=Bond'));
        test.ok(_includes(value, 'Fleming'));
        console.warn = original;
        test.done();
    },

    'test first': function testFirst(test) {
        var line = _index3.default.ofString("Hello 'World'");
        var x = new _extractorBundle2.default({ wordSeparators: _index.C.charIn(" '") });

        var helloParser = x.words().map(x.first);

        var value = helloParser.parse(line).value;

        test.equals(value, 'Hello');
        test.done();
    },
    'test last': function testLast(test) {
        var line = _index3.default.ofString("Hello 'World'");
        var x = new _extractorBundle2.default({ moreSeparators: "'" });

        var helloParser = x.words(false).map(x.last);

        var value = helloParser.parse(line).value;

        test.equals(value, 'World');
        test.done();
    }
};


function _includes(array, value) {
    for (var i = 0; i < array.length; i++) {
        if (array[i] === value) {
            return true;
        }
    }
    return false;
}
//# sourceMappingURL=extractor-bundle-test.js.map