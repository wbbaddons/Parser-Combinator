{"version":3,"sources":["../../../src/test/data/try_test.js"],"names":["setUp","done","test","expect","ok","success","isSuccess","failure","isFailure","map","i","Error","equal","flatMap","recoverWith","lazyRecoverWith","filter","v","onSuccess","onFailure"],"mappings":"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","file":"try_test.js","sourcesContent":["import atry from '../../lib/data/try';\n\n/*\n  ======== A Handy Little Nodeunit Reference ========\n  https://github.com/caolan/nodeunit\n\n  Test methods:\n    test.expect(numAssertions)\n    test.done()\n  Test assertions:\n    test.ok(value, [message])\n    test.equal(actual, expected, [message])\n    test.notEqual(actual, expected, [message])\n    test.deepEqual(actual, expected, [message])\n    test.notDeepEqual(actual, expected, [message])\n    test.strictEqual(actual, expected, [message])\n    test.notStrictEqual(actual, expected, [message])\n    test.throws(block, [error], [message])\n    test.doesNotThrow(block, [error], [message])\n    test.ifError(value)\n*/\n\nexport default {\n    setUp: function(done) {\n        done();\n    },\n\n    'atry success': function(test) {\n        test.expect(1);\n        // tests here\n        test.ok(atry.success(1).isSuccess(), 'should be success.');\n        test.done();\n    },\n\n    'atry failure': function(test) {\n        test.expect(1);\n        // tests here\n        test.ok(atry.failure(1).isFailure(), 'should be failure.');\n        test.done();\n    },\n\n    'atry success map can be a success': function(test) {\n        test.expect(1);\n        // tests here\n        test.ok(\n            atry\n                .success(1)\n                .map(function(i) {\n                    return i + 1;\n                })\n                .isSuccess(),\n            'should be success.'\n        );\n        test.done();\n    },\n\n    'atry success map can be a failure': function(test) {\n        test.expect(1);\n        // tests here\n        test.ok(\n            atry\n                .success(1)\n                .map(function() {\n                    throw new Error();\n                })\n                .isFailure(),\n            'should be failure.'\n        );\n        test.done();\n    },\n\n    'atry success map': function(test) {\n        test.expect(1);\n        // tests here\n        test.equal(\n            atry\n                .success(1)\n                .map(function(i) {\n                    return i + 1;\n                })\n                .success(),\n            2,\n            'should be success.'\n        );\n        test.done();\n    },\n\n    'atry failure map is a failure': function(test) {\n        test.expect(1);\n        // tests here\n        test.ok(\n            atry\n                .failure(1)\n                .map(function(i) {\n                    return i + 1;\n                })\n                .isFailure(),\n            'should be failure.'\n        );\n        test.done();\n    },\n\n    'atry failure map': function(test) {\n        test.expect(1);\n        // tests here\n        test.equal(\n            atry\n                .failure(1)\n                .map(function(i) {\n                    return i + 1;\n                })\n                .failure(),\n            1,\n            'should be failure.'\n        );\n        test.done();\n    },\n\n    'atry success flatMap of atry': function(test) {\n        test.expect(1);\n        // tests here\n        test.equal(\n            atry\n                .success(1)\n                .flatMap(function(i) {\n                    return atry.success(i + 1);\n                })\n                .success(),\n            2,\n            'should be success.'\n        );\n        test.done();\n    },\n\n    'atry failure flatMap of int': function(test) {\n        test.expect(1);\n        // tests here\n        test.equal(\n            atry\n                .failure(1)\n                .flatMap(function(i) {\n                    return i + 1;\n                })\n                .failure(),\n            1,\n            'should be failure.'\n        );\n        test.done();\n    },\n\n    'atry failure flatMap of Error': function(test) {\n        test.expect(1);\n        // tests here\n        test.equal(\n            atry\n                .success(1)\n                .flatMap(function() {\n                    throw 1;\n                })\n                .failure(),\n            1,\n            'should be failure.'\n        );\n        test.done();\n    },\n\n    'atry success recoverWith': function(test) {\n        test.expect(1);\n        // tests here\n        test.equal(atry.success(1).recoverWith(2), 1, 'should be success.');\n        test.done();\n    },\n\n    'atry failure recoverWith': function(test) {\n        test.expect(1);\n        // tests here\n        test.equal(atry.failure(1).recoverWith(2), 2, 'should be failure.');\n        test.done();\n    },\n\n    'atry success lazyRecoverWith': function(test) {\n        test.expect(1);\n        // tests here\n        test.equal(\n            atry.success(1).lazyRecoverWith(function() {\n                return 2;\n            }),\n            1,\n            'should be success.'\n        );\n        test.done();\n    },\n\n    'atry failure lazyRecoverWith': function(test) {\n        test.expect(1);\n        // tests here\n        test.equal(\n            atry.failure(1).lazyRecoverWith(function() {\n                return 2;\n            }),\n            2,\n            'should be failure.'\n        );\n        test.done();\n    },\n\n    'atry success filter': function(test) {\n        test.expect(1);\n        // tests here\n        test.equal(\n            atry\n                .success(1)\n                .filter(function(v) {\n                    return v === 1;\n                })\n                .isSuccess(),\n            true,\n            'should be success.'\n        );\n        test.done();\n    },\n\n    'atry success wrong filter': function(test) {\n        test.expect(1);\n        // tests here\n        test.equal(\n            atry\n                .success(1)\n                .filter(function(v) {\n                    return v === 2;\n                })\n                .isFailure(),\n            true,\n            'should be failure.'\n        );\n        test.done();\n    },\n\n    'atry failure filter': function(test) {\n        test.expect(1);\n        // tests here\n        test.equal(\n            atry\n                .failure(1)\n                .filter(function(v) {\n                    return v === 1;\n                })\n                .isFailure(),\n            true,\n            'should be failure.'\n        );\n        test.done();\n    },\n\n    'atry success onSuccess': function(test) {\n        test.expect(1);\n        // tests here\n        var success = false;\n        atry.success(1).onSuccess(function() {\n            success = true;\n        });\n        test.equal(success, true, 'should be true.');\n        test.done();\n    },\n\n    'atry failure onSuccess': function(test) {\n        test.expect(1);\n        // tests here\n        var success = false;\n        atry.failure().onSuccess(function() {\n            success = true;\n        });\n        test.equal(success, false, 'should be false.');\n        test.done();\n    },\n\n    'atry success onFailure': function(test) {\n        test.expect(1);\n        // tests here\n        var failure = false;\n        atry.success(1).onFailure(function() {\n            failure = true;\n        });\n        test.equal(failure, false, 'should be false.');\n        test.done();\n    },\n\n    'atry failure onFailure': function(test) {\n        test.expect(1);\n        // tests here\n        var failure = false;\n        atry.failure().onFailure(function() {\n            failure = true;\n        });\n        test.equal(failure, true, 'should be true.');\n        test.done();\n    },\n};\n"]}