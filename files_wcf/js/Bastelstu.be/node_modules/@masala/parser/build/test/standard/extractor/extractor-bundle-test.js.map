{"version":3,"sources":["../../../../src/test/standard/extractor/extractor-bundle-test.js"],"names":["setUp","done","test","line","ofString","x","combinator","spaces","thenLeft","any","rep","value","parse","equals","length","then","word","thenRight","number","ok","digits","char","hexadecimal","charIn","letter","map","parseInt","string","accepted","isAccepted","words","_includes","wordsIn","moreSeparators","str","wordSeparators","found","original","console","warn","helloParser","first","last","array","i"],"mappings":"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","file":"extractor-bundle-test.js","sourcesContent":["import X from '../../../lib/standard/extractor/extractor-bundle';\nimport {F, C} from '../../../lib/parsec/index';\nimport stream from '../../../lib/stream/index';\n\nexport default {\n    setUp: function(done) {\n        done();\n    },\n\n    'test spaces': function(test) {\n        const line = stream.ofString('    this starts with 4 spaces');\n\n        const x = new X();\n        const combinator = x.spaces().thenLeft(F.any.rep());\n        const value = combinator.parse(line).value;\n        test.equals(value.length, 4);\n        test.done();\n    },\n    'test spaces and line feed': function(test) {\n        const line = stream.ofString('    this \\n contains line feed');\n\n        const x = new X();\n        const combinator = x\n            .spaces()\n            .then(x.word())\n            .thenRight(x.spaces())\n            .thenLeft(F.any);\n        const value = combinator.parse(line).value;\n        test.equals(value.length, 3);\n        test.done();\n    },\n    'test spaces, tabs and line feed': function(test) {\n        const line = stream.ofString('    this \\n \\t contains line feed');\n\n        const x = new X();\n        const combinator = x\n            .spaces()\n            .then(x.word())\n            .thenRight(x.spaces())\n            .thenLeft(F.any);\n        const value = combinator.parse(line).value;\n        test.equals(value.length, 5);\n        test.done();\n    },\n    'test numbers': function(test) {\n        const line = stream.ofString('98');\n\n        const x = new X();\n        const combinator = x.number();\n        const value = combinator.parse(line).value;\n        test.ok(value === 98);\n        test.done();\n    },\n    'test digits': function(test) {\n        const line = stream.ofString('98');\n\n        const x = new X();\n        const combinator = x.digits();\n        const value = combinator.parse(line).value;\n        test.ok(value === '98');\n        test.done();\n    },\n    'test single word': function(test) {\n        let line = stream.ofString('Parsec-');\n\n        const x = new X();\n        const combinator = x.word().thenLeft(C.char('-'));\n        const value = combinator.parse(line).value;\n        test.ok(value === 'Parsec');\n        test.done();\n    },\n\n    'test single word hexadecimal': function(test) {\n        let line = stream.ofString('10FF-hexadecimal');\n        const hexadecimal = C.charIn('0123456789ABCDEF');\n\n        const x = new X({letter: hexadecimal});\n        const combinator = x\n            .word()\n            .map(x => parseInt(x, 16))\n            .thenLeft(C.char('-'))\n            .thenLeft(C.string('hexadecimal'));\n        const value = combinator.parse(line).value;\n        test.equals(value, 4351);\n        test.done();\n    },\n    'single word with bad letters should fail': function(test) {\n        let line = stream.ofString('classicWord-notHexadecimal');\n        const hexadecimal = C.charIn('0123456789ABCDEF');\n\n        const x = new X({letter: hexadecimal});\n        const combinator = x\n            .word()\n            .map(x => parseInt(x, 16))\n            .thenLeft(C.char('-'))\n            .thenLeft(C.string('notHexadecimal'));\n        const accepted = combinator.parse(line).isAccepted();\n        test.ok(!accepted);\n        test.done();\n    },\n\n    'test words': function(test) {\n        let line = stream.ofString(\n            'The James Bond series, by writer Ian Fleming'\n        );\n\n        const x = new X();\n        const combinator = x.words();\n        const value = combinator.parse(line).value;\n        test.ok(value[1] === ' ');\n        test.ok(_includes(value, 'Bond'));\n        test.done();\n    },\n\n    'test wordsIn': function(test) {\n        let line = stream.ofString('James Bond by Ian Fleming');\n\n        const x = new X();\n        const combinator = x.wordsIn(\n            ['James', 'Bond', 'by', 'Ian', 'Fleming'],\n            true\n        );\n        const value = combinator.parse(line).value;\n        test.ok(value.length === 9);\n        test.ok(_includes(value, 'James'));\n        test.ok(_includes(value, 'Bond'));\n        test.ok(_includes(value, 'Fleming'));\n        test.done();\n    },\n\n    'test wordsIn without keeping spaces': function(test) {\n        let line = stream.ofString('James Bond by Ian Fleming');\n\n        const x = new X();\n        const combinator = x.wordsIn(\n            ['James', 'Bond', 'by', 'Ian', 'Fleming'],\n            false\n        );\n        const value = combinator.parse(line).value;\n        test.ok(value.length === 5);\n        test.ok(_includes(value, 'James'));\n        test.ok(_includes(value, 'Bond'));\n        test.ok(_includes(value, 'Fleming'));\n        test.done();\n    },\n\n    'test wordsIn keeping spaces with alt spaces': function(test) {\n        let line = stream.ofString('James%Bond%by Ian=Fleming');\n\n        const x = new X({moreSeparators: '%='});\n        const combinator = x.wordsIn(\n            ['James', 'Bond', 'by', 'Ian', 'Fleming'],\n            false\n        );\n        const value = combinator.parse(line).value;\n        test.ok(value.length === 5);\n        test.ok(_includes(value, 'James'));\n        test.ok(_includes(value, 'Bond'));\n        test.ok(_includes(value, 'Fleming'));\n        test.done();\n    },\n\n    'test wordsIn with custom spaces': function(test) {\n        const str = 'JamesSPACEBondSPACEbySPACEIanSPACEFlemingSPACESPACE';\n        let line = stream.ofString(str);\n\n        const x = new X({wordSeparators: C.string('SPACE')});\n        const combinator = x.wordsIn(\n            ['James', 'Bond', 'by', 'Ian', 'Fleming'],\n            false\n        );\n        const value = combinator.parse(line).value;\n        test.ok(value.length === 5);\n        test.ok(_includes(value, 'James'));\n        test.ok(_includes(value, 'Bond'));\n        test.ok(_includes(value, 'Fleming'));\n        test.done();\n    },\n    'test wordsIn with both custom spaces and more Sep': function(test) {\n        const str = 'James=BondSPACEbySPACEIanSPACEFlemingSPACESPACE';\n        let line = stream.ofString(str);\n\n        let found = false;\n        const original = console.warn;\n        console.warn = () => {\n            found = true;\n        };\n        const x = new X({\n            wordSeparators: C.string('SPACE'),\n            moreSeparators: '%=',\n        });\n\n        const combinator = x.wordsIn(\n            ['James=Bond', 'by', 'Ian', 'Fleming'],\n            false\n        );\n\n        const value = combinator.parse(line).value;\n\n        test.ok(found);\n        test.ok(value.length === 4);\n        test.ok(_includes(value, 'James=Bond'));\n        test.ok(_includes(value, 'Fleming'));\n        console.warn = original;\n        test.done();\n    },\n\n    'test first': function(test) {\n        const line = stream.ofString(\"Hello 'World'\");\n        const x = new X({wordSeparators: C.charIn(\" '\")});\n\n        const helloParser = x.words().map(x.first);\n\n        const value = helloParser.parse(line).value;\n\n        test.equals(value, 'Hello');\n        test.done();\n    },\n    'test last': function(test) {\n        const line = stream.ofString(\"Hello 'World'\");\n        const x = new X({moreSeparators: \"'\"});\n\n        const helloParser = x.words(false).map(x.last);\n\n        const value = helloParser.parse(line).value;\n\n        test.equals(value, 'World');\n        test.done();\n    },\n};\n\nfunction _includes(array, value) {\n    for (let i = 0; i < array.length; i++) {\n        if (array[i] === value) {\n            return true;\n        }\n    }\n    return false;\n}\n"]}