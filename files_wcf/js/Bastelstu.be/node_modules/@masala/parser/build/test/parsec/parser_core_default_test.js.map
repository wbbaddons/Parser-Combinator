{"version":3,"sources":["../../../src/test/parsec/parser_core_default_test.js"],"names":["setUp","done","test","expect","equal","char","map","a","parse","ofString","isAccepted","value","flatMap","returns","then","aVal","bcVal","join","filter","match","deepEqual","thenLeft","thenRight","thenReturns","or","consumed","opt","get","isPresent","equals","string","drop","rep","array","optrep","notChar"],"mappings":"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","file":"parser_core_default_test.js","sourcesContent":["import stream from '../../lib/stream/index';\nimport {F, C} from '../../lib/parsec/index';\n\n/*\n  ======== A Handy Little Nodeunit Reference ========\n  https://github.com/caolan/nodeunit\n\n  Test methods:\n    test.expect(numAssertions)\n    test.done()\n  Test assertions:\n    test.ok(value, [message])\n    test.equal(actual, expected, [message])\n    test.notEqual(actual, expected, [message])\n    test.deepEqual(actual, expected, [message])\n    test.notDeepEqual(actual, expected, [message])\n    test.strictEqual(actual, expected, [message])\n    test.notStrictEqual(actual, expected, [message])\n    test.throws(block, [error], [message])\n    test.doesNotThrow(block, [error], [message])\n    test.ifError(value)\n*/\n\nexport default {\n    setUp: function(done) {\n        done();\n    },\n\n    'expect (map) to be accepted': function(test) {\n        test.expect(1);\n        // tests here\n        test.equal(\n            C.char('a')\n                .map(function(a) {\n                    return a + 'b';\n                })\n                .parse(stream.ofString('a'))\n                .isAccepted(),\n            true,\n            'should be accepted.'\n        );\n        test.done();\n    },\n\n    'expect (map) to be rejected': function(test) {\n        test.expect(1);\n        // tests here\n        test.equal(\n            C.char('a')\n                .map(function(a) {\n                    return a + 'b';\n                })\n                .parse(stream.ofString('b'))\n                .isAccepted(),\n            false,\n            'should be rejected.'\n        );\n        test.done();\n    },\n\n    'expect (map) to be return ab': function(test) {\n        test.expect(1);\n        // tests here\n        test.equal(\n            C.char('a')\n                .map(function(a) {\n                    return a + 'b';\n                })\n                .parse(stream.ofString('a')).value,\n            'ab',\n            'should be accepted.'\n        );\n        test.done();\n    },\n\n    'expect (flatMap) to be accepted': function(test) {\n        test.expect(1);\n        // tests here\n        test.equal(\n            C.char('a')\n                .flatMap(function() {\n                    return F.returns('b');\n                })\n                .parse(stream.ofString('a'))\n                .isAccepted(),\n            true,\n            'should be accepted.'\n        );\n        test.done();\n    },\n\n    'expect (flatMap) to be rejected ': function(test) {\n        test.expect(1);\n        // tests here\n        test.equal(\n            C.char('a')\n                .flatMap(function() {\n                    return F.returns('b');\n                })\n                .parse(stream.ofString('b'))\n                .isAccepted(),\n            false,\n            'should be rejected.'\n        );\n        test.done();\n    },\n\n    'expect (flatMap) to be return ab': function(test) {\n        test.expect(1);\n        // tests here\n        test.equal(\n            C.char('a')\n                .flatMap(function() {\n                    return C.char('b');\n                })\n                .parse(stream.ofString('ab')).value,\n            'b',\n            'should be accepted.'\n        );\n        test.done();\n    },\n\n    'expect (flatMap) to be return a-b-c': function(test) {\n        test.expect(1);\n        // tests here\n        test.equal(\n            C.char('a')\n                .flatMap(aVal =>\n                    C.char('b')\n                        .then(C.char('c'))\n                        .map(bcVal => aVal + '-' + bcVal.join('-'))\n                ) //--> join 3 letters\n                .parse(stream.ofString('abc')).value,\n            'a-b-c',\n            'should be accepted.'\n        );\n        test.done();\n    },\n\n    'expect (filter) to be accepted': function(test) {\n        test.expect(1);\n        // tests here\n        test.equal(\n            C.char('a')\n                .filter(a => a === 'a')\n                .parse(stream.ofString('a'))\n                .isAccepted(),\n            true,\n            'should be accepted.'\n        );\n        test.done();\n    },\n\n    'expect (filter) to be rejected': function(test) {\n        test.expect(1);\n        // tests here\n        test.equal(\n            C.char('a')\n                .filter(a => a === 'b')\n                .parse(stream.ofString('a'))\n                .isAccepted(),\n            false,\n            'should be rejected.'\n        );\n        test.done();\n    },\n\n    'expect (match) to be accepted': function(test) {\n        test.expect(1);\n        // tests here\n        test.equal(\n            C.char('a').match('a').parse(stream.ofString('a')).isAccepted(),\n            true,\n            'should be accepted.'\n        );\n        test.done();\n    },\n\n    'expect (match) to be rejected': function(test) {\n        test.expect(1);\n        // tests here\n        test.equal(\n            C.char('a').match('b').parse(stream.ofString('a')).isAccepted(),\n            false,\n            'should be rejected.'\n        );\n        test.done();\n    },\n\n    'expect (then) to be accepted': function(test) {\n        test.expect(1);\n        // tests here\n        test.equal(\n            C.char('a')\n                .then(C.char('b'))\n                .parse(stream.ofString('ab'))\n                .isAccepted(),\n            true,\n            'should be accepted.'\n        );\n        test.done();\n    },\n\n    'expect (then) to be build [a,b]': function(test) {\n        test.expect(1);\n        // tests here\n        test.deepEqual(\n            C.char('a').then(C.char('b')).parse(stream.ofString('ab')).value,\n            ['a', 'b'],\n            'should be accepted.'\n        );\n        test.done();\n    },\n\n    'expect (then) left to be rejected': function(test) {\n        test.expect(1);\n        // tests here\n        test.equal(\n            C.char('a')\n                .then(C.char('b'))\n                .parse(stream.ofString('cb'))\n                .isAccepted(),\n            false,\n            'should be rejected.'\n        );\n        test.done();\n    },\n\n    'expect (then) right to be rejected': function(test) {\n        test.expect(1);\n        // tests here\n        test.equal(\n            C.char('a')\n                .then(C.char('b'))\n                .parse(stream.ofString('ac'))\n                .isAccepted(),\n            false,\n            'should be rejected.'\n        );\n        test.done();\n    },\n\n    'expect (then) to return [a,b]': function(test) {\n        test.expect(1);\n        // tests here\n        test.deepEqual(\n            C.char('a').then(C.char('b')).parse(stream.ofString('ab')).value,\n            ['a', 'b'],\n            'should be accepted.'\n        );\n        test.done();\n    },\n\n    'expect (thenLeft) to be accepted': function(test) {\n        test.expect(1);\n        // tests here\n        test.equal(\n            C.char('a')\n                .thenLeft(C.char('b'))\n                .parse(stream.ofString('ab'))\n                .isAccepted(),\n            true,\n            'should be accepted.'\n        );\n        test.done();\n    },\n\n    'expect (thenLeft) to return a': function(test) {\n        test.expect(1);\n        // tests here\n        test.deepEqual(\n            C.char('a').thenLeft(C.char('b')).parse(stream.ofString('ab'))\n                .value,\n            'a',\n            'should be accepted.'\n        );\n        test.done();\n    },\n\n    'expect (thenLeft) to be rejected': function(test) {\n        test.expect(1);\n        // tests here\n        test.equal(\n            C.char('a')\n                .thenLeft(C.char('b'))\n                .parse(stream.ofString('b'))\n                .isAccepted(),\n            false,\n            'should be accepted.'\n        );\n        test.done();\n    },\n\n    'expect (thenRight) to be accepted': function(test) {\n        test.expect(1);\n        // tests here\n        test.equal(\n            C.char('a')\n                .thenRight(C.char('b'))\n                .parse(stream.ofString('ab'))\n                .isAccepted(),\n            true,\n            'should be accepted.'\n        );\n        test.done();\n    },\n\n    'expect (thenRight) to return a': function(test) {\n        test.expect(1);\n        // tests here\n        test.deepEqual(\n            C.char('a').thenRight(C.char('b')).parse(stream.ofString('ab'))\n                .value,\n            'b',\n            'should be accepted.'\n        );\n        test.done();\n    },\n\n    'expect (thenRight) to be rejected': function(test) {\n        test.expect(1);\n        // tests here\n        test.equal(\n            C.char('a')\n                .thenRight(C.char('b'))\n                .parse(stream.ofString('b'))\n                .isAccepted(),\n            false,\n            'should be accepted.'\n        );\n        test.done();\n    },\n\n    'expect (thenReturns) to be accepted': function(test) {\n        test.expect(1);\n        // tests here\n        test.equal(\n            C.char('a')\n                .thenReturns('b')\n                .parse(stream.ofString('ab'))\n                .isAccepted(),\n            true,\n            'should be accepted.'\n        );\n        test.done();\n    },\n\n    'expect (thenReturns) to return b': function(test) {\n        test.expect(1);\n        // tests here\n        test.equal(\n            C.char('a').thenReturns('b').parse(stream.ofString('ab')).value,\n            'b',\n            'should be accepted.'\n        );\n        test.done();\n    },\n\n    'expect (thenReturns) to be rejected': function(test) {\n        test.expect(1);\n        // tests here\n        test.equal(\n            C.char('a')\n                .thenReturns('b')\n                .parse(stream.ofString('b'))\n                .isAccepted(),\n            false,\n            'should be rejected.'\n        );\n        test.done();\n    },\n\n    'expect (or) to be accepted': function(test) {\n        test.expect(1);\n        // tests here\n        test.equal(\n            C.char('a')\n                .or(C.char('b'))\n                .parse(stream.ofString('a'))\n                .isAccepted(),\n            true,\n            'should be accepted.'\n        );\n        test.done();\n    },\n\n    'expect (or) bis to be accepted': function(test) {\n        test.expect(1);\n        // tests here\n        test.equal(\n            C.char('a')\n                .or(C.char('b'))\n                .parse(stream.ofString('b'))\n                .isAccepted(),\n            true,\n            'should be accepted.'\n        );\n        test.done();\n    },\n\n    'expect (or) to be rejected': function(test) {\n        test.expect(1);\n        // tests here\n        test.equal(\n            C.char('a')\n                .or(C.char('b'))\n                .parse(stream.ofString('c'))\n                .isAccepted(),\n            false,\n            'should be rejected.'\n        );\n        test.done();\n    },\n\n    'expect (or) LL(1) to be rejected': function(test) {\n        test.expect(1);\n        // tests here\n        test.equal(\n            C.char('a')\n                .then(C.char('b'))\n                .or(C.char('a'))\n                .parse(stream.ofString('ac'))\n                .isAccepted(),\n            false,\n            'should be rejected.'\n        );\n        test.done();\n    },\n\n    'expect (or) to return a': function(test) {\n        test.expect(1);\n        // tests here\n        test.deepEqual(\n            C.char('a').or(C.char('b')).parse(stream.ofString('a')).value,\n            'a',\n            'should be accepted.'\n        );\n        test.done();\n    },\n\n    'expect (or) to return b': function(test) {\n        test.expect(1);\n        // tests here\n        test.deepEqual(\n            C.char('a').or(C.char('b')).parse(stream.ofString('b')).value,\n            'b',\n            'should be accepted.'\n        );\n        test.done();\n    },\n\n    'expect (then.or) left to be rejected': function(test) {\n        test.expect(1);\n        // tests here\n        test.equal(\n            C.char('a')\n                .then(C.char('b').or(C.char('c')))\n                .parse(stream.ofString('ad'))\n                .isAccepted(),\n            false,\n            'should be rejected.'\n        );\n        test.done();\n    },\n\n    'expect (then.or) left to be consumed': function(test) {\n        test.expect(1);\n        // tests here\n        test.equal(\n            C.char('a')\n                .then(C.char('b').or(C.char('c')))\n                .parse(stream.ofString('ad')).consumed,\n            true,\n            'should be consumed.'\n        );\n        test.done();\n    },\n\n    'expect (opt) some to accepted': function(test) {\n        test.expect(1);\n        // tests here\n        test.deepEqual(\n            C.char('a').opt().parse(stream.ofString('a')).isAccepted(),\n            true,\n            'should be accepted.'\n        );\n        test.done();\n    },\n\n    'expect (opt) some to return some a': function(test) {\n        test.expect(1);\n        // tests here\n        test.deepEqual(\n            C.char('a').opt().parse(stream.ofString('a')).value.get(),\n            'a',\n            'should be a.'\n        );\n        test.done();\n    },\n\n    'expect (opt) none to accepted': function(test) {\n        test.expect(1);\n        // tests here\n        test.deepEqual(\n            C.char('a').opt().parse(stream.ofString('b')).isAccepted(),\n            true,\n            'should be accepted.'\n        );\n        test.done();\n    },\n\n    'expect (opt) none to return none': function(test) {\n        test.expect(1);\n        // tests here\n        test.deepEqual(\n            C.char('a').opt().parse(stream.ofString('b')).value.isPresent(),\n            false,\n            'should be accepted but none.'\n        );\n        test.done();\n    },\n\n    'expect (opt) to come back if fail': function(test) {\n        test.expect(1);\n        // tests here\n        test.equals(\n            C.char('b')\n                .then(C.string('aaFAIL').opt().drop())\n                .then(C.string('aaab'))\n                .parse(stream.ofString('baaab'))\n                .value.join(''),\n            'baaab'\n        );\n        test.done();\n    },\n\n    'expect (rep) to accepted': function(test) {\n        test.expect(1);\n        // tests here\n        test.deepEqual(\n            C.char('a').rep().parse(stream.ofString('a')).isAccepted(),\n            true,\n            'should be accepted.'\n        );\n        test.done();\n    },\n\n    'expect (rep) to rejected': function(test) {\n        test.expect(1);\n        // tests here\n        test.deepEqual(\n            C.char('a').rep().parse(stream.ofString('b')).isAccepted(),\n            false,\n            'should be rejected.'\n        );\n        test.done();\n    },\n\n    'expect (rep) mutiple to accepted': function(test) {\n        test.expect(1);\n        // tests here\n        test.deepEqual(\n            C.char('a').rep().parse(stream.ofString('aaaabbb')).isAccepted(),\n            true,\n            'should be accepted.'\n        );\n        test.done();\n    },\n\n    'expect (rep) mutiple to return [a,a,a,a]': function(test) {\n        test.expect(1);\n        // tests here\n        test.deepEqual(\n            C.char('a').rep().parse(stream.ofString('aaaabbb')).value.array(),\n            ['a', 'a', 'a', 'a'],\n            'should be accepted.'\n        );\n        test.done();\n    },\n\n    'expect (optrep) to accepted': function(test) {\n        test.expect(1);\n        // tests here\n        test.deepEqual(\n            C.char('a').optrep().parse(stream.ofString('a')).isAccepted(),\n            true,\n            'should be accepted.'\n        );\n        test.done();\n    },\n\n    'expect (optrep) none to accepted': function(test) {\n        test.expect(1);\n        // tests here\n        test.deepEqual(\n            C.char('a').optrep().parse(stream.ofString('b')).isAccepted(),\n            true,\n            'should be accepted.'\n        );\n        test.done();\n    },\n\n    'expect (optrep) multiple to accepted': function(test) {\n        test.expect(1);\n        // tests here\n        test.deepEqual(\n            C.char('a').optrep().parse(stream.ofString('aaaabbb')).isAccepted(),\n            true,\n            'should be accepted.'\n        );\n        test.done();\n    },\n\n    'expect (optrep) multiple to return some [a,a,a,a]': function(test) {\n        test.expect(1);\n        // tests here\n        test.deepEqual(\n            C.char('a')\n                .optrep()\n                .parse(stream.ofString('aaaabbb'))\n                .value.array(),\n            ['a', 'a', 'a', 'a'],\n            'should be accepted.'\n        );\n        test.done();\n    },\n\n    'expect (optrep) to return none': function(test) {\n        test.expect(1);\n        // tests here\n        test.deepEqual(\n            C.char('a').optrep().parse(stream.ofString('bbb')).value.array(),\n            [],\n            'should be accepted.'\n        );\n        test.done();\n    },\n\n    'expect (optrep) to return [b,b,b]': function(test) {\n        test.expect(1);\n        // tests here\n        test.deepEqual(\n            C.notChar('a')\n                .optrep()\n                .parse(stream.ofString('bbba'))\n                .value.array(),\n            ['b', 'b', 'b'],\n            'should be accepted.'\n        );\n        test.done();\n    },\n};\n"]}