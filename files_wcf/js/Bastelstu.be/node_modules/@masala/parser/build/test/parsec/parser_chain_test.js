'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _index = require('../../lib/stream/index');

var _index2 = _interopRequireDefault(_index);

var _index3 = require('../../lib/parsec/index');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*
  ======== A Handy Little Nodeunit Reference ========
  https://github.com/caolan/nodeunit

  Test methods:
    test.expect(numAssertions)
    test.done()
  Test assertions:
    test.ok(value, [message])
    test.equal(actual, expected, [message])
    test.notEqual(actual, expected, [message])
    test.deepEqual(actual, expected, [message])
    test.notDeepEqual(actual, expected, [message])
    test.strictEqual(actual, expected, [message])
    test.notStrictEqual(actual, expected, [message])
    test.throws(block, [error], [message])
    test.doesNotThrow(block, [error], [message])
    test.ifError(value)
*/

exports.default = {
    setUp: function setUp(done) {
        done();
    },

    'expect (chain) to be accepted': function expectChainToBeAccepted(test) {
        test.expect(1);
        // tests here
        var p1 = _index3.N.numberLiteral.thenLeft(_index3.C.char(' ').opt()),
            p2 = _index3.F.any.then(_index3.F.any).thenLeft(_index3.F.eos).map(function (r) {
            return r[0] + r[1];
        });

        test.equal(p1.chain(p2).parse(_index2.default.ofString('12 34'), 0).isAccepted(), true, 'should be accepted.');
        test.done();
    },

    'expect (chain) to return 46': function expectChainToReturn46(test) {
        test.expect(1);
        // tests here
        var p1 = _index3.N.numberLiteral.thenLeft(_index3.C.char(' ').opt()),
            p2 = _index3.F.any.then(_index3.F.any).thenLeft(_index3.F.eos).map(function (r) {
            return r[0] + r[1];
        });

        test.equal(p1.chain(p2).parse(_index2.default.ofString('12 34'), 0).value, 46, 'should be 46.');
        test.done();
    }
};
//# sourceMappingURL=parser_chain_test.js.map