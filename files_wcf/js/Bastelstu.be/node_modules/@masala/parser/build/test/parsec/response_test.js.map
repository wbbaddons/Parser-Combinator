{"version":3,"sources":["../../../src/test/parsec/response_test.js"],"names":["setUp","done","test","expect","ok","accept","isAccepted","toTry","isSuccess","map","a","equal","value","flatMap","reject","t","fold","filter","myStream","ofString","isConsumed"],"mappings":"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","file":"response_test.js","sourcesContent":["import response from '../../lib/parsec/response';\nimport stream from '../../lib/stream/index';\n\n/*\n  ======== A Handy Little Nodeunit Reference ========\n  https://github.com/caolan/nodeunit\n\n  Test methods:\n    test.expect(numAssertions)\n    test.done()\n  Test assertions:\n    test.ok(value, [message])\n    test.equal(actual, expected, [message])\n    test.notEqual(actual, expected, [message])\n    test.deepEqual(actual, expected, [message])\n    test.notDeepEqual(actual, expected, [message])\n    test.strictEqual(actual, expected, [message])\n    test.notStrictEqual(actual, expected, [message])\n    test.throws(block, [error], [message])\n    test.doesNotThrow(block, [error], [message])\n    test.ifError(value)\n*/\n\nexport default {\n    setUp: function(done) {\n        done();\n    },\n\n    'response accepted': function(test) {\n        test.expect(1);\n        // tests here\n        test.ok(response.accept().isAccepted(), 'should be accepted.');\n        test.done();\n    },\n\n    'response as a success': function(test) {\n        test.expect(1);\n        // tests here\n        test.ok(response.accept().toTry().isSuccess(), 'should be success.');\n        test.done();\n    },\n\n    'response accepted map to accepted': function(test) {\n        test.expect(1);\n        // tests here\n        test.ok(\n            response\n                .accept()\n                .map(function(a) {\n                    return a;\n                })\n                .isAccepted(),\n            'should be accepted.'\n        );\n        test.done();\n    },\n\n    'response accepted map to return the value': function(test) {\n        test.expect(1);\n        // tests here\n        test.equal(\n            response.accept('a').map(function(a) {\n                return a;\n            }).value,\n            'a',\n            'should be accepted.'\n        );\n        test.done();\n    },\n\n    'response accepted flatMap to accepted': function(test) {\n        test.expect(1);\n        // tests here\n        test.ok(\n            response\n                .accept('a')\n                .flatMap(function(a) {\n                    return response.accept(a);\n                })\n                .isAccepted(),\n            'should be accepted.'\n        );\n        test.done();\n    },\n\n    'response accepted flatMap to return the value': function(test) {\n        test.expect(1);\n        // tests here\n        test.ok(\n            response\n                .accept('a')\n                .flatMap(function(a) {\n                    return response.accept(a);\n                })\n                .isAccepted(),\n            'a',\n            'should be accepted.'\n        );\n        test.done();\n    },\n\n    'response accepted flatMap to reject': function(test) {\n        test.expect(1);\n        // tests here\n        test.equal(\n            response\n                .accept()\n                .flatMap(function() {\n                    return response.reject();\n                })\n                .isAccepted(),\n            false,\n            'should be rejected.'\n        );\n        test.done();\n    },\n\n    'response rejected map to rejected': function(test) {\n        test.expect(1);\n        // tests here\n        test.equal(\n            response\n                .reject()\n                .map(function(t) {\n                    return t;\n                })\n                .isAccepted(),\n            false,\n            'should be rejected.'\n        );\n        test.done();\n    },\n\n    'response rejected flatMap to rejected': function(test) {\n        test.expect(1);\n        // tests here\n        test.equal(\n            response\n                .reject()\n                .flatMap(function() {\n                    return response.accept();\n                })\n                .isAccepted(),\n            false,\n            'should be rejected.'\n        );\n        test.done();\n    },\n\n    'response accepted fold': function(test) {\n        test.expect(1);\n        // tests here\n        test.equal(\n            response.accept('a').fold(function(a) {\n                return a.value;\n            }),\n            'a',\n            'should retrieve the value.'\n        );\n        test.done();\n    },\n\n    'response filter accepted': function(test) {\n        test.expect(1);\n        // tests here\n        test.ok(\n            response\n                .accept('a')\n                .filter(function(a) {\n                    return a === 'a';\n                })\n                .isAccepted(),\n            'should filter the response.'\n        );\n        test.done();\n    },\n\n    'response not filter accepted ': function(test) {\n        test.expect(1);\n        // tests here\n        test.equal(\n            response\n                .accept('a')\n                .filter(function(a) {\n                    return a !== 'a';\n                })\n                .isAccepted(),\n            false,\n            'should not filter the response.'\n        );\n        test.done();\n    },\n\n    'accept can be consumed': function(test) {\n        test.expect(1);\n        // tests here\n        const myStream = stream.ofString('abc');\n        test.equal(\n            response.accept('c', myStream, 3, false).isConsumed(),\n            true,\n            'should be consumed'\n        );\n        test.done();\n    },\n    'accept should not be yet consumed': function(test) {\n        test.expect(1);\n        // tests here\n        const myStream = stream.ofString('abc');\n        test.equal(\n            response.accept('b', myStream, 2, false).isConsumed(),\n            false,\n            'should be consumed'\n        );\n        test.done();\n    },\n\n    'response rejected': function(test) {\n        test.expect(1);\n        // tests here\n        test.equal(\n            response.reject().isAccepted(),\n            false,\n            'should be rejected.'\n        );\n        test.done();\n    },\n\n    'response rejected should not be consumed': function(test) {\n        test.expect(1);\n        // tests here\n        test.equal(\n            response.reject().isConsumed(),\n            false,\n            'should be not consumed.'\n        );\n        test.done();\n    },\n\n    'response as a failure': function(test) {\n        test.expect(1);\n        // tests here\n        test.equal(\n            response.reject().toTry().isSuccess(),\n            false,\n            'should be failure.'\n        );\n        test.done();\n    },\n\n    'response rejected fold': function(test) {\n        test.expect(1);\n        // tests here\n        test.equal(\n            response.reject().fold(\n                function(a) {\n                    return a.value;\n                },\n                function() {\n                    return 'b';\n                }\n            ),\n            'b',\n            'should generate the value.'\n        );\n        test.done();\n    },\n\n    'response filter rejected': function(test) {\n        test.expect(1);\n        // tests here\n        test.equal(\n            response\n                .reject()\n                .filter(function() {\n                    return true;\n                })\n                .isAccepted(),\n            false,\n            'should not filter the response.'\n        );\n        test.done();\n    },\n\n    'response not filter rejected': function(test) {\n        test.expect(1);\n        // tests here\n        test.equal(\n            response\n                .reject()\n                .filter(function() {\n                    return false;\n                })\n                .isAccepted(),\n            false,\n            'should not filter the response.'\n        );\n        test.done();\n    },\n};\n"]}