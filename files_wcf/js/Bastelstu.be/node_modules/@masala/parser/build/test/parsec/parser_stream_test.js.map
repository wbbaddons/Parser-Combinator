{"version":3,"sources":["../../../src/test/parsec/parser_stream_test.js"],"names":["setUp","done","test","expect","p","char","optrep","thenRight","numberLiteral","ok","ofParser","ofString","endOfStream","equal","get","isSuccess","success"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;;;AAEA;;;;;;;;;;;;;;;;;;;;kBAoBe;AACXA,WAAO,eAASC,IAAT,EAAe;AAClBA;AACH,KAHU;;AAKX,oCAAgC,mCAASC,IAAT,EAAe;AAC3CA,aAAKC,MAAL,CAAY,CAAZ;AACA;AACA,YAAIC,IAAI,sBAAEC,IAAF,CAAO,GAAP,EAAYC,MAAZ,GAAqBC,SAArB,CAA+B,wBAAEC,aAAjC,CAAR;AACAN,aAAKO,EAAL,CACI,gBAAOC,QAAP,CAAgBN,CAAhB,EAAmB,gBAAOO,QAAP,CAAgB,EAAhB,CAAnB,EAAwCC,WAAxC,CAAoD,CAApD,CADJ,EAEI,wBAFJ;AAIAV,aAAKD,IAAL;AACH,KAdU;;AAgBX,wCAAoC,sCAASC,IAAT,EAAe;AAC/CA,aAAKC,MAAL,CAAY,CAAZ;AACA;AACA,YAAIC,IAAI,sBAAEC,IAAF,CAAO,GAAP,EAAYC,MAAZ,GAAqBC,SAArB,CAA+B,wBAAEC,aAAjC,CAAR;AACAN,aAAKO,EAAL,CACI,gBAAOC,QAAP,CAAgBN,CAAhB,EAAmB,gBAAOO,QAAP,CAAgB,GAAhB,CAAnB,EAAyCC,WAAzC,CAAqD,CAArD,CADJ,EAEI,wBAFJ;AAIAV,aAAKD,IAAL;AACH,KAzBU;;AA2BX,2CAAuC,wCAASC,IAAT,EAAe;AAClDA,aAAKC,MAAL,CAAY,CAAZ;AACA;AACA,YAAIC,IAAI,sBAAEC,IAAF,CAAO,GAAP,EAAYC,MAAZ,GAAqBC,SAArB,CAA+B,wBAAEC,aAAjC,CAAR;AACAN,aAAKW,KAAL,CACI,gBAAOH,QAAP,CAAgBN,CAAhB,EAAmB,gBAAOO,QAAP,CAAgB,GAAhB,CAAnB,EAAyCC,WAAzC,CAAqD,CAArD,CADJ,EAEI,KAFJ,EAGI,wBAHJ;AAKAV,aAAKD,IAAL;AACH,KArCU;;AAuCX,uBAAmB,uBAASC,IAAT,EAAe;AAC9BA,aAAKC,MAAL,CAAY,CAAZ;AACA;AACA,YAAIC,IAAI,sBAAEC,IAAF,CAAO,GAAP,EAAYC,MAAZ,GAAqBC,SAArB,CAA+B,wBAAEC,aAAjC,CAAR;AACAN,aAAKW,KAAL,CACI,gBAAOH,QAAP,CAAgBN,CAAhB,EAAmB,gBAAOO,QAAP,CAAgB,GAAhB,CAAnB,EAAyCG,GAAzC,CAA6C,CAA7C,EAAgDC,SAAhD,EADJ,EAEI,IAFJ,EAGI,sBAHJ;AAKAb,aAAKD,IAAL;AACH,KAjDU;;AAmDX,oCAAgC,iCAASC,IAAT,EAAe;AAC3CA,aAAKC,MAAL,CAAY,CAAZ;AACA;AACA,YAAIC,IAAI,sBAAEC,IAAF,CAAO,GAAP,EAAYC,MAAZ,GAAqBC,SAArB,CAA+B,wBAAEC,aAAjC,CAAR;AACAN,aAAKW,KAAL,CACI,gBAAOH,QAAP,CAAgBN,CAAhB,EAAmB,gBAAOO,QAAP,CAAgB,GAAhB,CAAnB,EAAyCG,GAAzC,CAA6C,CAA7C,EAAgDC,SAAhD,EADJ,EAEI,KAFJ,EAGI,sBAHJ;AAKAb,aAAKD,IAAL;AACH,KA7DU;;AA+DX,yCAAqC,uCAASC,IAAT,EAAe;AAChDA,aAAKC,MAAL,CAAY,CAAZ;AACA;AACA,YAAIC,IAAI,sBAAEC,IAAF,CAAO,GAAP,EAAYC,MAAZ,GAAqBC,SAArB,CAA+B,wBAAEC,aAAjC,CAAR;AACAN,aAAKW,KAAL,CACI,gBAAOH,QAAP,CAAgBN,CAAhB,EAAmB,gBAAOO,QAAP,CAAgB,KAAhB,CAAnB,EAA2CG,GAA3C,CAA+C,CAA/C,EAAkDE,OAAlD,EADJ,EAEI,GAFJ,EAGI,kBAHJ;AAKAd,aAAKD,IAAL;AACH;AAzEU,C","file":"parser_stream_test.js","sourcesContent":["import stream from '../../lib/stream/index';\nimport C from '../../lib/parsec/chars-bundle';\nimport N from '../../lib/parsec/numbers-bundle';\n\n/*\n  ======== A Handy Little Nodeunit Reference ========\n  https://github.com/caolan/nodeunit\n\n  Test methods:\n    test.expect(numAssertions)\n    test.done()\n  Test assertions:\n    test.ok(value, [message])\n    test.equal(actual, expected, [message])\n    test.notEqual(actual, expected, [message])\n    test.deepEqual(actual, expected, [message])\n    test.notDeepEqual(actual, expected, [message])\n    test.strictEqual(actual, expected, [message])\n    test.notStrictEqual(actual, expected, [message])\n    test.throws(block, [error], [message])\n    test.doesNotThrow(block, [error], [message])\n    test.ifError(value)\n*/\n\nexport default {\n    setUp: function(done) {\n        done();\n    },\n\n    'endOfStream for empty stream': function(test) {\n        test.expect(1);\n        // tests here\n        var p = C.char(' ').optrep().thenRight(N.numberLiteral);\n        test.ok(\n            stream.ofParser(p, stream.ofString('')).endOfStream(0),\n            'should be endOfStream.'\n        );\n        test.done();\n    },\n\n    'endOfStream for non empty stream': function(test) {\n        test.expect(1);\n        // tests here\n        var p = C.char(' ').optrep().thenRight(N.numberLiteral);\n        test.ok(\n            stream.ofParser(p, stream.ofString('1')).endOfStream(1),\n            'should be endOfStream.'\n        );\n        test.done();\n    },\n\n    'no endOfStream for non empty stream': function(test) {\n        test.expect(1);\n        // tests here\n        var p = C.char(' ').optrep().thenRight(N.numberLiteral);\n        test.equal(\n            stream.ofParser(p, stream.ofString('1')).endOfStream(0),\n            false,\n            'should be endOfStream.'\n        );\n        test.done();\n    },\n\n    'get from stream': function(test) {\n        test.expect(1);\n        // tests here\n        var p = C.char(' ').optrep().thenRight(N.numberLiteral);\n        test.equal(\n            stream.ofParser(p, stream.ofString('1')).get(0).isSuccess(),\n            true,\n            'should be a success.'\n        );\n        test.done();\n    },\n\n    'do not get from empty stream': function(test) {\n        test.expect(1);\n        // tests here\n        var p = C.char(' ').optrep().thenRight(N.numberLiteral);\n        test.equal(\n            stream.ofParser(p, stream.ofString('1')).get(1).isSuccess(),\n            false,\n            'should be a failure.'\n        );\n        test.done();\n    },\n\n    'get from stream numberLiteral 123': function(test) {\n        test.expect(1);\n        // tests here\n        var p = C.char(' ').optrep().thenRight(N.numberLiteral);\n        test.equal(\n            stream.ofParser(p, stream.ofString('123')).get(0).success(),\n            123,\n            'should be a 123.'\n        );\n        test.done();\n    },\n};\n"]}