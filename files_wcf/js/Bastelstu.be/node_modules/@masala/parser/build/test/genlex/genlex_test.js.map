{"version":3,"sources":["../../../src/test/genlex/genlex_test.js"],"names":["setUp","done","test","expect","equal","generator","space","parse","ofString","isAccepted","spaces","offset","factory","s","keyword","value","ident","number","string","char","token","deepEqual","tokens"],"mappings":"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","file":"genlex_test.js","sourcesContent":["import stream from '../../lib/stream/index';\nimport genlex from '../../lib/genlex/genlex';\n\n/*\n  ======== A Handy Little Nodeunit Reference ========\n  https://github.com/caolan/nodeunit\n\n  Test methods:\n    test.expect(numAssertions)\n    test.done()\n  Test assertions:\n    test.ok(value, [message])\n    test.equal(actual, expected, [message])\n    test.notEqual(actual, expected, [message])\n    test.deepEqual(actual, expected, [message])\n    test.notDeepEqual(actual, expected, [message])\n    test.strictEqual(actual, expected, [message])\n    test.notStrictEqual(actual, expected, [message])\n    test.throws(block, [error], [message])\n    test.doesNotThrow(block, [error], [message])\n    test.ifError(value)\n*/\n\nexport default {\n    setUp: function(done) {\n        done();\n    },\n\n    'expect (space) to be accepted': function(test) {\n        test.expect(1);\n        // tests here\n        test.equal(\n            genlex\n                .generator()\n                .space()\n                .parse(stream.ofString(' '), 0)\n                .isAccepted(),\n            true,\n            'should be accepted.'\n        );\n        test.done();\n    },\n\n    'expect (meta space) to be accepted': function(test) {\n        test.expect(1);\n        // tests here\n        test.equal(\n            genlex\n                .generator()\n                .space()\n                .parse(stream.ofString('\\t'), 0)\n                .isAccepted(),\n            true,\n            'should be accepted.'\n        );\n        test.done();\n    },\n\n    'expect (spaces) to be accepted': function(test) {\n        test.expect(1);\n        // tests here\n        test.equal(\n            genlex\n                .generator()\n                .spaces()\n                .parse(stream.ofString(' \\n  '), 0)\n                .isAccepted(),\n            true,\n            'should be accepted.'\n        );\n        test.done();\n    },\n\n    'expect (spaces) to be skipped': function(test) {\n        test.expect(1);\n        // tests here\n        test.equal(\n            genlex.generator().spaces().parse(stream.ofString(' \\n '), 0)\n                .offset,\n            3,\n            'should be skipped.'\n        );\n        test.done();\n    },\n\n    'expect (keyword) to be accepted': function(test) {\n        test.expect(1);\n        // tests here\n        var factory = genlex.factory(\n            function(s) {\n                return s;\n            },\n            null,\n            null,\n            null,\n            null\n        );\n\n        test.equal(\n            genlex\n                .generator(['<-', '->'])\n                .keyword(factory)\n                .parse(stream.ofString('a->b'), 1)\n                .isAccepted(),\n            true,\n            'should be accepted.'\n        );\n        test.done();\n    },\n\n    'expect (keyword) to return ->': function(test) {\n        test.expect(1);\n        // tests here\n        var factory = genlex.factory(\n            function(s) {\n                return s;\n            },\n            null,\n            null,\n            null,\n            null\n        );\n\n        test.equal(\n            genlex\n                .generator(['<-', '->'])\n                .keyword(factory)\n                .parse(stream.ofString('a->b'), 1).value,\n            '->',\n            'should be accepted.'\n        );\n        test.done();\n    },\n\n    'expect (keyword) to be rejected': function(test) {\n        test.expect(1);\n        // tests here\n        var factory = genlex.factory(\n            function(s) {\n                return s;\n            },\n            null,\n            null,\n            null,\n            null\n        );\n\n        test.equal(\n            genlex\n                .generator([])\n                .keyword(factory)\n                .parse(stream.ofString('->'), 1)\n                .isAccepted(),\n            false,\n            'should be rejected.'\n        );\n        test.done();\n    },\n\n    'expect (ident) to be accepted': function(test) {\n        test.expect(1);\n        // tests here\n        var factory = genlex.factory(\n            null,\n            function(s) {\n                return s;\n            },\n            null,\n            null,\n            null\n        );\n\n        test.equal(\n            genlex\n                .generator([])\n                .ident(factory)\n                .parse(stream.ofString('smith '), 0)\n                .isAccepted(),\n            true,\n            'should be accepted.'\n        );\n        test.done();\n    },\n\n    'expect (ident) to return smith': function(test) {\n        test.expect(1);\n        // tests here\n        var factory = genlex.factory(\n            null,\n            function(s) {\n                return s;\n            },\n            null,\n            null,\n            null\n        );\n\n        test.equal(\n            genlex\n                .generator([])\n                .ident(factory)\n                .parse(stream.ofString('smith '), 0).value,\n            'smith',\n            'should be smith.'\n        );\n        test.done();\n    },\n\n    'expect (number) to be accepted': function(test) {\n        test.expect(1);\n        // tests here\n        var factory = genlex.factory(\n            null,\n            null,\n            function(s) {\n                return s;\n            },\n            null,\n            null\n        );\n\n        test.equal(\n            genlex\n                .generator([])\n                .number(factory)\n                .parse(stream.ofString('42'), 0)\n                .isAccepted(),\n            true,\n            'should be accepted.'\n        );\n        test.done();\n    },\n\n    'expect (number) to return 42': function(test) {\n        test.expect(1);\n        // tests here\n        var factory = genlex.factory(\n            null,\n            null,\n            function(s) {\n                return s;\n            },\n            null,\n            null\n        );\n\n        test.equal(\n            genlex.generator([]).number(factory).parse(stream.ofString('42'), 0)\n                .value,\n            42,\n            'should be 42.'\n        );\n        test.done();\n    },\n\n    'expect (string) to be accepted': function(test) {\n        test.expect(1);\n        // tests here\n        var factory = genlex.factory(\n            null,\n            null,\n            null,\n            function(s) {\n                return s;\n            },\n            null\n        );\n\n        test.equal(\n            genlex\n                .generator([])\n                .string(factory)\n                .parse(stream.ofString('\"smith\"'), 0)\n                .isAccepted(),\n            true,\n            'should be accepted.'\n        );\n        test.done();\n    },\n\n    'expect (string) to return smith': function(test) {\n        test.expect(1);\n        // tests here\n        var factory = genlex.factory(\n            null,\n            null,\n            null,\n            function(s) {\n                return s;\n            },\n            null\n        );\n\n        test.equal(\n            genlex\n                .generator([])\n                .string(factory)\n                .parse(stream.ofString('\"smith\"'), 0).value,\n            'smith',\n            'should be smith.'\n        );\n        test.done();\n    },\n\n    'expect (char) to be accepted': function(test) {\n        test.expect(1);\n        // tests here\n        var factory = genlex.factory(null, null, null, null, function(s) {\n            return s;\n        });\n\n        test.equal(\n            genlex\n                .generator([])\n                .char(factory)\n                .parse(stream.ofString(\"'s'\"), 0)\n                .isAccepted(),\n            true,\n            'should be accepted.'\n        );\n        test.done();\n    },\n\n    'expect (char) to return j': function(test) {\n        test.expect(1);\n        // tests here\n        var factory = genlex.factory(null, null, null, null, function(s) {\n            return s;\n        });\n\n        test.equal(\n            genlex.generator([]).char(factory).parse(stream.ofString(\"'s'\"), 0)\n                .value,\n            's',\n            'should be s.'\n        );\n        test.done();\n    },\n\n    'expect (token) to return keyword': function(test) {\n        test.expect(1);\n        // tests here\n        var factory = genlex.factory(\n            function(s) {\n                return s;\n            },\n            null,\n            null,\n            null,\n            null\n        );\n\n        test.equal(\n            genlex\n                .generator(['<-'])\n                .token(factory)\n                .parse(stream.ofString('a<-b'), 1).value,\n            '<-',\n            'should be <-.'\n        );\n        test.done();\n    },\n\n    'expect (token) to return ident': function(test) {\n        test.expect(1);\n        // tests here\n        var factory = genlex.factory(\n            null,\n            function(s) {\n                return s;\n            },\n            null,\n            null,\n            null\n        );\n\n        test.equal(\n            genlex\n                .generator(['<-'])\n                .token(factory)\n                .parse(stream.ofString('hello'), 0).value,\n            'hello',\n            'should be hello.'\n        );\n        test.done();\n    },\n\n    'expect (token) to return number': function(test) {\n        test.expect(1);\n        // tests here\n        var factory = genlex.factory(\n            null,\n            null,\n            function(s) {\n                return s;\n            },\n            null,\n            null\n        );\n\n        test.equal(\n            genlex\n                .generator(['<-'])\n                .token(factory)\n                .parse(stream.ofString('123'), 0).value,\n            123,\n            'should be 123.'\n        );\n        test.done();\n    },\n\n    'expect (token) to return string': function(test) {\n        test.expect(1);\n        // tests here\n        var factory = genlex.factory(\n            null,\n            null,\n            null,\n            function(s) {\n                return s;\n            },\n            null\n        );\n\n        test.equal(\n            genlex\n                .generator(['<-'])\n                .token(factory)\n                .parse(stream.ofString('\"123\"'), 0).value,\n            '123',\n            'should be 123.'\n        );\n        test.done();\n    },\n\n    'expect (token) to return char': function(test) {\n        test.expect(1);\n        // tests here\n        var factory = genlex.factory(null, null, null, null, function(s) {\n            return s;\n        });\n\n        test.equal(\n            genlex\n                .generator(['<-'])\n                .token(factory)\n                .parse(stream.ofString(\"'a'\"), 0).value,\n            'a',\n            'should be a.'\n        );\n        test.done();\n    },\n\n    'expect (tokens) to return [\"a\",\"->\",\"b\"]': function(test) {\n        test.expect(1);\n        // tests here\n        var factory = genlex.factory(\n            function(s) {\n                return s;\n            },\n            function(s) {\n                return s;\n            },\n            function(s) {\n                return s;\n            },\n            function(s) {\n                return s;\n            },\n            function(s) {\n                return s;\n            }\n        );\n\n        test.deepEqual(\n            genlex\n                .generator(['->'])\n                .tokens(factory)\n                .parse(stream.ofString('a -> b'), 0).value,\n            ['a', '->', 'b'],\n            'should be [a,->,b].'\n        );\n        test.done();\n    },\n};\n"]}