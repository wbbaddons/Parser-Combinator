{"version":3,"sources":["../../../src/test/parsec/parser_extensions_test.js"],"names":["setUp","done","test","expect","ok","returns","parse","ofString","isAccepted","equal","value","error","lazy","v","v1","v2","found","combinator","e","console","log","includes","eos","satisfy","offset","try","digit","numberLiteral","charLiteral","stringLiteral","any","occurrence","deepEqual","array","string","expected","parsing","sequence","char","charNotIn","rep","map","join","then","thenReturns","subStream","subString"],"mappings":";;;;;;AAAA;;;;AACA;;;;AAEA;;;;;;;;;;;;;;;;;;;;kBAoBe;AACXA,WAAO,eAASC,IAAT,EAAe;AAClBA;AACH,KAHU;;AAKX,uCAAmC,mCAASC,IAAT,EAAe;AAC9CA,aAAKC,MAAL,CAAY,CAAZ;AACA;AACAD,aAAKE,EAAL,CACI,UAAEC,OAAF,GAAYC,KAAZ,CAAkB,gBAAOC,QAAP,CAAgB,EAAhB,CAAlB,EAAuC,CAAvC,EAA0CC,UAA1C,EADJ,EAEI,qBAFJ;AAIAN,aAAKD,IAAL;AACH,KAbU;;AAeX,gDAA4C,0CAASC,IAAT,EAAe;AACvDA,aAAKC,MAAL,CAAY,CAAZ;AACA;AACAD,aAAKO,KAAL,CACI,UAAEJ,OAAF,CAAU,GAAV,EAAeC,KAAf,CAAqB,gBAAOC,QAAP,CAAgB,EAAhB,CAArB,EAA0C,CAA1C,EAA6CG,KADjD,EAEI,GAFJ,EAGI,qBAHJ;AAKAR,aAAKD,IAAL;AACH,KAxBU;;AA0BX,uCAAmC,mCAASC,IAAT,EAAe;AAC9CA,aAAKC,MAAL,CAAY,CAAZ;AACA;AACAD,aAAKO,KAAL,CACI,UAAEE,KAAF,CAAQL,KAAR,CAAc,gBAAOC,QAAP,CAAgB,EAAhB,CAAd,EAAmC,CAAnC,EAAsCC,UAAtC,EADJ,EAEI,KAFJ,EAGI,qBAHJ;AAKAN,aAAKD,IAAL;AACH,KAnCU;;AAqCX,oCAAgC,gCAASC,IAAT,EAAe;AAC3CA,aAAKC,MAAL,CAAY,CAAZ;AACA;AACAD,aAAKE,EAAL,CACI,UAAEQ,IAAF,CAAO,YAAW;AACd,mBAAO,UAAEP,OAAF,EAAP;AACH,SAFD,EAGKC,KAHL,CAGW,gBAAOC,QAAP,CAAgB,EAAhB,CAHX,EAGgC,CAHhC,EAIKC,UAJL,EADJ,EAMI,qBANJ;AAQAN,aAAKD,IAAL;AACH,KAjDU;;AAmDX,6CAAyC,uCAASC,IAAT,EAAe;AACpDA,aAAKC,MAAL,CAAY,CAAZ;AACA;AACAD,aAAKO,KAAL,CACI,UAAEG,IAAF,CAAO,YAAW;AACd,mBAAO,UAAEP,OAAF,CAAU,GAAV,CAAP;AACH,SAFD,EAEGC,KAFH,CAES,gBAAOC,QAAP,CAAgB,EAAhB,CAFT,EAE8B,CAF9B,EAEiCG,KAHrC,EAII,GAJJ,EAKI,qBALJ;AAOAR,aAAKD,IAAL;AACH,KA9DU;AA+DX,+DAA2D,sDAASC,IAAT,EAAe;AACtEA,aAAKC,MAAL,CAAY,CAAZ;AACA;AACAD,aAAKO,KAAL,CACI,UAAEG,IAAF,CAAO,YAAW;AACd,mBAAO,UAAEP,OAAF,CAAU,GAAV,CAAP;AACH,SAFD,EAEG,EAFH,EAEOC,KAFP,CAEa,gBAAOC,QAAP,CAAgB,EAAhB,CAFb,EAEkC,CAFlC,EAEqCG,KAHzC,EAII,GAJJ,EAKI,qBALJ;AAOAR,aAAKD,IAAL;AACH,KA1EU;;AA4EX,oCAAgC,gCAASC,IAAT,EAAe;AAC3CA,aAAKC,MAAL,CAAY,CAAZ;AACA;AACAD,aAAKO,KAAL,CACI,UAAEG,IAAF,CAAO,YAAW;AACd,mBAAO,UAAED,KAAT;AACH,SAFD,EAGKL,KAHL,CAGW,gBAAOC,QAAP,CAAgB,EAAhB,CAHX,EAGgC,CAHhC,EAIKC,UAJL,EADJ,EAMI,KANJ,EAOI,qBAPJ;AASAN,aAAKD,IAAL;AACH,KAzFU;;AA2FX,8DAA0D,qDAASC,IAAT,EAAe;AACrEA,aAAKC,MAAL,CAAY,CAAZ;AACA;AACAD,aAAKO,KAAL,CACI,UAAEG,IAAF,CACI,UAASC,CAAT,EAAY;AACR,mBAAO,UAAER,OAAF,CAAUQ,CAAV,CAAP;AACH,SAHL,EAII,CAAC,GAAD,CAJJ,EAKEP,KALF,CAKQ,gBAAOC,QAAP,CAAgB,EAAhB,CALR,EAK6B,CAL7B,EAKgCG,KANpC,EAOI,GAPJ,EAQI,qBARJ;AAUAR,aAAKD,IAAL;AACH,KAzGU;AA0GX,sEAAkE,6DAC9DC,IAD8D,EAEhE;AACEA,aAAKC,MAAL,CAAY,CAAZ;AACA;AACAD,aAAKO,KAAL,CACI,UAAEG,IAAF,CACI,UAASE,EAAT,EAAaC,EAAb,EAAiB;AACb,mBAAO,UAAEV,OAAF,CAAUS,KAAKC,EAAf,CAAP;AACH,SAHL,EAII,CAAC,EAAD,EAAK,EAAL,CAJJ,EAKET,KALF,CAKQ,gBAAOC,QAAP,CAAgB,EAAhB,CALR,EAK6B,CAL7B,EAKgCG,KANpC,EAOI,EAPJ,EAQI,qBARJ;AAUAR,aAAKD,IAAL;AACH,KA1HU;AA2HX,sDAAkD,gDAASC,IAAT,EAAe;AAC7DA,aAAKC,MAAL,CAAY,CAAZ;AACA;;AAEA,YAAIa,QAAQ,KAAZ;AACA,YAAI;AACA,gBAAMC,aAAa,UAAEL,IAAF,CAAO,UAACE,EAAD,EAAKC,EAAL;AAAA,uBAAY,UAAEV,OAAF,CAAUS,KAAKC,EAAf,CAAZ;AAAA,aAAP,EAAuC,EAAvC,EAA2C,EAA3C,CAAnB;AACAE,uBAAWX,KAAX,CAAiB,gBAAOC,QAAP,CAAgB,EAAhB,CAAjB,EAAsC,CAAtC;AACH,SAHD,CAGE,OAAOW,CAAP,EAAU;AACRC,oBAAQC,GAAR,CAAYF,CAAZ;AACA,gBAAIA,EAAEG,QAAF,CAAW,sBAAX,CAAJ,EAAwC;AACpCL,wBAAQ,IAAR;AACH;AACJ;AACDd,aAAKE,EAAL,CAAQY,KAAR,EAAe,4BAAf;AACAd,aAAKD,IAAL;AACH,KA3IU;;AA6IX,qCAAiC,iCAASC,IAAT,EAAe;AAC5CA,aAAKC,MAAL,CAAY,CAAZ;AACA;AACAD,aAAKO,KAAL,CACI,UAAEE,KAAF,CAAQL,KAAR,CAAc,gBAAOC,QAAP,CAAgB,EAAhB,CAAd,EAAmC,CAAnC,EAAsCC,UAAtC,EADJ,EAEI,KAFJ,EAGI,qBAHJ;AAKAN,aAAKD,IAAL;AACH,KAtJU;;AAwJX,mCAA+B,+BAASC,IAAT,EAAe;AAC1CA,aAAKC,MAAL,CAAY,CAAZ;AACA;AACAD,aAAKO,KAAL,CACI,UAAEa,GAAF,CAAMhB,KAAN,CAAY,gBAAOC,QAAP,CAAgB,EAAhB,CAAZ,EAAiC,CAAjC,EAAoCC,UAApC,EADJ,EAEI,IAFJ,EAGI,qBAHJ;AAKAN,aAAKD,IAAL;AACH,KAjKU;;AAmKX,mCAA+B,+BAASC,IAAT,EAAe;AAC1CA,aAAKC,MAAL,CAAY,CAAZ;AACA;AACAD,aAAKO,KAAL,CACI,UAAEa,GAAF,CAAMhB,KAAN,CAAY,gBAAOC,QAAP,CAAgB,GAAhB,CAAZ,EAAkC,CAAlC,EAAqCC,UAArC,EADJ,EAEI,KAFJ,EAGI,qBAHJ;AAKAN,aAAKD,IAAL;AACH,KA5KU;;AA8KX,uCAAmC,mCAASC,IAAT,EAAe;AAC9CA,aAAKC,MAAL,CAAY,CAAZ;AACA;AACAD,aAAKO,KAAL,CACI,UAAEc,OAAF,CAAU,UAASV,CAAT,EAAY;AAClB,mBAAOA,MAAM,GAAb;AACH,SAFD,EAGKP,KAHL,CAGW,gBAAOC,QAAP,CAAgB,GAAhB,CAHX,EAGiC,CAHjC,EAIKC,UAJL,EADJ,EAMI,IANJ,EAOI,qBAPJ;AASAN,aAAKD,IAAL;AACH,KA3LU;;AA6LX,qDAAiD,8CAASC,IAAT,EAAe;AAC5DA,aAAKC,MAAL,CAAY,CAAZ;AACA;AACAD,aAAKO,KAAL,CACI,UAAEc,OAAF,CAAU,UAASV,CAAT,EAAY;AAClB,mBAAOA,MAAM,GAAb;AACH,SAFD,EAEGP,KAFH,CAES,gBAAOC,QAAP,CAAgB,GAAhB,CAFT,EAE+B,CAF/B,EAEkCG,KAHtC,EAII,GAJJ,EAKI,4BALJ;AAOAR,aAAKD,IAAL;AACH,KAxMU;;AA0MX,sDAAkD,+CAASC,IAAT,EAAe;AAC7DA,aAAKC,MAAL,CAAY,CAAZ;AACA;AACAD,aAAKO,KAAL,CACI,UAAEc,OAAF,CAAU,UAASV,CAAT,EAAY;AAClB,mBAAOA,MAAM,GAAb;AACH,SAFD,EAEGP,KAFH,CAES,gBAAOC,QAAP,CAAgB,GAAhB,CAFT,EAE+B,CAF/B,EAEkCiB,MAHtC,EAII,CAJJ,EAKI,6BALJ;AAOAtB,aAAKD,IAAL;AACH,KArNU;;AAuNX,uCAAmC,mCAASC,IAAT,EAAe;AAC9CA,aAAKC,MAAL,CAAY,CAAZ;AACA;AACAD,aAAKO,KAAL,CACI,UAAEc,OAAF,CAAU,UAASV,CAAT,EAAY;AAClB,mBAAOA,MAAM,GAAb;AACH,SAFD,EAGKP,KAHL,CAGW,gBAAOC,QAAP,CAAgB,GAAhB,CAHX,EAGiC,CAHjC,EAIKC,UAJL,EADJ,EAMI,KANJ,EAOI,qBAPJ;AASAN,aAAKD,IAAL;AACH,KApOU;;AAsOX,6CAAyC,wCAASC,IAAT,EAAe;AACpDA,aAAKC,MAAL,CAAY,CAAZ;AACA;AACAD,aAAKO,KAAL,CACI,UAAEgB,GAAF,CACI,UAAEF,OAAF,CAAU,UAASV,CAAT,EAAY;AAClB,mBAAOA,MAAM,GAAb;AACH,SAFD,CADJ,EAKKP,KALL,CAKW,gBAAOC,QAAP,CAAgB,GAAhB,CALX,EAKiC,CALjC,EAMKC,UANL,EADJ,EAQI,IARJ,EASI,qBATJ;AAWAN,aAAKD,IAAL;AACH,KArPU;;AAuPX,6CAAyC,wCAASC,IAAT,EAAe;AACpDA,aAAKC,MAAL,CAAY,CAAZ;AACA;AACAD,aAAKO,KAAL,CACI,UAAEgB,GAAF,CACI,UAAEF,OAAF,CAAU,UAASV,CAAT,EAAY;AAClB,mBAAOA,MAAM,GAAb;AACH,SAFD,CADJ,EAKKP,KALL,CAKW,gBAAOC,QAAP,CAAgB,GAAhB,CALX,EAKiC,CALjC,EAMKC,UANL,EADJ,EAQI,KARJ,EASI,qBATJ;AAWAN,aAAKD,IAAL;AACH,KAtQU;;AAwQX,qCAAiC,iCAASC,IAAT,EAAe;AAC5CA,aAAKC,MAAL,CAAY,CAAZ;AACA;AACAD,aAAKO,KAAL,CACI,UAAEiB,KAAF,CAAQpB,KAAR,CAAc,gBAAOC,QAAP,CAAgB,GAAhB,CAAd,EAAoC,CAApC,EAAuCC,UAAvC,EADJ,EAEI,IAFJ,EAGI,qBAHJ;AAKAN,aAAKD,IAAL;AACH,KAjRU;;AAmRX,qCAAiC,iCAASC,IAAT,EAAe;AAC5CA,aAAKC,MAAL,CAAY,CAAZ;AACA;AACAD,aAAKO,KAAL,CACI,UAAEiB,KAAF,CAAQpB,KAAR,CAAc,gBAAOC,QAAP,CAAgB,GAAhB,CAAd,EAAoC,CAApC,EAAuCC,UAAvC,EADJ,EAEI,KAFJ,EAGI,qBAHJ;AAKAN,aAAKD,IAAL;AACH,KA5RU;;AA8RX,sCAAkC,kCAASC,IAAT,EAAe;AAC7CA,aAAKC,MAAL,CAAY,CAAZ;AACA;AACAD,aAAKO,KAAL,CACI,UAAEkB,aAAF,CAAgBrB,KAAhB,CAAsB,gBAAOC,QAAP,CAAgB,KAAhB,CAAtB,EAA8C,CAA9C,EAAiDC,UAAjD,EADJ,EAEI,IAFJ,EAGI,qBAHJ;AAKAN,aAAKD,IAAL;AACH,KAvSU;;AAySX,qCAAiC,iCAASC,IAAT,EAAe;AAC5CA,aAAKC,MAAL,CAAY,CAAZ;AACA;AACAD,aAAKO,KAAL,CACI,UAAEkB,aAAF,CAAgBrB,KAAhB,CAAsB,gBAAOC,QAAP,CAAgB,KAAhB,CAAtB,EAA8C,CAA9C,EAAiDG,KADrD,EAEI,GAFJ,EAGI,qBAHJ;AAKAR,aAAKD,IAAL;AACH,KAlTU;;AAoTX,+CAA2C,0CAASC,IAAT,EAAe;AACtDA,aAAKC,MAAL,CAAY,CAAZ;AACA;AACAD,aAAKO,KAAL,CACI,UAAEkB,aAAF,CAAgBrB,KAAhB,CAAsB,gBAAOC,QAAP,CAAgB,MAAhB,CAAtB,EAA+C,CAA/C,EAAkDC,UAAlD,EADJ,EAEI,IAFJ,EAGI,qBAHJ;AAKAN,aAAKD,IAAL;AACH,KA7TU;;AA+TX,+CAA2C,yCAASC,IAAT,EAAe;AACtDA,aAAKC,MAAL,CAAY,CAAZ;AACA;AACAD,aAAKO,KAAL,CACI,UAAEkB,aAAF,CAAgBrB,KAAhB,CAAsB,gBAAOC,QAAP,CAAgB,MAAhB,CAAtB,EAA+C,CAA/C,EAAkDG,KADtD,EAEI,CAAC,GAFL,EAGI,qBAHJ;AAKAR,aAAKD,IAAL;AACH,KAxUU;;AA0UX,4CAAwC,uCAASC,IAAT,EAAe;AACnDA,aAAKC,MAAL,CAAY,CAAZ;AACA;AACAD,aAAKO,KAAL,CACI,UAAEkB,aAAF,CACKrB,KADL,CACW,gBAAOC,QAAP,CAAgB,YAAhB,CADX,EAC0C,CAD1C,EAEKC,UAFL,EADJ,EAII,IAJJ,EAKI,qBALJ;AAOAN,aAAKD,IAAL;AACH,KArVU;;AAuVX,kDAA8C,2CAASC,IAAT,EAAe;AACzDA,aAAKC,MAAL,CAAY,CAAZ;AACA;AACAD,aAAKO,KAAL,CACI,UAAEkB,aAAF,CAAgBrB,KAAhB,CAAsB,gBAAOC,QAAP,CAAgB,YAAhB,CAAtB,EAAqD,CAArD,EAAwDG,KAD5D,EAEI,UAFJ,EAGI,qBAHJ;AAKAR,aAAKD,IAAL;AACH,KAhWU;;AAkWX,2CAAuC,uCAASC,IAAT,EAAe;AAClDA,aAAKC,MAAL,CAAY,CAAZ;AACA;AACAD,aAAKO,KAAL,CACI,UAAEmB,WAAF,CAActB,KAAd,CAAoB,gBAAOC,QAAP,CAAgB,KAAhB,CAApB,EAA4C,CAA5C,EAA+CC,UAA/C,EADJ,EAEI,IAFJ,EAGI,qBAHJ;AAKAN,aAAKD,IAAL;AACH,KA3WU;;AA6WX,wCAAoC,oCAASC,IAAT,EAAe;AAC/CA,aAAKC,MAAL,CAAY,CAAZ;AACA;AACAD,aAAKO,KAAL,CACI,UAAEmB,WAAF,CAActB,KAAd,CAAoB,gBAAOC,QAAP,CAAgB,KAAhB,CAApB,EAA4C,CAA5C,EAA+CG,KADnD,EAEI,GAFJ,EAGI,qBAHJ;AAKAR,aAAKD,IAAL;AACH,KAtXU;;AAwXX,iDAA6C,4CAASC,IAAT,EAAe;AACxDA,aAAKC,MAAL,CAAY,CAAZ;AACA;AACAD,aAAKO,KAAL,CACI,UAAEmB,WAAF,CAActB,KAAd,CAAoB,gBAAOC,QAAP,CAAgB,OAAhB,CAApB,EAA8C,CAA9C,EAAiDC,UAAjD,EADJ,EAEI,IAFJ,EAGI,qBAHJ;AAKAN,aAAKD,IAAL;AACH,KAjYU;;AAmYX,2CAAuC,uCAASC,IAAT,EAAe;AAClDA,aAAKC,MAAL,CAAY,CAAZ;AACA;AACAD,aAAKO,KAAL,CACI,UAAEmB,WAAF,CAActB,KAAd,CAAoB,gBAAOC,QAAP,CAAgB,IAAhB,CAApB,EAA2C,CAA3C,EAA8CC,UAA9C,EADJ,EAEI,KAFJ,EAGI,qBAHJ;AAKAN,aAAKD,IAAL;AACH,KA5YU;;AA8YX,6CAAyC,yCAASC,IAAT,EAAe;AACpDA,aAAKC,MAAL,CAAY,CAAZ;AACA;AACAD,aAAKO,KAAL,CACI,UAAEoB,aAAF,CAAgBvB,KAAhB,CAAsB,gBAAOC,QAAP,CAAgB,KAAhB,CAAtB,EAA8C,CAA9C,EAAiDC,UAAjD,EADJ,EAEI,IAFJ,EAGI,qBAHJ;AAKAN,aAAKD,IAAL;AACH,KAvZU;;AAyZX,4CAAwC,wCAASC,IAAT,EAAe;AACnDA,aAAKC,MAAL,CAAY,CAAZ;AACA;AACAD,aAAKO,KAAL,CACI,UAAEoB,aAAF,CAAgBvB,KAAhB,CAAsB,gBAAOC,QAAP,CAAgB,OAAhB,CAAtB,EAAgD,CAAhD,EAAmDG,KADvD,EAEI,KAFJ,EAGI,qBAHJ;AAKAR,aAAKD,IAAL;AACH,KAlaU;;AAoaX,mDAA+C,8CAASC,IAAT,EAAe;AAC1DA,aAAKC,MAAL,CAAY,CAAZ;AACA;AACAD,aAAKO,KAAL,CACI,UAAEoB,aAAF,CAAgBvB,KAAhB,CAAsB,gBAAOC,QAAP,CAAgB,IAAhB,CAAtB,EAA6C,CAA7C,EAAgDC,UAAhD,EADJ,EAEI,IAFJ,EAGI,qBAHJ;AAKAN,aAAKD,IAAL;AACH,KA7aU;;AA+aX,2CAAuC,sCAASC,IAAT,EAAe;AAClDA,aAAKC,MAAL,CAAY,CAAZ;AACA;AACAD,aAAKO,KAAL,CACI,UAAEqB,GAAF,CAAMC,UAAN,CAAiB,CAAjB,EAAoBzB,KAApB,CAA0B,gBAAOC,QAAP,CAAgB,GAAhB,CAA1B,EAAgD,CAAhD,EAAmDC,UAAnD,EADJ,EAEI,IAFJ,EAGI,qBAHJ;AAKAN,aAAKD,IAAL;AACH,KAxbU;;AA0bX,0CAAsC,mCAASC,IAAT,EAAe;AACjDA,aAAKC,MAAL,CAAY,CAAZ;AACA;AACAD,aAAK8B,SAAL,CACI,UAAEF,GAAF,CAAMC,UAAN,CAAiB,CAAjB,EAAoBzB,KAApB,CAA0B,gBAAOC,QAAP,CAAgB,GAAhB,CAA1B,EAAgD,CAAhD,EAAmDG,KAAnD,CAAyDuB,KAAzD,EADJ,EAEI,CAAC,GAAD,CAFJ,EAGI,qBAHJ;AAKA/B,aAAKD,IAAL;AACH,KAncU;;AAqcX,2CAAuC,sCAASC,IAAT,EAAe;AAClDA,aAAKC,MAAL,CAAY,CAAZ;AACA;AACAD,aAAKO,KAAL,CACI,UAAEqB,GAAF,CAAMC,UAAN,CAAiB,CAAjB,EAAoBzB,KAApB,CAA0B,gBAAOC,QAAP,CAAgB,IAAhB,CAA1B,EAAiD,CAAjD,EAAoDC,UAApD,EADJ,EAEI,IAFJ,EAGI,qBAHJ;AAKAN,aAAKD,IAAL;AACH,KA9cU;;AAgdX,4CAAwC,oCAASC,IAAT,EAAe;AACnDA,aAAKC,MAAL,CAAY,CAAZ;AACA;AACAD,aAAK8B,SAAL,CACI,UAAEF,GAAF,CAAMC,UAAN,CAAiB,CAAjB,EAAoBzB,KAApB,CAA0B,gBAAOC,QAAP,CAAgB,IAAhB,CAA1B,EAAiD,CAAjD,EAAoDG,KAApD,CAA0DuB,KAA1D,EADJ,EAEI,CAAC,GAAD,EAAM,GAAN,CAFJ,EAGI,qBAHJ;AAKA/B,aAAKD,IAAL;AACH,KAzdU;;AA2dX,8CAA0C,qCAASC,IAAT,EAAe;AACrDA,aAAKC,MAAL,CAAY,CAAZ;AACA;AACAD,aAAK8B,SAAL,CACI,UAAEF,GAAF,CAAMC,UAAN,CAAiB,CAAjB,EAAoBzB,KAApB,CAA0B,gBAAOC,QAAP,CAAgB,KAAhB,CAA1B,EAAkD,CAAlD,EAAqDG,KAArD,CAA2DuB,KAA3D,EADJ,EAEI,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAFJ,EAGI,qBAHJ;AAKA/B,aAAKD,IAAL;AACH,KApeU;;AAseX,2CAAuC,sCAASC,IAAT,EAAe;AAClDA,aAAKC,MAAL,CAAY,CAAZ;AACA;AACAD,aAAKO,KAAL,CACI,UAAEqB,GAAF,CAAMC,UAAN,CAAiB,CAAjB,EAAoBzB,KAApB,CAA0B,gBAAOC,QAAP,CAAgB,IAAhB,CAA1B,EAAiD,CAAjD,EAAoDC,UAApD,EADJ,EAEI,IAFJ,EAGI,qBAHJ;AAKAN,aAAKD,IAAL;AACH,KA/eU;;AAifX,yCAAqC,kCAASC,IAAT,EAAe;AAChDA,aAAKC,MAAL,CAAY,CAAZ;AACA;AACAD,aAAK8B,SAAL,CACI,UAAEF,GAAF,CAAMC,UAAN,CAAiB,CAAjB,EAAoBzB,KAApB,CAA0B,gBAAOC,QAAP,CAAgB,IAAhB,CAA1B,EAAiD,CAAjD,EAAoDG,KAApD,CAA0DuB,KAA1D,EADJ,EAEI,EAFJ,EAGI,qBAHJ;AAKA/B,aAAKD,IAAL;AACH,KA1fU;;AA4fX,sEAAkE,wCAC9DC,IAD8D,EAEhE;AACEA,aAAKC,MAAL,CAAY,CAAZ;AACA;AACA,YAAM+B,SAAS,SAAf;AACA,YAAMC,WAAW,CAAC,GAAD,EAAM,OAAN,EAAe,GAAf,CAAjB;;AAEA,YAAMC,UAAU,UAAEC,QAAF,CACZ,UAAEC,IAAF,CAAO,GAAP,CADY,EAEZ,UAAEC,SAAF,CAAY,GAAZ,EAAiBC,GAAjB,GAAuBC,GAAvB,CAA2B;AAAA,mBAAK5B,EAAE6B,IAAF,CAAO,EAAP,CAAL;AAAA,SAA3B,CAFY,EAGZ,UAAEJ,IAAF,CAAO,GAAP,CAHY,EAIdhC,KAJc,CAIR,gBAAOC,QAAP,CAAgB2B,MAAhB,CAJQ,EAIiB,CAJjB,CAAhB;;AAMAhC,aAAK8B,SAAL,CAAeI,QAAQ1B,KAAvB,EAA8ByB,QAA9B,EAAwC,iBAAxC;AACAjC,aAAKD,IAAL;AACH,KA5gBU;AA6gBX,mDAA+C,oCAASC,IAAT,EAAe;AAC1DA,aAAKC,MAAL,CAAY,CAAZ;AACA;AACA,YAAM+B,SAAS,KAAf;AACA,YAAMC,WAAW,CAAC,CAAD,EAAI,GAAJ,EAAS,CAAT,CAAjB;;AAEA,YAAMC,UAAU,UAAEC,QAAF,CACZ,UAAEV,aADU,EAEZ,UAAEW,IAAF,CAAO,GAAP,CAFY,EAGZ,UAAEX,aAHU,EAIdrB,KAJc,CAIR,gBAAOC,QAAP,CAAgB2B,MAAhB,CAJQ,EAIiB,CAJjB,CAAhB;;AAMAhC,aAAK8B,SAAL,CAAeI,QAAQ1B,KAAvB,EAA8ByB,QAA9B,EAAwC,iBAAxC;AACAjC,aAAKD,IAAL;AACH,KA3hBU;;AA6hBX,sDAAkD,uCAASC,IAAT,EAAe;AAC7D;AACAA,aAAKC,MAAL,CAAY,CAAZ;AACA;AACA,YAAM+B,SAAS,KAAf;AACA,YAAMC,WAAW,CAAC,CAAD,EAAI,GAAJ,EAAS,CAAT,CAAjB;;AAEA,YAAMC,UAAU,UAAET,aAAF,CACXgB,IADW,CACN,UAAEL,IAAF,CAAO,GAAP,CADM,EAEXK,IAFW,CAEN,UAAEhB,aAFI,EAGXrB,KAHW,CAGL,gBAAOC,QAAP,CAAgB2B,MAAhB,CAHK,EAGoB,CAHpB,CAAhB;;AAKAhC,aAAK8B,SAAL,CAAeI,QAAQ1B,KAAvB,EAA8ByB,QAA9B,EAAwC,iBAAxC;AACAjC,aAAKD,IAAL;AACH,KA3iBU;;AA6iBX,8CAA0C,qCAASC,IAAT,EAAe;AACrD;AACAA,aAAKC,MAAL,CAAY,CAAZ;AACA;AACA,YAAM+B,SAAS,KAAf;AACA,YAAMC,WAAW,EAAjB;;AAEA,YAAMC,UAAU,UAAET,aAAF,CACXgB,IADW,CACN,UAAEL,IAAF,CAAO,GAAP,CADM,EAEXK,IAFW,CAEN,UAAEhB,aAFI,EAGXiB,WAHW,CAGC,EAHD,EAIXtC,KAJW,CAIL,gBAAOC,QAAP,CAAgB2B,MAAhB,CAJK,EAIoB,CAJpB,CAAhB;;AAMAhC,aAAK8B,SAAL,CAAeI,QAAQ1B,KAAvB,EAA8ByB,QAA9B,EAAwC,iBAAxC;AACAjC,aAAKD,IAAL;AACH,KA5jBU;;AA8jBX,+CAA2C,sCAASC,IAAT,EAAe;AACtDA,aAAKC,MAAL,CAAY,CAAZ;AACA;AACA,YAAM+B,SAAS,OAAf;AACA,YAAMC,WAAW,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,CAAjB;;AAEA,YAAMC,UAAU,UAAES,SAAF,CAAY,CAAZ,EAAevC,KAAf,CAAqB,gBAAOC,QAAP,CAAgB2B,MAAhB,CAArB,EAA8C,CAA9C,CAAhB;;AAEAhC,aAAK8B,SAAL,CAAeI,QAAQ1B,KAAR,CAAcuB,KAAd,EAAf,EAAsCE,QAAtC,EAAgD,iBAAhD;AACAjC,aAAKD,IAAL;AACH,KAxkBU;;AA0kBX,0CAAsC,sCAASC,IAAT,EAAe;AACjDA,aAAKC,MAAL,CAAY,CAAZ;AACA;AACA,YAAM+B,SAAS,OAAf;AACA,YAAMC,WAAW,MAAjB;;AAEA,YAAMC,UAAU,UAAEU,SAAF,CAAY,CAAZ,EAAexC,KAAf,CAAqB,gBAAOC,QAAP,CAAgB2B,MAAhB,CAArB,EAA8C,CAA9C,CAAhB;;AAEAhC,aAAK8B,SAAL,CAAeI,QAAQ1B,KAAvB,EAA8ByB,QAA9B,EAAwC,iBAAxC;AACAjC,aAAKD,IAAL;AACH;AAplBU,C","file":"parser_extensions_test.js","sourcesContent":["import stream from '../../lib/stream/index';\nimport {F, C, N} from '../../lib/parsec/index';\n\n/*\n ======== A Handy Little Nodeunit Reference ========\n https://github.com/caolan/nodeunit\n\n Test methods:\n test.expect(numAssertions)\n test.done()\n Test assertions:\n test.ok(value, [message])\n test.equal(actual, expected, [message])\n test.notEqual(actual, expected, [message])\n test.deepEqual(actual, expected, [message])\n test.notDeepEqual(actual, expected, [message])\n test.strictEqual(actual, expected, [message])\n test.notStrictEqual(actual, expected, [message])\n test.throws(block, [error], [message])\n test.doesNotThrow(block, [error], [message])\n test.ifError(value)\n */\n\nexport default {\n    setUp: function(done) {\n        done();\n    },\n\n    'expect (returns) to be accepted': function(test) {\n        test.expect(1);\n        // tests here\n        test.ok(\n            F.returns().parse(stream.ofString(''), 0).isAccepted(),\n            'should be accepted.'\n        );\n        test.done();\n    },\n\n    'expect (returns) to return a given value': function(test) {\n        test.expect(1);\n        // tests here\n        test.equal(\n            F.returns(123).parse(stream.ofString(''), 0).value,\n            123,\n            'should be accepted.'\n        );\n        test.done();\n    },\n\n    'expect (returns) to be rejected': function(test) {\n        test.expect(1);\n        // tests here\n        test.equal(\n            F.error.parse(stream.ofString(''), 0).isAccepted(),\n            false,\n            'should be accepted.'\n        );\n        test.done();\n    },\n\n    'expect (lazy) to be accepted': function(test) {\n        test.expect(1);\n        // tests here\n        test.ok(\n            F.lazy(function() {\n                return F.returns();\n            })\n                .parse(stream.ofString(''), 0)\n                .isAccepted(),\n            'should be accepted.'\n        );\n        test.done();\n    },\n\n    'expect (lazy) to return a given value': function(test) {\n        test.expect(1);\n        // tests here\n        test.equal(\n            F.lazy(function() {\n                return F.returns(123);\n            }).parse(stream.ofString(''), 0).value,\n            123,\n            'should be accepted.'\n        );\n        test.done();\n    },\n    'expect (lazy with empty params) to return a given value': function(test) {\n        test.expect(1);\n        // tests here\n        test.equal(\n            F.lazy(function() {\n                return F.returns(123);\n            }, []).parse(stream.ofString(''), 0).value,\n            123,\n            'should be accepted.'\n        );\n        test.done();\n    },\n\n    'expect (lazy) to be rejected': function(test) {\n        test.expect(1);\n        // tests here\n        test.equal(\n            F.lazy(function() {\n                return F.error;\n            })\n                .parse(stream.ofString(''), 0)\n                .isAccepted(),\n            false,\n            'should be accepted.'\n        );\n        test.done();\n    },\n\n    'expect (lazy) with a parameter to return a given value': function(test) {\n        test.expect(1);\n        // tests here\n        test.equal(\n            F.lazy(\n                function(v) {\n                    return F.returns(v);\n                },\n                [123]\n            ).parse(stream.ofString(''), 0).value,\n            123,\n            'should be accepted.'\n        );\n        test.done();\n    },\n    'expect (lazy) with multiple parameters to return a given value': function(\n        test\n    ) {\n        test.expect(1);\n        // tests here\n        test.equal(\n            F.lazy(\n                function(v1, v2) {\n                    return F.returns(v1 + v2);\n                },\n                [10, 20]\n            ).parse(stream.ofString(''), 0).value,\n            30,\n            'should be accepted.'\n        );\n        test.done();\n    },\n    'expect (lazy) with unpacked parameters to fail': function(test) {\n        test.expect(1);\n        // tests here\n\n        let found = false;\n        try {\n            const combinator = F.lazy((v1, v2) => F.returns(v1 + v2), 10, 20);\n            combinator.parse(stream.ofString(''), 0);\n        } catch (e) {\n            console.log(e);\n            if (e.includes('packed into an array')) {\n                found = true;\n            }\n        }\n        test.ok(found, 'should have catch an error');\n        test.done();\n    },\n\n    'expect (error) to be rejected': function(test) {\n        test.expect(1);\n        // tests here\n        test.equal(\n            F.error.parse(stream.ofString(''), 0).isAccepted(),\n            false,\n            'should be rejected.'\n        );\n        test.done();\n    },\n\n    'expect (eos) to be accepted': function(test) {\n        test.expect(1);\n        // tests here\n        test.equal(\n            F.eos.parse(stream.ofString(''), 0).isAccepted(),\n            true,\n            'should be accepted.'\n        );\n        test.done();\n    },\n\n    'expect (eos) to be rejected': function(test) {\n        test.expect(1);\n        // tests here\n        test.equal(\n            F.eos.parse(stream.ofString('a'), 0).isAccepted(),\n            false,\n            'should be rejected.'\n        );\n        test.done();\n    },\n\n    'expect (satisfy) to be accepted': function(test) {\n        test.expect(1);\n        // tests here\n        test.equal(\n            F.satisfy(function(v) {\n                return v === 'a';\n            })\n                .parse(stream.ofString('a'), 0)\n                .isAccepted(),\n            true,\n            'should be accepted.'\n        );\n        test.done();\n    },\n\n    'expect (satisfy) to be return the right value': function(test) {\n        test.expect(1);\n        // tests here\n        test.equal(\n            F.satisfy(function(v) {\n                return v === 'a';\n            }).parse(stream.ofString('a'), 0).value,\n            'a',\n            'should be the right value.'\n        );\n        test.done();\n    },\n\n    'expect (satisfy) to be return the right offset': function(test) {\n        test.expect(1);\n        // tests here\n        test.equal(\n            F.satisfy(function(v) {\n                return v === 'a';\n            }).parse(stream.ofString('a'), 0).offset,\n            1,\n            'should be the right offset.'\n        );\n        test.done();\n    },\n\n    'expect (satisfy) to be rejected': function(test) {\n        test.expect(1);\n        // tests here\n        test.equal(\n            F.satisfy(function(v) {\n                return v === 'b';\n            })\n                .parse(stream.ofString('a'), 0)\n                .isAccepted(),\n            false,\n            'should be rejected.'\n        );\n        test.done();\n    },\n\n    'expect (doTry satisfy) to be accepted': function(test) {\n        test.expect(1);\n        // tests here\n        test.equal(\n            F.try(\n                F.satisfy(function(v) {\n                    return v === 'a';\n                })\n            )\n                .parse(stream.ofString('a'), 0)\n                .isAccepted(),\n            true,\n            'should be accepted.'\n        );\n        test.done();\n    },\n\n    'expect (doTry satisfy) to be rejected': function(test) {\n        test.expect(1);\n        // tests here\n        test.equal(\n            F.try(\n                F.satisfy(function(v) {\n                    return v === 'b';\n                })\n            )\n                .parse(stream.ofString('a'), 0)\n                .isAccepted(),\n            false,\n            'should be rejected.'\n        );\n        test.done();\n    },\n\n    'expect (digit) to be accepted': function(test) {\n        test.expect(1);\n        // tests here\n        test.equal(\n            N.digit.parse(stream.ofString('1'), 0).isAccepted(),\n            true,\n            'should be accepted.'\n        );\n        test.done();\n    },\n\n    'expect (digit) to be rejected': function(test) {\n        test.expect(1);\n        // tests here\n        test.equal(\n            N.digit.parse(stream.ofString('a'), 0).isAccepted(),\n            false,\n            'should be rejected.'\n        );\n        test.done();\n    },\n\n    'expect (number) to be accepted': function(test) {\n        test.expect(1);\n        // tests here\n        test.equal(\n            N.numberLiteral.parse(stream.ofString('123'), 0).isAccepted(),\n            true,\n            'should be accepted.'\n        );\n        test.done();\n    },\n\n    'expect (number) to return 123': function(test) {\n        test.expect(1);\n        // tests here\n        test.equal(\n            N.numberLiteral.parse(stream.ofString('123'), 0).value,\n            123,\n            'should be accepted.'\n        );\n        test.done();\n    },\n\n    'expect negative (number) to be accepted': function(test) {\n        test.expect(1);\n        // tests here\n        test.equal(\n            N.numberLiteral.parse(stream.ofString('-123'), 0).isAccepted(),\n            true,\n            'should be accepted.'\n        );\n        test.done();\n    },\n\n    'expect negative (number) to return -123': function(test) {\n        test.expect(1);\n        // tests here\n        test.equal(\n            N.numberLiteral.parse(stream.ofString('-123'), 0).value,\n            -123,\n            'should be accepted.'\n        );\n        test.done();\n    },\n\n    'expect float (number) to be accepted': function(test) {\n        test.expect(1);\n        // tests here\n        test.equal(\n            N.numberLiteral\n                .parse(stream.ofString('123.34e-34'), 0)\n                .isAccepted(),\n            true,\n            'should be accepted.'\n        );\n        test.done();\n    },\n\n    'expect float (number) to return 123.34e-34': function(test) {\n        test.expect(1);\n        // tests here\n        test.equal(\n            N.numberLiteral.parse(stream.ofString('123.34e-34'), 0).value,\n            123.34e-34,\n            'should be accepted.'\n        );\n        test.done();\n    },\n\n    'expect (charLiteral) to be accepted': function(test) {\n        test.expect(1);\n        // tests here\n        test.equal(\n            C.charLiteral.parse(stream.ofString(\"'a'\"), 0).isAccepted(),\n            true,\n            'should be accepted.'\n        );\n        test.done();\n    },\n\n    'expect (charLiteral) to return a': function(test) {\n        test.expect(1);\n        // tests here\n        test.equal(\n            C.charLiteral.parse(stream.ofString(\"'a'\"), 0).value,\n            'a',\n            'should be accepted.'\n        );\n        test.done();\n    },\n\n    'expect (charLiteral) quote to be accepted': function(test) {\n        test.expect(1);\n        // tests here\n        test.equal(\n            C.charLiteral.parse(stream.ofString(\"'\\\\''\"), 0).isAccepted(),\n            true,\n            'should be accepted.'\n        );\n        test.done();\n    },\n\n    'expect (charLiteral) to be rejected': function(test) {\n        test.expect(1);\n        // tests here\n        test.equal(\n            C.charLiteral.parse(stream.ofString(\"''\"), 0).isAccepted(),\n            false,\n            'should be rejected.'\n        );\n        test.done();\n    },\n\n    'expect (stringLiteral) to be accepted': function(test) {\n        test.expect(1);\n        // tests here\n        test.equal(\n            C.stringLiteral.parse(stream.ofString('\"a\"'), 0).isAccepted(),\n            true,\n            'should be accepted.'\n        );\n        test.done();\n    },\n\n    'expect (stringLiteral) to return abc': function(test) {\n        test.expect(1);\n        // tests here\n        test.equal(\n            C.stringLiteral.parse(stream.ofString('\"abc\"'), 0).value,\n            'abc',\n            'should be accepted.'\n        );\n        test.done();\n    },\n\n    'expect (stringLiteral) empty to be accepted': function(test) {\n        test.expect(1);\n        // tests here\n        test.equal(\n            C.stringLiteral.parse(stream.ofString('\"\"'), 0).isAccepted(),\n            true,\n            'should be accepted.'\n        );\n        test.done();\n    },\n\n    'expect (occurence 1) to be accepted': function(test) {\n        test.expect(1);\n        // tests here\n        test.equal(\n            F.any.occurrence(1).parse(stream.ofString('a'), 0).isAccepted(),\n            true,\n            'should be accepted.'\n        );\n        test.done();\n    },\n\n    'expect (occurence 1) to return [a]': function(test) {\n        test.expect(1);\n        // tests here\n        test.deepEqual(\n            F.any.occurrence(1).parse(stream.ofString('a'), 0).value.array(),\n            ['a'],\n            'should be accepted.'\n        );\n        test.done();\n    },\n\n    'expect (occurence 2) to be accepted': function(test) {\n        test.expect(1);\n        // tests here\n        test.equal(\n            F.any.occurrence(1).parse(stream.ofString('aa'), 0).isAccepted(),\n            true,\n            'should be accepted.'\n        );\n        test.done();\n    },\n\n    'expect (occurence 2) to return [a,a]': function(test) {\n        test.expect(1);\n        // tests here\n        test.deepEqual(\n            F.any.occurrence(2).parse(stream.ofString('aa'), 0).value.array(),\n            ['a', 'a'],\n            'should be accepted.'\n        );\n        test.done();\n    },\n\n    'expect (occurence 3) to return [a,a,a]': function(test) {\n        test.expect(1);\n        // tests here\n        test.deepEqual(\n            F.any.occurrence(3).parse(stream.ofString('aaa'), 0).value.array(),\n            ['a', 'a', 'a'],\n            'should be accepted.'\n        );\n        test.done();\n    },\n\n    'expect (occurence 0) to be accepted': function(test) {\n        test.expect(1);\n        // tests here\n        test.equal(\n            F.any.occurrence(0).parse(stream.ofString('aa'), 0).isAccepted(),\n            true,\n            'should be accepter.'\n        );\n        test.done();\n    },\n\n    'expect (occurence 0) to return []': function(test) {\n        test.expect(1);\n        // tests here\n        test.deepEqual(\n            F.any.occurrence(0).parse(stream.ofString('aa'), 0).value.array(),\n            [],\n            'should be accepter.'\n        );\n        test.done();\n    },\n\n    \"expect sequence ( '(',text(), ')' ) to return ['(', text, ')']\": function(\n        test\n    ) {\n        test.expect(1);\n        // tests here\n        const string = '(Hello)';\n        const expected = ['(', 'Hello', ')'];\n\n        const parsing = F.sequence(\n            C.char('('),\n            C.charNotIn(')').rep().map(v => v.join('')),\n            C.char(')')\n        ).parse(stream.ofString(string), 0);\n\n        test.deepEqual(parsing.value, expected, 'should be equal');\n        test.done();\n    },\n    \"expect sequence ( 2+2) to return [2,'+' ,2]\": function(test) {\n        test.expect(1);\n        // tests here\n        const string = '2+2';\n        const expected = [2, '+', 2];\n\n        const parsing = F.sequence(\n            N.numberLiteral,\n            C.char('+'),\n            N.numberLiteral\n        ).parse(stream.ofString(string), 0);\n\n        test.deepEqual(parsing.value, expected, 'should be equal');\n        test.done();\n    },\n\n    \"expect chained then (2+2) to return [2,'+' ,2]\": function(test) {\n        // Main difference with sequence, is that a sequence element could be an array\n        test.expect(1);\n        // tests here\n        const string = '2+2';\n        const expected = [2, '+', 2];\n\n        const parsing = N.numberLiteral\n            .then(C.char('+'))\n            .then(N.numberLiteral)\n            .parse(stream.ofString(string), 0);\n\n        test.deepEqual(parsing.value, expected, 'should be equal');\n        test.done();\n    },\n\n    'expect chained then (2+2) to return []': function(test) {\n        // Main difference with sequence, is that a sequence element could be an array\n        test.expect(1);\n        // tests here\n        const string = '2+2';\n        const expected = [];\n\n        const parsing = N.numberLiteral\n            .then(C.char('+'))\n            .then(N.numberLiteral)\n            .thenReturns([])\n            .parse(stream.ofString(string), 0);\n\n        test.deepEqual(parsing.value, expected, 'should be equal');\n        test.done();\n    },\n\n    'export subStream(4) to return [h,e,l,l]': function(test) {\n        test.expect(1);\n        // tests here\n        const string = 'hello';\n        const expected = ['h', 'e', 'l', 'l'];\n\n        const parsing = F.subStream(4).parse(stream.ofString(string), 0);\n\n        test.deepEqual(parsing.value.array(), expected, 'should be equal');\n        test.done();\n    },\n\n    'export subString(4) to return hell': function(test) {\n        test.expect(1);\n        // tests here\n        const string = 'hello';\n        const expected = 'hell';\n\n        const parsing = C.subString(4).parse(stream.ofString(string), 0);\n\n        test.deepEqual(parsing.value, expected, 'should be equal');\n        test.done();\n    },\n};\n"]}