{"version":3,"sources":["../../../src/test/parsec/parser_chain_test.js"],"names":["setUp","done","test","expect","p1","numberLiteral","thenLeft","char","opt","p2","any","then","eos","map","r","equal","chain","parse","ofString","isAccepted","value"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;;;;;;;;;;;;;;;;;kBAoBe;AACXA,WAAO,eAASC,IAAT,EAAe;AAClBA;AACH,KAHU;;AAKX,qCAAiC,iCAASC,IAAT,EAAe;AAC5CA,aAAKC,MAAL,CAAY,CAAZ;AACA;AACA,YAAIC,KAAK,UAAEC,aAAF,CAAgBC,QAAhB,CAAyB,UAAEC,IAAF,CAAO,GAAP,EAAYC,GAAZ,EAAzB,CAAT;AAAA,YACIC,KAAK,UAAEC,GAAF,CAAMC,IAAN,CAAW,UAAED,GAAb,EAAkBJ,QAAlB,CAA2B,UAAEM,GAA7B,EAAkCC,GAAlC,CAAsC,UAASC,CAAT,EAAY;AACnD,mBAAOA,EAAE,CAAF,IAAOA,EAAE,CAAF,CAAd;AACH,SAFI,CADT;;AAKAZ,aAAKa,KAAL,CACIX,GAAGY,KAAH,CAASP,EAAT,EAAaQ,KAAb,CAAmB,gBAAOC,QAAP,CAAgB,OAAhB,CAAnB,EAA6C,CAA7C,EAAgDC,UAAhD,EADJ,EAEI,IAFJ,EAGI,qBAHJ;AAKAjB,aAAKD,IAAL;AACH,KAnBU;;AAqBX,mCAA+B,+BAASC,IAAT,EAAe;AAC1CA,aAAKC,MAAL,CAAY,CAAZ;AACA;AACA,YAAIC,KAAK,UAAEC,aAAF,CAAgBC,QAAhB,CAAyB,UAAEC,IAAF,CAAO,GAAP,EAAYC,GAAZ,EAAzB,CAAT;AAAA,YACIC,KAAK,UAAEC,GAAF,CAAMC,IAAN,CAAW,UAAED,GAAb,EAAkBJ,QAAlB,CAA2B,UAAEM,GAA7B,EAAkCC,GAAlC,CAAsC,UAASC,CAAT,EAAY;AACnD,mBAAOA,EAAE,CAAF,IAAOA,EAAE,CAAF,CAAd;AACH,SAFI,CADT;;AAKAZ,aAAKa,KAAL,CACIX,GAAGY,KAAH,CAASP,EAAT,EAAaQ,KAAb,CAAmB,gBAAOC,QAAP,CAAgB,OAAhB,CAAnB,EAA6C,CAA7C,EAAgDE,KADpD,EAEI,EAFJ,EAGI,eAHJ;AAKAlB,aAAKD,IAAL;AACH;AAnCU,C","file":"parser_chain_test.js","sourcesContent":["import stream from '../../lib/stream/index';\nimport {F, C, N} from '../../lib/parsec/index';\n/*\n  ======== A Handy Little Nodeunit Reference ========\n  https://github.com/caolan/nodeunit\n\n  Test methods:\n    test.expect(numAssertions)\n    test.done()\n  Test assertions:\n    test.ok(value, [message])\n    test.equal(actual, expected, [message])\n    test.notEqual(actual, expected, [message])\n    test.deepEqual(actual, expected, [message])\n    test.notDeepEqual(actual, expected, [message])\n    test.strictEqual(actual, expected, [message])\n    test.notStrictEqual(actual, expected, [message])\n    test.throws(block, [error], [message])\n    test.doesNotThrow(block, [error], [message])\n    test.ifError(value)\n*/\n\nexport default {\n    setUp: function(done) {\n        done();\n    },\n\n    'expect (chain) to be accepted': function(test) {\n        test.expect(1);\n        // tests here\n        var p1 = N.numberLiteral.thenLeft(C.char(' ').opt()),\n            p2 = F.any.then(F.any).thenLeft(F.eos).map(function(r) {\n                return r[0] + r[1];\n            });\n\n        test.equal(\n            p1.chain(p2).parse(stream.ofString('12 34'), 0).isAccepted(),\n            true,\n            'should be accepted.'\n        );\n        test.done();\n    },\n\n    'expect (chain) to return 46': function(test) {\n        test.expect(1);\n        // tests here\n        var p1 = N.numberLiteral.thenLeft(C.char(' ').opt()),\n            p2 = F.any.then(F.any).thenLeft(F.eos).map(function(r) {\n                return r[0] + r[1];\n            });\n\n        test.equal(\n            p1.chain(p2).parse(stream.ofString('12 34'), 0).value,\n            46,\n            'should be 46.'\n        );\n        test.done();\n    },\n};\n"]}