{"version":3,"sources":["../../../../src/test/standard/markdown/code-line-parser-test.js"],"names":["value","undefined","accepted","expected","testLine","line","parsing","parse","isAccepted","setUp","done","test","ok","code","deepEqual"],"mappings":";;;;;;AAIA;;;;;;AAEA,IAAIA,QAAQC,SAAZ,C,CANA;;;;AAOA,IAAIC,WAAWD,SAAf;AACA,IAAIE,WAAWF,SAAf;;AAEA,SAASG,QAAT,CAAkBC,IAAlB,EAAwB;AACpB,QAAMC,UAAU,yBAAOC,KAAP,CAAaF,IAAb,CAAhB;AACAL,YAAQM,QAAQN,KAAhB;AACAE,eAAWI,QAAQE,UAAR,EAAX;AACH;;kBAEc;AACXC,WAAO,eAASC,IAAT,EAAe;AAClBA;AACH,KAHU;;AAKX,wBAAoB,wBAASC,IAAT,EAAe;AAC/B,YAAMN,2BAAN;AACAD,iBAASC,IAAT;AACAM,aAAKC,EAAL,CACI,CAACV,QADL,EAEI,uDAFJ;AAIAS,aAAKD,IAAL;AACH,KAbU;;AAeX,mBAAe,oBAASC,IAAT,EAAe;AAC1B,YAAMN,qCAAN;AACAD,iBAASC,IAAT;AACAM,aAAKC,EAAL,CAAQ,CAACV,QAAT,EAAmB,gDAAnB;AACAS,aAAKD,IAAL;AACH,KApBU;;AAsBX,mBAAe,mBAASC,IAAT,EAAe;AAC1B,YAAMN,uCAAN;AACAD,iBAASC,IAAT;AACAF,mBAAW,EAACU,MAAM,sBAAP,EAAX;AACAF,aAAKG,SAAL,CAAed,KAAf,EAAsBG,QAAtB,EAAgC,6BAAhC;AACAQ,aAAKD,IAAL;AACH,KA5BU;;AA8BX,mBAAe,mBAASC,IAAT,EAAe;AAC1B,YAAMN,mCAAN;AACAD,iBAASC,IAAT;AACAF,mBAAW,EAACU,MAAM,wBAAP,EAAX;AACAF,aAAKG,SAAL,CACId,KADJ,EAEIG,QAFJ,EAGI,kEAHJ;AAKAQ,aAAKD,IAAL;AACH,KAxCU;;AA0CX,mBAAe,mBAASC,IAAT,EAAe;AAC1B,YAAMN,aAAN;AACAD,iBAASC,IAAT;AACAF,mBAAW,EAACU,MAAM,EAAP,EAAX;AACAF,aAAKG,SAAL,CAAed,KAAf,EAAsBG,QAAtB,EAAgC,kCAAhC;AACAQ,aAAKD,IAAL;AACH,KAhDU;;AAkDX,mBAAe,mBAASC,IAAT,EAAe;AAC1B,YAAMN,eAAN;AACAD,iBAASC,IAAT;AACAF,mBAAW,EAACU,MAAM,IAAP,EAAX;AACAF,aAAKG,SAAL,CACId,KADJ,EAEIG,QAFJ,EAGI,0CAHJ;AAKAQ,aAAKD,IAAL;AACH;AA5DU,C","file":"code-line-parser-test.js","sourcesContent":["/**\n * Created by Simon on 03/01/2017.\n */\n\nimport Parser from '../../../lib/standard/markdown/code-line-parser';\n\nlet value = undefined;\nlet accepted = undefined;\nlet expected = undefined;\n\nfunction testLine(line) {\n    const parsing = Parser.parse(line);\n    value = parsing.value;\n    accepted = parsing.isAccepted();\n}\n\nexport default {\n    setUp: function(done) {\n        done();\n    },\n\n    'test text normal': function(test) {\n        const line = `This is not a code`;\n        testLine(line);\n        test.ok(\n            !accepted,\n            '   Normal text should not be accepted as a code block'\n        );\n        test.done();\n    },\n\n    'test bullet': function(test) {\n        const line = `\\t This is  a  level2 bullet`;\n        testLine(line);\n        test.ok(!accepted, 'bullets should not be accepted as a code block');\n        test.done();\n    },\n\n    'test code 1': function(test) {\n        const line = `        This is a code block\\n`;\n        testLine(line);\n        expected = {code: 'This is a code block'};\n        test.deepEqual(value, expected, 'This is a gentle block code');\n        test.done();\n    },\n\n    'test code 2': function(test) {\n        const line = `\\t\\t  This is a code block`;\n        testLine(line);\n        expected = {code: '  This is a code block'};\n        test.deepEqual(\n            value,\n            expected,\n            '  This is a  block code stzrting with spaces and ending with eos'\n        );\n        test.done();\n    },\n\n    'test code 3': function(test) {\n        const line = `\\t\\t`;\n        testLine(line);\n        expected = {code: ''};\n        test.deepEqual(value, expected, '  This is a blank line in a code');\n        test.done();\n    },\n\n    'test code 4': function(test) {\n        const line = `\\t\\t  `;\n        testLine(line);\n        expected = {code: '  '};\n        test.deepEqual(\n            value,\n            expected,\n            '  This is a code line with only 2 spaces'\n        );\n        test.done();\n    },\n};\n"]}