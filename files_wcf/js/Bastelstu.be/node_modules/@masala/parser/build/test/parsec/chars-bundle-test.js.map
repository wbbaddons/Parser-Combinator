{"version":3,"sources":["../../../src/test/parsec/chars-bundle-test.js"],"names":["setUp","done","test","expect","equal","char","parse","ofString","isAccepted","throws","notChar","charNotIn","charIn","lowerCase","upperCase","letter","ok","letterAs","OCCIDENTAL_LETTER","letters","then","eos","lettersAs","ASCII_LETTER","UTF8_LETTER","line","errorFound","combinator","Symbol","error","parsing","thenLeft","deepEqual","value","notDeepEqual","string","stringIn","offset","length","notString","utf8Letter","emoji"],"mappings":"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","file":"chars-bundle-test.js","sourcesContent":["import Streams from '../../lib/stream/index';\nimport {F, C} from '../../lib/parsec/index';\n\n\nexport default {\n    setUp: function(done) {\n        done();\n    },\n\n    'expect (char) to be accepted': function(test) {\n        test.expect(1);\n        // tests here\n        test.equal(\n            C.char('a').parse(Streams.ofString('a'), 0).isAccepted(),\n            true,\n            'should be accepted.'\n        );\n        test.done();\n    },\n\n    'expect (char) to be rejected': function(test) {\n        test.expect(1);\n        // tests here\n        test.equal(\n            C.char('a').parse(Streams.ofString('b'), 0).isAccepted(),\n            false,\n            'should be rejected.'\n        );\n        test.done();\n    },\n\n    'expect (char) to be refused': function(test) {\n        test.expect(1);\n        // tests here\n        test.throws(function() {\n            C.char('aa');\n        });\n        test.done();\n    },\n\n    'expect (notChar) to be accepted': function(test) {\n        test.expect(1);\n        // tests here\n        test.equal(\n            C.notChar('a').parse(Streams.ofString('b'), 0).isAccepted(),\n            true,\n            'should be accepted.'\n        );\n        test.done();\n    },\n\n    'expect (notChar) to be rejected': function(test) {\n        test.expect(1);\n        // tests here\n        test.equal(\n            C.notChar('a').parse(Streams.ofString('a'), 0).isAccepted(),\n            false,\n            'should be rejected.'\n        );\n        test.done();\n    },\n\n    'expect (notChar) to be refused': function(test) {\n        test.expect(1);\n        // tests here\n        test.throws(function() {\n            C.notChar('aa');\n        });\n        test.done();\n    },\n\n    'expect (charNotIn) to be accepted': function(test) {\n        test.expect(1);\n        // tests here\n        test.equal(\n            C.charNotIn('a').parse(Streams.ofString('b'), 0).isAccepted(),\n            true,\n            'should be accepted.'\n        );\n        test.done();\n    },\n\n    'expect (charNotIn) to be rejected': function(test) {\n        test.expect(1);\n        // tests here\n        test.equal(\n            C.charNotIn('a').parse(Streams.ofString('a'), 0).isAccepted(),\n            false,\n            'should be rejected.'\n        );\n        test.done();\n    },\n\n    'expect (charIn) to be accepted': function(test) {\n        test.expect(1);\n        // tests here\n        test.equal(\n            C.charIn('a').parse(Streams.ofString('a'), 0).isAccepted(),\n            true,\n            'should be accepted.'\n        );\n        test.done();\n    },\n\n    'expect (charIn) to be rejected': function(test) {\n        test.expect(1);\n        // tests here\n        test.equal(\n            C.charIn('a').parse(Streams.ofString('b'), 0).isAccepted(),\n            false,\n            'should be rejected.'\n        );\n        test.done();\n    },\n\n    'expect (lowerCase) to be accepted': function(test) {\n        test.expect(1);\n        // tests here\n        test.equal(\n            C.lowerCase.parse(Streams.ofString('a'), 0).isAccepted(),\n            true,\n            'should be accepted.'\n        );\n        test.done();\n    },\n\n    'expect (lowerCase) to be rejected': function(test) {\n        test.expect(1);\n        // tests here\n        test.equal(\n            C.lowerCase.parse(Streams.ofString('A'), 0).isAccepted(),\n            false,\n            'should be rejected.'\n        );\n        test.done();\n    },\n\n    'expect (upperCase) to be accepted': function(test) {\n        test.expect(1);\n        // tests here\n        test.equal(\n            C.upperCase.parse(Streams.ofString('A'), 0).isAccepted(),\n            true,\n            'should be accepted.'\n        );\n        test.done();\n    },\n\n    'expect (upperCase) to be rejected': function(test) {\n        test.expect(1);\n        // tests here\n        test.equal(\n            C.upperCase.parse(Streams.ofString('z'), 0).isAccepted(),\n            false,\n            'should be rejected.'\n        );\n        test.done();\n    },\n\n    'expect upper (letter) to be accepted': function(test) {\n        test.expect(1);\n        // tests here\n        test.equal(\n            C.letter.parse(Streams.ofString('A'), 0).isAccepted(),\n            true,\n            'should be accepted.'\n        );\n        test.done();\n    },\n\n    'expect lower (letter) to be accepted': function(test) {\n        test.expect(1);\n        // tests here\n        test.equal(\n            C.letter.parse(Streams.ofString('z'), 0).isAccepted(),\n            true,\n            'should be accepted.'\n        );\n        test.done();\n    },\n    'expect space (letter) to be rejected': function(test) {\n        test.expect(1);\n        // tests here\n        test.equal(\n            C.letter.parse(Streams.ofString(' '), 0).isAccepted(),\n            false,\n            'should be rejected.'\n        );\n        test.done();\n    },\n\n    'expect non (letter) to be rejected': function(test) {\n        test.expect(1);\n        // tests here\n        test.equal(\n            C.letter.parse(Streams.ofString('0'), 0).isAccepted(),\n            false,\n            'should be rejected.'\n        );\n        test.done();\n    },\n\n    'expect occidental letter to be accepted': function(test) {\n        test.ok(C.letter.parse(Streams.ofString('a'), 0).isAccepted());\n        test.ok(C.letterAs().parse(Streams.ofString('a'), 0).isAccepted());\n        test.ok(\n            C.letterAs(C.OCCIDENTAL_LETTER)\n                .parse(Streams.ofString('a'))\n                .isAccepted()\n        );\n        test.ok(\n            C.letterAs(C.OCCIDENTAL_LETTER)\n                .parse(Streams.ofString('é'))\n                .isAccepted()\n        );\n        test.ok(\n            !C.letterAs(C.OCCIDENTAL_LETTER)\n                .parse(Streams.ofString('Б'))\n                .isAccepted()\n        );\n        test.ok(\n            !C.letterAs(C.OCCIDENTAL_LETTER)\n                .parse(Streams.ofString('÷'))\n                .isAccepted()\n        );\n        test.done();\n    },\n\n    'expect occidental letters to be accepted': function(test) {\n        test.ok(\n            C.letters.then(F.eos).parse(Streams.ofString('aéÉ'), 0).isAccepted()\n        );\n        test.ok(\n            C.lettersAs()\n                .then(F.eos)\n                .parse(Streams.ofString('aéÉ'), 0)\n                .isAccepted()\n        );\n        test.ok(\n            C.lettersAs(C.OCCIDENTAL_LETTER)\n                .parse(Streams.ofString('a'))\n                .isAccepted()\n        );\n        test.ok(\n            C.lettersAs(C.OCCIDENTAL_LETTER)\n                .then(F.eos)\n                .parse(Streams.ofString('éA'))\n                .isAccepted()\n        );\n        test.ok(\n            !C.lettersAs(C.OCCIDENTAL_LETTER)\n                .then(F.eos)\n                .parse(Streams.ofString('БAs'))\n                .isAccepted()\n        );\n        test.done();\n    },\n\n    'expect ascii letter to be accepted': function(test) {\n        test.ok(\n            C.letterAs(C.ASCII_LETTER)\n                .parse(Streams.ofString('a'), 0)\n                .isAccepted()\n        );\n        test.ok(\n            !C.letterAs(C.ASCII_LETTER)\n                .parse(Streams.ofString('é'))\n                .isAccepted()\n        );\n        test.ok(\n            !C.letterAs(C.ASCII_LETTER)\n                .parse(Streams.ofString('Б'))\n                .isAccepted()\n        );\n        test.done();\n    },\n\n    'expect ascii letters to be accepted': function(test) {\n        test.ok(\n            C.lettersAs(C.ASCII_LETTER)\n                .then(F.eos)\n                .parse(Streams.ofString('a'))\n                .isAccepted()\n        );\n        test.ok(\n            !C.lettersAs(C.ASCII_LETTER)\n                .then(F.eos)\n                .parse(Streams.ofString('éA'))\n                .isAccepted()\n        );\n        test.ok(\n            !C.lettersAs(C.ASCII_LETTER)\n                .then(F.eos)\n                .parse(Streams.ofString('БAs'))\n                .isAccepted()\n        );\n        test.done();\n    },\n\n    'expect utf8 letter to be accepted': function(test) {\n        test.ok(\n            C.letterAs(C.UTF8_LETTER).parse(Streams.ofString('a')).isAccepted()\n        );\n        test.ok(\n            C.letterAs(C.UTF8_LETTER).parse(Streams.ofString('é')).isAccepted()\n        );\n        test.ok(\n            C.letterAs(C.UTF8_LETTER).parse(Streams.ofString('Б')).isAccepted()\n        );\n        test.ok(\n            !C.letterAs(C.UTF8_LETTER).parse(Streams.ofString('÷')).isAccepted()\n        );\n        test.done();\n    },\n    'expect utf8 letters to be accepted': function(test) {\n        test.ok(\n            C.lettersAs(C.UTF8_LETTER)\n                .then(F.eos)\n                .parse(Streams.ofString('a'))\n                .isAccepted()\n        );\n        test.ok(\n            C.lettersAs(C.UTF8_LETTER)\n                .then(F.eos)\n                .parse(Streams.ofString('éA'))\n                .isAccepted()\n        );\n        test.ok(\n            C.lettersAs(C.UTF8_LETTER)\n                .then(F.eos)\n                .parse(Streams.ofString('БAs'))\n                .isAccepted()\n        );\n        test.ok(\n            !C.letterAs(C.UTF8_LETTER)\n                .then(F.eos)\n                .parse(Streams.ofString('Б÷As'))\n                .isAccepted()\n        );\n        test.done();\n    },\n\n    'expect unknown letters to be rejected': function(test) {\n        const line = Streams.ofString('a');\n        let errorFound = false;\n        try {\n            const combinator = C.lettersAs(Symbol('UNKNOWN')).then(F.eos);\n            combinator.parse(line);\n        } catch (error) {\n            errorFound = true;\n        }\n        test.ok(errorFound);\n        test.done();\n    },\n\n    'expect (letters) to be accepted': function(test) {\n        test.expect(2);\n        // tests here\n        const parsing = C.letters\n            .thenLeft(F.eos)\n            .parse(Streams.ofString('someLetters'), 0);\n        test.equal(parsing.isAccepted(), true, 'should be accepted.');\n        test.deepEqual(parsing.value, 'someLetters', 'should be equal.');\n        test.done();\n    },\n\n    'expect (letters) with space to be rejected': function(test) {\n        test.expect(2);\n        // tests here\n        const parsing = C.letters\n            .then(F.eos)\n            .parse(Streams.ofString('some Letters'), 0);\n        test.equal(parsing.isAccepted(), false, 'should be rejected.');\n        test.notDeepEqual(parsing.value, 'some Letters', 'should be equal.');\n        test.done();\n    },\n\n    'expect (letters) with number to be rejected': function(test) {\n        test.expect(1);\n        // tests here\n        const parsing = C.letters\n            .then(F.eos)\n            .parse(Streams.ofString('some2Letters'), 0);\n        test.equal(parsing.isAccepted(), false, 'should be accepted.');\n        test.done();\n    },\n\n    'expect (letters) to return a string, not an array of letters': function(\n        test\n    ) {\n        test.expect(1);\n        // tests here\n        const parsing = C.letters\n            .thenLeft(F.eos)\n            .parse(Streams.ofString('someLetters'), 0);\n        test.equal(parsing.value, 'someLetters', 'not a string');\n        test.done();\n    },\n\n    'expect (string) to be accepted': function(test) {\n        test.expect(1);\n        // tests here\n        test.equal(\n            C.string('Hello').parse(Streams.ofString('Hello'), 0).isAccepted(),\n            true,\n            'should be accepted.'\n        );\n        test.done();\n    },\n\n    'expect (string) to be rejected': function(test) {\n        test.expect(1);\n        // tests here\n        test.equal(\n            C.string('hello').parse(Streams.ofString('hell'), 0).isAccepted(),\n            false,\n            'should be rejected.'\n        );\n        test.done();\n    },\n\n    'test stringIn': function(test) {\n        let line = Streams.ofString('James Bond');\n\n        const combinator = C.stringIn(['The', 'James', 'Bond', 'series']);\n        const value = combinator.parse(line).value;\n        test.ok(typeof value === 'string');\n        test.ok(value === 'James');\n        test.done();\n    },\n\n    'test stringIn Similar': function(test) {\n        // Checks the search comes back after each search\n        let line = Streams.ofString('Jack James Jane');\n\n        const combinator = C.stringIn(['Jamie', 'Jacko', 'Jack']);\n        const parsing = combinator.parse(line);\n        const value = parsing.value;\n        test.equal(typeof value, 'string');\n        test.equal(value, 'Jack');\n        test.equal(parsing.offset, 'Jack'.length);\n        test.done();\n    },\n\n    'test stringIn one string sidecase': function(test) {\n        let line = Streams.ofString('James');\n\n        const combinator = C.stringIn(['James']);\n        const value = combinator.parse(line).value;\n        test.ok(typeof value === 'string');\n        test.ok(value === 'James');\n        test.done();\n    },\n\n    'test stringIn empty sidecase': function(test) {\n        let line = Streams.ofString('James');\n\n        const combinator = C.stringIn([]).then(F.eos);\n        const parsing = combinator.parse(line);\n        test.ok(!parsing.isAccepted());\n        test.done();\n    },\n\n    'test stringIn empty accept nothing sidecase': function(test) {\n        let line = Streams.ofString('');\n\n        const combinator = C.stringIn([]).then(F.eos);\n        const parsing = combinator.parse(line);\n        test.ok(parsing.isAccepted());\n        test.done();\n    },\n\n    'expect (notString) to be accepted': function(test) {\n        test.expect(1);\n        // tests here\n        test.equal(\n            C.notString('**').parse(Streams.ofString('hello'), 0).isAccepted(),\n            true,\n            'should be accepted.'\n        );\n        test.done();\n    },\n\n    'expect (notString) to be h': function(test) {\n        test.expect(1);\n        // tests here\n        test.equal(\n            C.notString('**').parse(Streams.ofString('hello'), 0).value,\n            'h',\n            'should be h.'\n        );\n        test.done();\n    },\n\n    'expect (notString) to be rejected': function(test) {\n        test.expect(1);\n        // tests here\n        test.equal(\n            C.notString('**')\n                .parse(Streams.ofString('**hello'), 0)\n                .isAccepted(),\n            false,\n            'should be rejected.'\n        );\n        test.done();\n    },\n\n    'expect accent to be accepted': function(test) {\n        test.expect(1);\n        // tests here\n        test.equal(\n            C.utf8Letter.parse(Streams.ofString('é'), 0).isAccepted(),\n            true,\n            'should be accepted.'\n        );\n        test.done();\n    },\n    'expect cyriliq to be accepted': function(test) {\n        test.expect(2);\n        // tests here\n        //Белград\n        //български\n        test.equal(\n            C.utf8Letter.parse(Streams.ofString('Б'), 0).isAccepted(),\n            true,\n            'should be accepted.'\n        );\n        test.equal(\n            C.utf8Letter.parse(Streams.ofString('б'), 0).isAccepted(),\n            true,\n            'should be accepted.'\n        );\n        test.done();\n    },\n    'expect dash to be rejected': function(test) {\n        test.expect(1);\n        // tests here\n        test.equal(\n            C.utf8Letter.parse(Streams.ofString('-'), 0).isAccepted(),\n            false,\n            'should be rejected.'\n        );\n        test.done();\n    },\n    'expect \"nothing\" to be rejected': function(test) {\n        test.expect(1);\n        // tests here\n        test.equal(\n            C.utf8Letter.parse(Streams.ofString(''), 0).isAccepted(),\n            false,\n            'should be rejected.'\n        );\n        test.done();\n    },\n\n    'expect emoji to be accepted': function(test) {\n        // It's super important for emoji to test there is EOS just after,\n        // because some emoji takes two \\uWXYZ codes, where utf_8 does not\n        test.ok(\n            !C.emoji.then(F.eos).parse(Streams.ofString('б'), 0).isAccepted()\n        );\n        test.ok(\n            !C.emoji.then(F.eos).parse(Streams.ofString('a'), 0).isAccepted()\n        );\n        // multiple emojis are also accepted as one\n        test.ok(\n            C.emoji\n                .then(F.eos)\n                .parse(Streams.ofString('🐵🐵✈️'), 0)\n                .isAccepted()\n        );\n        test.ok(\n            C.emoji.then(F.eos).parse(Streams.ofString('✈️'), 0).isAccepted()\n        );\n        // Emoji 5.0 released in June 2017.\n        test.ok(C.emoji.then(F.eos).parse(Streams.ofString('🥪')).isAccepted());\n        test.done();\n    },\n};\n"]}