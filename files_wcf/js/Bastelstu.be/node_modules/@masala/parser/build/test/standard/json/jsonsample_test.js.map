{"version":3,"sources":["../../../../src/test/standard/json/jsonsample_test.js"],"names":["sampleTest","sample","test","expect","readFile","err","data","result","isAccepted","parse","ofString","toString","e","console","log","stack","ok","done","setUp"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;;;AAEA;;;;;;;;;;;;;;;;;;;AAmBA,SAASA,UAAT,CAAoBC,MAApB,EAA4BC,IAA5B,EAAkC;AAC9BA,SAAKC,MAAL,CAAY,CAAZ;;AAEA;AACA,iBAAGC,QAAH,CAAY,sCAAsCH,MAAlD,EAA0D,UACtDI,GADsD,EAEtDC,IAFsD,EAGxD;AACE,YAAID,GAAJ,EAAS;AACL,kBAAMA,GAAN;AACH;;AAED,YAAIE,SAAS;AACTC,wBAAY,sBAAW;AACnB,uBAAO,KAAP;AACH;AAHQ,SAAb;;AAMA,YAAI;AACAD,qBAAS,qBAAWE,KAAX,CAAiB,gBAAOC,QAAP,CAAgBJ,KAAKK,QAAL,EAAhB,CAAjB,CAAT;AACH,SAFD,CAEE,OAAOC,CAAP,EAAU;AACRC,oBAAQC,GAAR,CAAYF,EAAEG,KAAd;AACH;;AAED,YAAI,CAACR,OAAOC,UAAP,EAAL,EAA0B;AACtBK,oBAAQC,GAAR,CAAYP,MAAZ;AACH;;AAEDL,aAAKc,EAAL,CAAQT,OAAOC,UAAP,EAAR,EAA6B,kBAA7B;AACAN,aAAKe,IAAL;AACH,KA1BD;AA2BH;;kBAEc;AACXC,WAAO,eAASD,IAAT,EAAe;AAClBA;AACH,KAHU;;AAKX,eAAW,gBAASf,IAAT,EAAe;AACtBF,mBAAW,SAAX,EAAsBE,IAAtB;AACH,KAPU;;AASX,iBAAa,kBAASA,IAAT,EAAe;AACxBF,mBAAW,WAAX,EAAwBE,IAAxB;AACH;AAXU,C","file":"jsonsample_test.js","sourcesContent":["import fs from 'fs';\nimport jsonparser from '../../../lib/standard/json/jsonparser';\nimport stream from '../../../lib/stream/index';\n\n/*\n  ======== A Handy Little Nodeunit Reference ========\n  https://github.com/caolan/nodeunit\n  Test methods:\n    test.expect(numAssertions)\n    test.done()\n  Test assertions:\n    test.ok(value, [message])\n    test.equal(actual, expected, [message])\n    test.notEqual(actual, expected, [message])\n    test.(actual, expected, [message])\n    test.notDeepEqual(actual, expected, [message])\n    test.strictEqual(actual, expected, [message])\n    test.notStrictEqual(actual, expected, [message])\n    test.throws(block, [error], [message])\n    test.doesNotThrow(block, [error], [message])\n    test.ifError(value)\n*/\n\nfunction sampleTest(sample, test) {\n    test.expect(1);\n\n    // tests here\n    fs.readFile('./src/test/standard/json/samples/' + sample, function(\n        err,\n        data\n    ) {\n        if (err) {\n            throw err;\n        }\n\n        var result = {\n            isAccepted: function() {\n                return false;\n            },\n        };\n\n        try {\n            result = jsonparser.parse(stream.ofString(data.toString()));\n        } catch (e) {\n            console.log(e.stack);\n        }\n\n        if (!result.isAccepted()) {\n            console.log(result);\n        }\n\n        test.ok(result.isAccepted(), 'Well formed JSON');\n        test.done();\n    });\n}\n\nexport default {\n    setUp: function(done) {\n        done();\n    },\n\n    'test 1k': function(test) {\n        sampleTest('1k.json', test);\n    },\n\n    'test 100k': function(test) {\n        sampleTest('100k.json', test);\n    },\n};\n"]}