{"version":3,"sources":["../../../src/test/stream/buffered_stream_test.js"],"names":["setUp","done","test","expect","ok","buffered","ofString","endOfStream","equal","get","isSuccess","success","s","v","strictEqual"],"mappings":";;;;;;AAAA;;;;;;AAEA;;;;;;;;;;;;;;;;;;;;kBAoBe;AACXA,WAAO,eAASC,IAAT,EAAe;AAClBA;AACH,KAHU;;AAKX,oCAAgC,mCAASC,IAAT,EAAe;AAC3CA,aAAKC,MAAL,CAAY,CAAZ;AACA;AACAD,aAAKE,EAAL,CACI,gBAAOC,QAAP,CAAgB,gBAAOC,QAAP,CAAgB,EAAhB,CAAhB,EAAqCC,WAArC,CAAiD,CAAjD,CADJ,EAEI,wBAFJ;AAIAL,aAAKD,IAAL;AACH,KAbU;;AAeX,wCAAoC,sCAASC,IAAT,EAAe;AAC/CA,aAAKC,MAAL,CAAY,CAAZ;AACA;AACAD,aAAKE,EAAL,CACI,gBAAOC,QAAP,CAAgB,gBAAOC,QAAP,CAAgB,GAAhB,CAAhB,EAAsCC,WAAtC,CAAkD,CAAlD,CADJ,EAEI,wBAFJ;AAIAL,aAAKD,IAAL;AACH,KAvBU;;AAyBX,2CAAuC,wCAASC,IAAT,EAAe;AAClDA,aAAKC,MAAL,CAAY,CAAZ;AACA;AACAD,aAAKM,KAAL,CACI,gBAAOH,QAAP,CAAgB,gBAAOC,QAAP,CAAgB,GAAhB,CAAhB,EAAsCC,WAAtC,CAAkD,CAAlD,CADJ,EAEI,KAFJ,EAGI,wBAHJ;AAKAL,aAAKD,IAAL;AACH,KAlCU;;AAoCX,uBAAmB,uBAASC,IAAT,EAAe;AAC9BA,aAAKC,MAAL,CAAY,CAAZ;AACA;AACAD,aAAKM,KAAL,CACI,gBAAOH,QAAP,CAAgB,gBAAOC,QAAP,CAAgB,GAAhB,CAAhB,EAAsCG,GAAtC,CAA0C,CAA1C,EAA6CC,SAA7C,EADJ,EAEI,IAFJ,EAGI,sBAHJ;AAKAR,aAAKD,IAAL;AACH,KA7CU;;AA+CX,oCAAgC,iCAASC,IAAT,EAAe;AAC3CA,aAAKC,MAAL,CAAY,CAAZ;AACA;AACAD,aAAKM,KAAL,CACI,gBAAOH,QAAP,CAAgB,gBAAOC,QAAP,CAAgB,GAAhB,CAAhB,EAAsCG,GAAtC,CAA0C,CAA1C,EAA6CC,SAA7C,EADJ,EAEI,KAFJ,EAGI,sBAHJ;AAKAR,aAAKD,IAAL;AACH,KAxDU;;AA0DX,uCAAmC,qCAASC,IAAT,EAAe;AAC9CA,aAAKC,MAAL,CAAY,CAAZ;AACA;AACAD,aAAKM,KAAL,CACI,gBAAOH,QAAP,CAAgB,gBAAOC,QAAP,CAAgB,KAAhB,CAAhB,EAAwCG,GAAxC,CAA4C,CAA5C,EAA+CE,OAA/C,EADJ,EAEI,GAFJ,EAGI,gBAHJ;AAKAT,aAAKD,IAAL;AACH,KAnEU;;AAqEX,+CAA2C,4CAASC,IAAT,EAAe;AACtDA,aAAKC,MAAL,CAAY,CAAZ;AACA;AACA,YAAIS,IAAI,gBAAOP,QAAP,CAAgB,gBAAOC,QAAP,CAAgB,KAAhB,CAAhB,CAAR;AAAA,YAAiDO,IAAID,EAAEH,GAAF,CAAM,CAAN,CAArD;;AAEAP,aAAKY,WAAL,CAAiBF,EAAEH,GAAF,CAAM,CAAN,CAAjB,EAA2BI,CAA3B,EAA8B,8BAA9B;AACAX,aAAKD,IAAL;AACH;AA5EU,C","file":"buffered_stream_test.js","sourcesContent":["import stream from '../../lib/stream/index';\n\n/*\n  ======== A Handy Little Nodeunit Reference ========\n  https://github.com/caolan/nodeunit\n\n  Test methods:\n    test.expect(numAssertions)\n    test.done()\n  Test assertions:\n    test.ok(value, [message])\n    test.equal(actual, expected, [message])\n    test.notEqual(actual, expected, [message])\n    test.deepEqual(actual, expected, [message])\n    test.notDeepEqual(actual, expected, [message])\n    test.strictEqual(actual, expected, [message])\n    test.notStrictEqual(actual, expected, [message])\n    test.throws(block, [error], [message])\n    test.doesNotThrow(block, [error], [message])\n    test.ifError(value)\n*/\n\nexport default {\n    setUp: function(done) {\n        done();\n    },\n\n    'endOfStream for empty stream': function(test) {\n        test.expect(1);\n        // tests here\n        test.ok(\n            stream.buffered(stream.ofString('')).endOfStream(0),\n            'should be endOfStream.'\n        );\n        test.done();\n    },\n\n    'endOfStream for non empty stream': function(test) {\n        test.expect(1);\n        // tests here\n        test.ok(\n            stream.buffered(stream.ofString('1')).endOfStream(1),\n            'should be endOfStream.'\n        );\n        test.done();\n    },\n\n    'no endOfStream for non empty stream': function(test) {\n        test.expect(1);\n        // tests here\n        test.equal(\n            stream.buffered(stream.ofString('1')).endOfStream(0),\n            false,\n            'should be endOfStream.'\n        );\n        test.done();\n    },\n\n    'get from stream': function(test) {\n        test.expect(1);\n        // tests here\n        test.equal(\n            stream.buffered(stream.ofString('1')).get(0).isSuccess(),\n            true,\n            'should be a success.'\n        );\n        test.done();\n    },\n\n    'do not get from empty stream': function(test) {\n        test.expect(1);\n        // tests here\n        test.equal(\n            stream.buffered(stream.ofString('1')).get(1).isSuccess(),\n            false,\n            'should be a failure.'\n        );\n        test.done();\n    },\n\n    'get from stream numberLiteral 1': function(test) {\n        test.expect(1);\n        // tests here\n        test.equal(\n            stream.buffered(stream.ofString('123')).get(0).success(),\n            '1',\n            'should be a 1.'\n        );\n        test.done();\n    },\n\n    'get from stream numberLiteral is cached': function(test) {\n        test.expect(1);\n        // tests here\n        var s = stream.buffered(stream.ofString('123')), v = s.get(0);\n\n        test.strictEqual(s.get(0), v, 'should be a the same object.');\n        test.done();\n    },\n};\n"]}