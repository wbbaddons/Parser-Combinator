{"version":3,"sources":["../../../../src/test/standard/markdown/text-parser-test.js"],"names":["value","undefined","accepted","parser","testLine","line","parsing","parse","isAccepted","setUp","done","test","expect","ok","deepEqual","paragraph","text","italic","bold","expected"],"mappings":";;;;;;AAIA;;;;;;AAEA,IAAIA,QAAQC,SAAZ,C,CANA;;;;AAOA,IAAIC,WAAWD,SAAf;AACA,IAAIE,SAAS,IAAb;;AAEA,SAASC,QAAT,CAAkBC,IAAlB,EAAwB;AACpB,QAAIC,UAAUH,OAAOI,KAAP,CAAaF,IAAb,CAAd;AACAL,YAAQM,QAAQN,KAAhB;AACAE,eAAWI,QAAQE,UAAR,EAAX;AACH;;kBAEc;AACXC,WAAO,eAASC,IAAT,EAAe;AAClBP;AACAO;AACH,KAJU;;AAMX,uBAAmB,uBAASC,IAAT,EAAe;AAC9BA,aAAKC,MAAL,CAAY,CAAZ;;AAEAR,iBAAS,EAAT;AACAO,aAAKE,EAAL,CAAQ,CAACX,QAAT,EAAmB,+BAAnB;;AAEAE,iBAAS,KAAT;AACAO,aAAKE,EAAL,CAAQ,CAACX,QAAT,EAAmB,+BAAnB;;AAEAS,aAAKD,IAAL;AACH,KAhBU;;AAkBX,wBAAoB,wBAASC,IAAT,EAAe;AAC/BA,aAAKC,MAAL,CAAY,CAAZ;;AAEAR,iBAAS,MAAT;AACAO,aAAKG,SAAL,CAAed,KAAf,EAAsB,EAACe,WAAW,CAAC,EAACC,MAAM,MAAP,EAAD,CAAZ,EAAtB;;AAEAZ,iBAAS,SAAT;AACAO,aAAKG,SAAL,CAAed,KAAf,EAAsB,EAACe,WAAW,CAAC,EAACC,MAAM,MAAP,EAAD,CAAZ,EAAtB;;AAEAL,aAAKD,IAAL;AACH,KA5BU;;AA8BX,mBAAe,oBAASC,IAAT,EAAe;AAC1BA,aAAKC,MAAL,CAAY,CAAZ;;AAEAR,iBAAS,QAAT;AACAO,aAAKG,SAAL,CAAed,KAAf,EAAsB,EAACe,WAAW,CAAC,EAACE,QAAQ,MAAT,EAAD,CAAZ,EAAtB;;AAEAN,aAAKD,IAAL;AACH,KArCU;;AAuCX,iBAAa,kBAASC,IAAT,EAAe;AACxBA,aAAKC,MAAL,CAAY,CAAZ;;AAEAR,iBAAS,UAAT;AACAO,aAAKG,SAAL,CAAed,KAAf,EAAsB,EAACe,WAAW,CAAC,EAACG,MAAM,MAAP,EAAD,CAAZ,EAAtB;;AAEAP,aAAKD,IAAL;AACH,KA9CU;;AAgDX,4BAAwB,4BAASC,IAAT,EAAe;AACnCA,aAAKC,MAAL,CAAY,CAAZ;;AAEAR,iBAAS,gCAAT;AACA,YAAIe,WAAW;AACXJ,uBAAW,CACP,EAACE,QAAQ,QAAT,EADO,EAEP,EAACD,MAAM,QAAP,EAFO,EAGP,EAACE,MAAM,WAAP,EAHO,EAIP,EAACF,MAAM,GAAP,EAJO;AADA,SAAf;AAQAL,aAAKG,SAAL,CAAed,KAAf,EAAsBmB,QAAtB;;AAEAR,aAAKD,IAAL;AACH,KA/DU;;AAiEX,8CAA0C,wCAASC,IAAT,EAAe;AACrDA,aAAKC,MAAL,CAAY,CAAZ;;AAEAR,iBAAS,iCAAT;AACA,YAAIe,WAAW;AACXJ,uBAAW,CACP,EAACE,QAAQ,QAAT,EADO,EAEP,EAACD,MAAM,QAAP,EAFO,EAGP,EAACE,MAAM,WAAP,EAHO,EAIP,EAACF,MAAM,GAAP,EAJO;AADA,SAAf;AAQAL,aAAKG,SAAL,CAAed,KAAf,EAAsBmB,QAAtB;;AAEAR,aAAKD,IAAL;AACH;AAhFU,C","file":"text-parser-test.js","sourcesContent":["/**\r\n * Created by Simon on 14/12/2016.\r\n */\r\n\r\nimport Parser from '../../../lib/standard/markdown/text-parser';\r\n\r\nlet value = undefined;\r\nlet accepted = undefined;\r\nlet parser = null;\r\n\r\nfunction testLine(line) {\r\n    let parsing = parser.parse(line);\r\n    value = parsing.value;\r\n    accepted = parsing.isAccepted();\r\n}\r\n\r\nexport default {\r\n    setUp: function(done) {\r\n        parser = Parser;\r\n        done();\r\n    },\r\n\r\n    'test empty text': function(test) {\r\n        test.expect(2);\r\n\r\n        testLine('');\r\n        test.ok(!accepted, 'empty line are to be rejected');\r\n\r\n        testLine('   ');\r\n        test.ok(!accepted, 'blank line are to be rejected');\r\n\r\n        test.done();\r\n    },\r\n\r\n    'test simple text': function(test) {\r\n        test.expect(2);\r\n\r\n        testLine('text');\r\n        test.deepEqual(value, {paragraph: [{text: 'text'}]});\r\n\r\n        testLine('  text ');\r\n        test.deepEqual(value, {paragraph: [{text: 'text'}]});\r\n\r\n        test.done();\r\n    },\r\n\r\n    'test italic': function(test) {\r\n        test.expect(1);\r\n\r\n        testLine('*text*');\r\n        test.deepEqual(value, {paragraph: [{italic: 'text'}]});\r\n\r\n        test.done();\r\n    },\r\n\r\n    'test bold': function(test) {\r\n        test.expect(1);\r\n\r\n        testLine('**text**');\r\n        test.deepEqual(value, {paragraph: [{bold: 'text'}]});\r\n\r\n        test.done();\r\n    },\r\n\r\n    'test combined format': function(test) {\r\n        test.expect(1);\r\n\r\n        testLine('  *italic* text **then bold** ');\r\n        let expected = {\r\n            paragraph: [\r\n                {italic: 'italic'},\r\n                {text: ' text '},\r\n                {bold: 'then bold'},\r\n                {text: ' '},\r\n            ],\r\n        };\r\n        test.deepEqual(value, expected);\r\n\r\n        test.done();\r\n    },\r\n\r\n    'single \\\\n must be translated as space': function(test) {\r\n        test.expect(1);\r\n\r\n        testLine('  *italic* text\\n**then bold** ');\r\n        let expected = {\r\n            paragraph: [\r\n                {italic: 'italic'},\r\n                {text: ' text '},\r\n                {bold: 'then bold'},\r\n                {text: ' '},\r\n            ],\r\n        };\r\n        test.deepEqual(value, expected);\r\n\r\n        test.done();\r\n    },\r\n};\r\n"]}