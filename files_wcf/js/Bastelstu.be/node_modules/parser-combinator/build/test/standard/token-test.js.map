{"version":3,"sources":["../../../src/test/standard/token-test.js"],"names":["value","undefined","accepted","testParser","parser","string","myStream","ofString","parsing","parse","isAccepted","setUp","done","test","email","ok","expected","deepEqual","testString","thenLeft","char","then","eol","eos","blank","blankAcceptor","charIn","or","date"],"mappings":"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","file":"token-test.js","sourcesContent":["import T from '../../lib/standard/token-bundle';\r\nimport stream from '../../lib/stream/index';\r\nimport {F, C} from '../../lib/parsec/index';\r\n\r\nlet value = undefined;\r\nlet accepted = undefined;\r\n\r\nfunction testParser(parser, string) {\r\n    let myStream = stream.ofString(string);\r\n    let parsing = parser.parse(myStream);\r\n\r\n    value = parsing.value;\r\n    accepted = parsing.isAccepted();\r\n}\r\n\r\nexport default {\r\n    setUp: function(done) {\r\n        done();\r\n    },\r\n\r\n    'test bad email should fail': function(test) {\r\n        testParser(T.email(), 'random text');\r\n        test.ok(!accepted, 'random text should not be recognise as email');\r\n        test.done();\r\n    },\r\n\r\n    'test classic email should be accepted': function(test) {\r\n        testParser(T.email(), 'simon.zozol@gmail.com');\r\n        let expected = {email: 'simon.zozol@gmail.com'};\r\n        test.deepEqual(value, expected, 'error parsing email');\r\n        test.done();\r\n    },\r\n\r\n    'test greek email should be accepted': function(test) {\r\n        testParser(T.email(), 'δοκιμή@παράδειγμα.δοκιμή');\r\n        let expected = {email: 'δοκιμή@παράδειγμα.δοκιμή'};\r\n        test.deepEqual(value, expected, 'error parsing email in greek');\r\n        test.done();\r\n    },\r\n    'test bad email with 2 @ should be rejected': function(test) {\r\n        testParser(T.email(), 'simon@zozol@gmail.com');\r\n        test.ok(\r\n            !accepted,\r\n            'email adress should reject 2 @ (unless in double quote)'\r\n        );\r\n        test.done();\r\n    },\r\n\r\n    'test email with one quote should be rejected': function(test) {\r\n        testParser(T.email(), 'simon\"zozol@gmail.com');\r\n        test.ok(\r\n            !accepted,\r\n            'email adress should reject unbalanced double quote'\r\n        );\r\n        test.done();\r\n    },\r\n\r\n    'test email with two quotes should be accepted': function(test) {\r\n        testParser(T.email(), 'simon\"le gr@nd\"@holy-python.com');\r\n        let expected = {email: 'simon\"le gr@nd\"@holy-python.com'};\r\n        test.deepEqual(value, expected, 'error parsing email with quote');\r\n        test.done();\r\n    },\r\n\r\n    'test two emails integration should be accepted': function(test) {\r\n        const testString = 'simon@holy-python.com δοκιμή@παράδειγμα.δοκιμή';\r\n        testParser(T.email().thenLeft(C.char(' ')).then(T.email()), testString);\r\n        let expected = [\r\n            {email: 'simon@holy-python.com'},\r\n            {email: 'δοκιμή@παράδειγμα.δοκιμή'},\r\n        ];\r\n        test.deepEqual(value, expected, 'error parsing email chain');\r\n        test.done();\r\n    },\r\n\r\n    'test eol should be found': function(test) {\r\n        const testString = 'Hello\\nWorld';\r\n        testParser(\r\n            C.string('Hello').then(T.eol).then(C.string('World')).then(F.eos),\r\n            testString\r\n        );\r\n        test.ok(accepted);\r\n        test.done();\r\n    },\r\n    'test eol with Windows \\r\\n should be found': function(test) {\r\n        const testString = 'Hello\\r\\nWorld';\r\n        testParser(\r\n            C.string('Hello').then(T.eol).then(C.string('World')).then(F.eos),\r\n            testString\r\n        );\r\n        test.ok(accepted);\r\n        test.done();\r\n    },\r\n    'test blanks': function(test) {\r\n        const testString = 'Hello\\t  World';\r\n        testParser(\r\n            C.string('Hello')\r\n                .then(T.blank())\r\n                .then(C.string('World'))\r\n                .then(F.eos),\r\n            testString\r\n        );\r\n        test.ok(accepted);\r\n        test.done();\r\n    },\r\n    'test more blanks': function(test) {\r\n        const testString = 'Hello\\t\\n  World';\r\n        testParser(\r\n            C.string('Hello')\r\n                .then(T.blank(' \\t\\n'))\r\n                .then(C.string('World'))\r\n                .then(F.eos),\r\n            testString\r\n        );\r\n        test.ok(accepted);\r\n        test.done();\r\n    },\r\n    'test blanks with Acceptor': function(test) {\r\n        const testString = 'Hello\\t\\r\\n  World';\r\n        const blankAcceptor = C.charIn(' \\t').or(T.eol);\r\n        testParser(\r\n            C.string('Hello')\r\n                .then(T.blank(blankAcceptor))\r\n                .then(C.string('World'))\r\n                .then(F.eos),\r\n            testString\r\n        );\r\n        test.ok(accepted);\r\n        test.done();\r\n    },\r\n    'test date': function(test) {\r\n        const testString = '2012-10-12';\r\n        testParser(T.date().then(F.eos), testString);\r\n        test.ok(accepted);\r\n        test.done();\r\n    },\r\n};\r\n"]}