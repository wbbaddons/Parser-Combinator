{"version":3,"sources":["../../../../src/test/standard/extractor/extractor-bundle-test.js"],"names":["setUp","done","test","line","ofString","x","combinator","spaces","thenLeft","any","rep","value","parse","equals","length","then","word","thenRight","number","ok","digits","char","hexadecimal","charIn","letter","map","parseInt","string","accepted","isAccepted","words","_includes","stringIn","eos","parsing","wordsIn","moreSeparators","str","wordSeparators","found","original","console","warn","wordsUntil","helloParser","first","last","parser","offset","document","start","ofArray","e","array","i"],"mappings":"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","file":"extractor-bundle-test.js","sourcesContent":["import X from '../../../lib/standard/extractor/extractor-bundle';\r\nimport {F, C} from '../../../lib/parsec/index';\r\nimport stream from '../../../lib/stream/index';\r\n\r\nexport default {\r\n    setUp: function(done) {\r\n        done();\r\n    },\r\n\r\n    'test spaces': function(test) {\r\n        const line = stream.ofString('    this starts with 4 spaces');\r\n\r\n        const x = new X();\r\n        const combinator = x.spaces().thenLeft(F.any.rep());\r\n        const value = combinator.parse(line).value;\r\n        test.equals(value.length, 4);\r\n        test.done();\r\n    },\r\n    'test spaces and line feed': function(test) {\r\n        const line = stream.ofString('    this \\n contains line feed');\r\n\r\n        const x = new X();\r\n        const combinator = x\r\n            .spaces()\r\n            .then(x.word())\r\n            .thenRight(x.spaces())\r\n            .thenLeft(F.any);\r\n        const value = combinator.parse(line).value;\r\n        test.equals(value.length, 3);\r\n        test.done();\r\n    },\r\n    'test spaces, tabs and line feed': function(test) {\r\n        const line = stream.ofString('    this \\n \\t contains line feed');\r\n\r\n        const x = new X();\r\n        const combinator = x\r\n            .spaces()\r\n            .then(x.word())\r\n            .thenRight(x.spaces())\r\n            .thenLeft(F.any);\r\n        const value = combinator.parse(line).value;\r\n        test.equals(value.length, 5);\r\n        test.done();\r\n    },\r\n    'test numbers': function(test) {\r\n        const line = stream.ofString('98');\r\n\r\n        const x = new X();\r\n        const combinator = x.number();\r\n        const value = combinator.parse(line).value;\r\n        test.ok(value === 98);\r\n        test.done();\r\n    },\r\n    'test digits': function(test) {\r\n        const line = stream.ofString('98');\r\n\r\n        const x = new X();\r\n        const combinator = x.digits();\r\n        const value = combinator.parse(line).value;\r\n        test.ok(value === '98');\r\n        test.done();\r\n    },\r\n    'test single word': function(test) {\r\n        let line = stream.ofString('Parsec-');\r\n\r\n        const x = new X();\r\n        const combinator = x.word().thenLeft(C.char('-'));\r\n        const value = combinator.parse(line).value;\r\n        test.ok(value === 'Parsec');\r\n        test.done();\r\n    },\r\n\r\n    'test single word hexadecimal': function(test) {\r\n        let line = stream.ofString('10FF-hexadecimal');\r\n        const hexadecimal = C.charIn('0123456789ABCDEF');\r\n\r\n        const x = new X({letter: hexadecimal});\r\n        const combinator = x\r\n            .word()\r\n            .map(x => parseInt(x, 16))\r\n            .thenLeft(C.char('-'))\r\n            .thenLeft(C.string('hexadecimal'));\r\n        const value = combinator.parse(line).value;\r\n        test.equals(value, 4351);\r\n        test.done();\r\n    },\r\n    'single word with bad letters should fail': function(test) {\r\n        let line = stream.ofString('classicWord-notHexadecimal');\r\n        const hexadecimal = C.charIn('0123456789ABCDEF');\r\n\r\n        const x = new X({letter: hexadecimal});\r\n        const combinator = x\r\n            .word()\r\n            .map(x => parseInt(x, 16))\r\n            .thenLeft(C.char('-'))\r\n            .thenLeft(C.string('notHexadecimal'));\r\n        const accepted = combinator.parse(line).isAccepted();\r\n        test.ok(!accepted);\r\n        test.done();\r\n    },\r\n\r\n    'test words': function(test) {\r\n        let line = stream.ofString(\r\n            'The James Bond series, by writer Ian Fleming'\r\n        );\r\n\r\n        const x = new X();\r\n        const combinator = x.words();\r\n        const value = combinator.parse(line).value;\r\n        test.ok(value[1] === ' ');\r\n        test.ok(_includes(value, 'Bond'));\r\n        test.done();\r\n    },\r\n\r\n    'test stringIn': function(test) {\r\n        let line = stream.ofString('James Bond');\r\n\r\n        const x = new X();\r\n        const combinator = x.stringIn(['The', 'James', 'Bond', 'series']);\r\n        const value = combinator.parse(line).value;\r\n        test.ok(typeof value === 'string');\r\n        test.ok(value === 'James');\r\n        test.done();\r\n    },\r\n\r\n    'test stringIn one string sidecase': function(test) {\r\n        let line = stream.ofString('James');\r\n\r\n        const x = new X();\r\n        const combinator = x.stringIn(['James']);\r\n        const value = combinator.parse(line).value;\r\n        test.ok(typeof value === 'string');\r\n        test.ok(value === 'James');\r\n        test.done();\r\n    },\r\n\r\n    'test stringIn empty sidecase': function(test) {\r\n        let line = stream.ofString('James');\r\n\r\n        const x = new X();\r\n        const combinator = x.stringIn([]).then(F.eos);\r\n        const parsing = combinator.parse(line);\r\n        test.ok(!parsing.isAccepted());\r\n        test.done();\r\n    },\r\n\r\n    'test wordsIn': function(test) {\r\n        let line = stream.ofString('James Bond by Ian Fleming');\r\n\r\n        const x = new X();\r\n        const combinator = x.wordsIn(\r\n            ['James', 'Bond', 'by', 'Ian', 'Fleming'],\r\n            true\r\n        );\r\n        const value = combinator.parse(line).value;\r\n        test.ok(value.length === 9);\r\n        test.ok(_includes(value, 'James'));\r\n        test.ok(_includes(value, 'Bond'));\r\n        test.ok(_includes(value, 'Fleming'));\r\n        test.done();\r\n    },\r\n\r\n    'test wordsIn without keeping spaces': function(test) {\r\n        let line = stream.ofString('James Bond by Ian Fleming');\r\n\r\n        const x = new X();\r\n        const combinator = x.wordsIn(\r\n            ['James', 'Bond', 'by', 'Ian', 'Fleming'],\r\n            false\r\n        );\r\n        const value = combinator.parse(line).value;\r\n        test.ok(value.length === 5);\r\n        test.ok(_includes(value, 'James'));\r\n        test.ok(_includes(value, 'Bond'));\r\n        test.ok(_includes(value, 'Fleming'));\r\n        test.done();\r\n    },\r\n\r\n    'test wordsIn keeping spaces with alt spaces': function(test) {\r\n        let line = stream.ofString('James%Bond%by Ian=Fleming');\r\n\r\n        const x = new X({moreSeparators: '%='});\r\n        const combinator = x.wordsIn(\r\n            ['James', 'Bond', 'by', 'Ian', 'Fleming'],\r\n            false\r\n        );\r\n        const value = combinator.parse(line).value;\r\n        test.ok(value.length === 5);\r\n        test.ok(_includes(value, 'James'));\r\n        test.ok(_includes(value, 'Bond'));\r\n        test.ok(_includes(value, 'Fleming'));\r\n        test.done();\r\n    },\r\n\r\n    'test wordsIn with custom spaces': function(test) {\r\n        const str = 'JamesSPACEBondSPACEbySPACEIanSPACEFlemingSPACESPACE';\r\n        let line = stream.ofString(str);\r\n\r\n        const x = new X({wordSeparators: C.string('SPACE')});\r\n        const combinator = x.wordsIn(\r\n            ['James', 'Bond', 'by', 'Ian', 'Fleming'],\r\n            false\r\n        );\r\n        const value = combinator.parse(line).value;\r\n        test.ok(value.length === 5);\r\n        test.ok(_includes(value, 'James'));\r\n        test.ok(_includes(value, 'Bond'));\r\n        test.ok(_includes(value, 'Fleming'));\r\n        test.done();\r\n    },\r\n    'test wordsIn with both custom spaces and more Sep': function(test) {\r\n        const str = 'James=BondSPACEbySPACEIanSPACEFlemingSPACESPACE';\r\n        let line = stream.ofString(str);\r\n\r\n        let found = false;\r\n        const original = console.warn;\r\n        console.warn = () => {\r\n            found = true;\r\n        };\r\n        const x = new X({\r\n            wordSeparators: C.string('SPACE'),\r\n            moreSeparators: '%=',\r\n        });\r\n\r\n        const combinator = x.wordsIn(\r\n            ['James=Bond', 'by', 'Ian', 'Fleming'],\r\n            false\r\n        );\r\n\r\n        const value = combinator.parse(line).value;\r\n\r\n        test.ok(found);\r\n        test.ok(value.length === 4);\r\n        test.ok(_includes(value, 'James=Bond'));\r\n        test.ok(_includes(value, 'Fleming'));\r\n        console.warn = original;\r\n        test.done();\r\n    },\r\n    'test wordsUntil': function(test) {\r\n        const line = stream.ofString('I write until James appears');\r\n\r\n        const x = new X();\r\n        const combinator = x.wordsUntil(C.string('James')).thenLeft(F.any);\r\n        const value = combinator.parse(line).value;\r\n\r\n        test.equals(value, 'I write until ');\r\n        test.done();\r\n    },\r\n    'test wordsUntil Not found': function(test) {\r\n        const line = stream.ofString('I write until James appears');\r\n\r\n        const x = new X();\r\n        const combinator = x\r\n            .wordsUntil(C.string('Indiana'))\r\n            .then(C.string('I'))\r\n            .thenLeft(F.any);\r\n        const accepted = combinator.parse(line).isAccepted();\r\n\r\n        test.ok(!accepted);\r\n        test.done();\r\n    },\r\n    'test wordsUntil found with more parsers': function(test) {\r\n        const line = stream.ofString('I write until James Bond appears');\r\n\r\n        const x = new X();\r\n        const combinator = x\r\n            .wordsUntil(C.string('James'))\r\n            .thenLeft(C.string('James Bond'))\r\n            .thenLeft(F.any);\r\n        const value = combinator.parse(line).value;\r\n\r\n        test.equals(value, 'I write until ');\r\n        test.done();\r\n    },\r\n    'test wordsUntil  found with failing parser': function(test) {\r\n        const line = stream.ofString('I write until James Bond appears');\r\n\r\n        const x = new X();\r\n        const combinator = x\r\n            .wordsUntil(C.string('James'))\r\n            .thenLeft(C.string('Indiana jones'))\r\n            .thenLeft(F.any);\r\n        const accepted = combinator.parse(line).isAccepted();\r\n\r\n        test.ok(!accepted);\r\n        test.done();\r\n    },\r\n    'test first': function(test) {\r\n        const line = stream.ofString(\"Hello 'World'\");\r\n        const x = new X({wordSeparators: C.charIn(\" '\")});\r\n\r\n        const helloParser = x.words().map(x.first);\r\n\r\n        const value = helloParser.parse(line).value;\r\n\r\n        test.equals(value, 'Hello');\r\n        test.done();\r\n    },\r\n    'test last': function(test) {\r\n        const line = stream.ofString(\"Hello 'World'\");\r\n        const x = new X({moreSeparators: \"'\"});\r\n\r\n        const helloParser = x.words(false).map(x.last);\r\n\r\n        const value = helloParser.parse(line).value;\r\n\r\n        test.equals(value, 'World');\r\n        test.done();\r\n    },\r\n\r\n    'test wordsUntilFast string': function(test) {\r\n        const line = stream.ofString('soXYZso');\r\n\r\n        const x = new X();\r\n        const combinator = x.wordsUntil('XYZ');\r\n        const parser = combinator.parse(line);\r\n        const value = parser.value;\r\n        const offset = parser.offset;\r\n\r\n        test.equals(value, 'so');\r\n        test.equals(offset, 2);\r\n        test.done();\r\n    },\r\n    'test wordsUntilFast string with continuation': function(test) {\r\n        const document = 'start-detect-XYZ-continues';\r\n        const line = stream.ofString(document);\r\n\r\n        const start = C.string('start-');\r\n        const x = new X();\r\n        const combinator = start.thenRight(\r\n            x.wordsUntil('XYZ').thenLeft(C.string('XYZ-continues'))\r\n        );\r\n        const parser = combinator.parse(line);\r\n        const value = parser.value;\r\n        const offset = parser.offset;\r\n\r\n        test.equals(value, 'detect-');\r\n        test.equals(offset, document.length);\r\n        test.done();\r\n    },\r\n    'test wordsUntilFast array of string with continuation': function(test) {\r\n        const document = 'start-detect-XYZ-continues';\r\n        const line = stream.ofString(document);\r\n\r\n        const start = C.string('start-');\r\n        const x = new X();\r\n        const combinator = start.thenRight(\r\n            x\r\n                .wordsUntil(['ABC', 'ZE', 'XYZ'])\r\n                .thenLeft(C.string('XYZ-continues'))\r\n        );\r\n        const parser = combinator.parse(line);\r\n        const value = parser.value;\r\n        const offset = parser.offset;\r\n\r\n        test.equals(value, 'detect-');\r\n        test.equals(offset, document.length);\r\n        test.done();\r\n    },\r\n    'test wordsUntilFast string fails': function(test) {\r\n        const document = 'start-detect-XYZ-continues';\r\n        const line = stream.ofString(document);\r\n\r\n        const start = C.string('start-');\r\n        const x = new X();\r\n        const combinator = start.thenRight(\r\n            x.wordsUntil('EEE').thenLeft(C.string('XYZ-continues'))\r\n        );\r\n        const parsing = combinator.parse(line);\r\n\r\n        test.ok(!parsing.isAccepted());\r\n        test.done();\r\n    },\r\n    'test wordsUntilFast array of string fails': function(test) {\r\n        const document = 'start-detect-XYZ-continues';\r\n        const line = stream.ofString(document);\r\n\r\n        const start = C.string('start-');\r\n        const x = new X();\r\n        const combinator = start.thenRight(\r\n            x\r\n                .wordsUntil(['ABC', 'ZE', 'EEE'])\r\n                .thenLeft(C.string('XYZ-continues'))\r\n        );\r\n        const parsing = combinator.parse(line);\r\n\r\n        test.ok(!parsing.isAccepted());\r\n        test.done();\r\n    },\r\n    'test wordsUntilFast fails if array stream': function(test) {\r\n        const document = ['More', 'XYZ'];\r\n        const line = stream.ofArray(document);\r\n\r\n        const x = new X();\r\n        const combinator = x.wordsUntil(['ABC', 'ZE', 'XYZ']);\r\n        let found = false;\r\n        try {\r\n            const parsing = combinator.parse(line);\r\n        } catch (e) {\r\n            if (e === 'Input source must be a String') {\r\n                found = true;\r\n            }\r\n        }\r\n\r\n        test.ok(found);\r\n        test.done();\r\n    },\r\n    'test wordsUntilFastString fails if array stream': function(test) {\r\n        const document = ['More', 'XYZ'];\r\n        const line = stream.ofArray(document);\r\n\r\n        const x = new X();\r\n        const combinator = x.wordsUntil('XYZ');\r\n        let found = false;\r\n        try {\r\n            const parsing = combinator.parse(line);\r\n        } catch (e) {\r\n            if (e === 'Input source must be a String') {\r\n                found = true;\r\n            }\r\n        }\r\n\r\n        test.ok(found);\r\n        test.done();\r\n    },\r\n};\r\n\r\nfunction _includes(array, value) {\r\n    for (let i = 0; i < array.length; i++) {\r\n        if (array[i] === value) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n"]}