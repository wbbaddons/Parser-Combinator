{"version":3,"sources":["../../../../src/test/standard/json/jsonsample_test.js"],"names":["sampleTest","sample","test","expect","readFile","err","data","result","isAccepted","parse","ofString","toString","e","console","log","stack","ok","done","setUp"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;;;AAEA;;;;;;;;;;;;;;;;;;;AAmBA,SAASA,UAAT,CAAoBC,MAApB,EAA4BC,IAA5B,EAAkC;AAC9BA,SAAKC,MAAL,CAAY,CAAZ;;AAEA;AACA,iBAAGC,QAAH,CAAY,sCAAsCH,MAAlD,EAA0D,UACtDI,GADsD,EAEtDC,IAFsD,EAGxD;AACE,YAAID,GAAJ,EAAS;AACL,kBAAMA,GAAN;AACH;;AAED,YAAIE,SAAS;AACTC,wBAAY,sBAAW;AACnB,uBAAO,KAAP;AACH;AAHQ,SAAb;;AAMA,YAAI;AACAD,qBAAS,qBAAWE,KAAX,CAAiB,gBAAOC,QAAP,CAAgBJ,KAAKK,QAAL,EAAhB,CAAjB,CAAT;AACH,SAFD,CAEE,OAAOC,CAAP,EAAU;AACRC,oBAAQC,GAAR,CAAYF,EAAEG,KAAd;AACH;;AAED,YAAI,CAACR,OAAOC,UAAP,EAAL,EAA0B;AACtBK,oBAAQC,GAAR,CAAYP,MAAZ;AACH;;AAEDL,aAAKc,EAAL,CAAQT,OAAOC,UAAP,EAAR,EAA6B,kBAA7B;AACAN,aAAKe,IAAL;AACH,KA1BD;AA2BH;;kBAEc;AACXC,WAAO,eAASD,IAAT,EAAe;AAClBA;AACH,KAHU;;AAKX,eAAW,gBAASf,IAAT,EAAe;AACtBF,mBAAW,SAAX,EAAsBE,IAAtB;AACH,KAPU;;AASX,iBAAa,kBAASA,IAAT,EAAe;AACxBF,mBAAW,WAAX,EAAwBE,IAAxB;AACH;AAXU,C","file":"jsonsample_test.js","sourcesContent":["import fs from 'fs';\r\nimport jsonparser from '../../../lib/standard/json/jsonparser';\r\nimport stream from '../../../lib/stream/index';\r\n\r\n/*\r\n  ======== A Handy Little Nodeunit Reference ========\r\n  https://github.com/caolan/nodeunit\r\n  Test methods:\r\n    test.expect(numAssertions)\r\n    test.done()\r\n  Test assertions:\r\n    test.ok(value, [message])\r\n    test.equal(actual, expected, [message])\r\n    test.notEqual(actual, expected, [message])\r\n    test.(actual, expected, [message])\r\n    test.notDeepEqual(actual, expected, [message])\r\n    test.strictEqual(actual, expected, [message])\r\n    test.notStrictEqual(actual, expected, [message])\r\n    test.throws(block, [error], [message])\r\n    test.doesNotThrow(block, [error], [message])\r\n    test.ifError(value)\r\n*/\r\n\r\nfunction sampleTest(sample, test) {\r\n    test.expect(1);\r\n\r\n    // tests here\r\n    fs.readFile('./src/test/standard/json/samples/' + sample, function(\r\n        err,\r\n        data\r\n    ) {\r\n        if (err) {\r\n            throw err;\r\n        }\r\n\r\n        var result = {\r\n            isAccepted: function() {\r\n                return false;\r\n            },\r\n        };\r\n\r\n        try {\r\n            result = jsonparser.parse(stream.ofString(data.toString()));\r\n        } catch (e) {\r\n            console.log(e.stack);\r\n        }\r\n\r\n        if (!result.isAccepted()) {\r\n            console.log(result);\r\n        }\r\n\r\n        test.ok(result.isAccepted(), 'Well formed JSON');\r\n        test.done();\r\n    });\r\n}\r\n\r\nexport default {\r\n    setUp: function(done) {\r\n        done();\r\n    },\r\n\r\n    'test 1k': function(test) {\r\n        sampleTest('1k.json', test);\r\n    },\r\n\r\n    'test 100k': function(test) {\r\n        sampleTest('100k.json', test);\r\n    },\r\n};\r\n"]}