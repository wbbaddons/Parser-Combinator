{"version":3,"sources":["../../../../src/test/standard/markdown/title-test.js"],"names":["value","undefined","accepted","parser","testLine","line","parsing","parse","isAccepted","setUp","done","test","expect","expected","title","level","text","ok","deepEqual"],"mappings":"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","file":"title-test.js","sourcesContent":["/**\r\n * Created by Simon on 14/12/2016.\r\n */\r\n\r\nimport Parser from '../../../lib/standard/markdown/title-parser';\r\n\r\nlet value = undefined;\r\nlet accepted = undefined;\r\nlet parser = null;\r\n\r\nfunction testLine(line) {\r\n    let parsing = parser.parse(line);\r\n    value = parsing.value;\r\n    accepted = parsing.isAccepted();\r\n}\r\n\r\nexport default {\r\n    setUp: function(done) {\r\n        parser = Parser;\r\n        done();\r\n    },\r\n\r\n    'test level1': function(test) {\r\n        test.expect(2);\r\n\r\n        testLine('# title1\\n');\r\n        let expected = {title: {level: 1, text: 'title1'}};\r\n        test.ok(accepted, 'test title1');\r\n        test.deepEqual(expected, value, 'test title1');\r\n\r\n        test.done();\r\n    },\r\n\r\n    'test level3': function(test) {\r\n        test.expect(2);\r\n\r\n        testLine('### title\\n');\r\n        let expected = {title: {level: 3, text: 'title'}};\r\n        test.ok(accepted, 'test title level 3');\r\n        test.deepEqual(expected, value, 'test title level 3');\r\n\r\n        test.done();\r\n    },\r\n\r\n    'title alternate 1 should be accepted': function(test) {\r\n        test.expect(1);\r\n\r\n        testLine('Title\\n=====\\n');\r\n        let expected = {title: {level: 1, text: 'Title'}};\r\n\r\n        test.deepEqual(expected, value, 'test title1 alt');\r\n        test.done();\r\n    },\r\n\r\n    'title alternate 1 should be title1': function(test) {\r\n        test.expect(1);\r\n\r\n        testLine('Title\\n=====   \\n');\r\n        let expected = {title: {level: 1, text: 'Title'}};\r\n\r\n        test.deepEqual(expected, value, 'test title1 alt');\r\n        test.done();\r\n    },\r\n\r\n    'title alternate 2 should be accepted': function(test) {\r\n        test.expect(1);\r\n\r\n        testLine('Title\\n-----\\n');\r\n        let expected = {title: {level: 2, text: 'Title'}};\r\n\r\n        test.deepEqual(expected, value, 'test title2 alt');\r\n        test.done();\r\n    },\r\n\r\n    'title alternate 2 should be title1': function(test) {\r\n        test.expect(1);\r\n\r\n        testLine('Title\\n------   \\n');\r\n        let expected = {title: {level: 2, text: 'Title'}};\r\n\r\n        test.deepEqual(expected, value, 'test title2 alt');\r\n        test.done();\r\n    },\r\n\r\n    ' stars into title': function(test) {\r\n        test.expect(2);\r\n\r\n        testLine('2*3*4 = 24\\n------   \\n');\r\n        let expected = {title: {level: 2, text: '2*3*4 = 24'}};\r\n\r\n        test.deepEqual(expected, value, 'test stars in title1');\r\n\r\n        testLine('## 2*3*4 = 24\\n');\r\n        expected = {title: {level: 2, text: '2*3*4 = 24'}};\r\n\r\n        test.deepEqual(expected, value, 'test stars in title2');\r\n\r\n        test.done();\r\n    },\r\n\r\n    'Sharps not followed by space': function(test) {\r\n        test.expect(1);\r\n\r\n        testLine('#Not tile');\r\n\r\n        test.ok(!accepted, 'Sharp not followed by space shall not be parsed');\r\n        test.done();\r\n    },\r\n};\r\n"]}