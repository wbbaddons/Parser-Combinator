{"version":3,"sources":["../../../../src/test/standard/markdown/document-parser-test.js"],"names":["value","undefined","testBlock","block","parsing","parse","ofString","standardParagraph","expectedStandardParagraph","paragraph","text","lev1Title","otherLev1Title","lev1AltTitle","lev2AltTitle","expectedLev1Title","title","level","expectedOtherLev1Title","expectedLev2Title","complexParagraph","expectedComplexParagraph","italic","bold","bullet1","bullet2","bullet3","bullet4level2","bullet5level2","bullets","expectedBullet1","bullet","content","expectedBullet2","expectedBullet3","expectedBullet4level2","code","expectedBullet5level2","expectedBullets","setUp","done","test","expected","deepEqual","concat","spaceCodeLine","expectedSpaceCodeLine","tabCodeLine","expectedTabCodeLine","haskellCode","expectedHaskellCode","spaceCodeBloc","expectedSpaceCodeBloc"],"mappings":"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","file":"document-parser-test.js","sourcesContent":["/**\r\n * Created by Nicolas Zozol on 15/12/2016.\r\n */\r\n\r\nimport mdParser from '../../../lib/standard/markdown/markdown-parser';\r\nimport stream from '../../../lib/stream/index';\r\n\r\nlet value = undefined;\r\n\r\nfunction testBlock(block) {\r\n    const parsing = mdParser.parse(stream.ofString(block));\r\n    value = parsing.value;\r\n}\r\n\r\nconst standardParagraph = `Their job is to destroy\r\nDeath Stars.`;\r\nconst expectedStandardParagraph = {\r\n    paragraph: [{text: 'Their job is to destroy Death Stars.'}],\r\n};\r\n\r\nconst lev1Title = '# Star Wars Rocks';\r\nconst otherLev1Title = '# Star Trek also Rocks';\r\nconst lev1AltTitle = 'Star Wars Rocks\\n======';\r\nconst lev2AltTitle = 'C3PO and R2D2\\n----';\r\nconst expectedLev1Title = {title: {level: 1, text: 'Star Wars Rocks'}};\r\nconst expectedOtherLev1Title = {\r\n    title: {level: 1, text: 'Star Trek also Rocks'},\r\n};\r\nconst expectedLev2Title = {title: {level: 2, text: 'C3PO and R2D2'}};\r\n\r\nconst complexParagraph = `They know how to  *use the force*\r\n  , speed up,  and destroy **Death Stars**.`;\r\n\r\nconst expectedComplexParagraph = {\r\n    paragraph: [\r\n        {text: 'They know how to  '},\r\n        {italic: 'use the force'},\r\n        {text: '   , speed up,  and destroy '},\r\n        {bold: 'Death Stars'},\r\n        {text: '.'},\r\n    ],\r\n};\r\n\r\nconst bullet1 = '* Look for plans';\r\nconst bullet2 = '* Find an **unexpensive** youngster';\r\nconst bullet3 = '- Kill an *old man*';\r\nconst bullet4level2 = '    - Use the `force`';\r\nconst bullet5level2 = '\\t* Destroy Death Star   ';\r\nconst bullets = `${bullet1}\\n${bullet2}\\n${bullet3}\\n${bullet4level2}\\n${bullet5level2}`;\r\n\r\nconst expectedBullet1 = {\r\n    bullet: {level: 1, content: [{text: 'Look for plans'}]},\r\n};\r\nconst expectedBullet2 = {\r\n    bullet: {\r\n        level: 1,\r\n        content: [\r\n            {text: 'Find an '},\r\n            {bold: 'unexpensive'},\r\n            {text: ' youngster'},\r\n        ],\r\n    },\r\n};\r\nconst expectedBullet3 = {\r\n    bullet: {\r\n        level: 1,\r\n        content: [{text: 'Kill an '}, {italic: 'old man'}],\r\n    },\r\n};\r\nconst expectedBullet4level2 = {\r\n    bullet: {\r\n        level: 2,\r\n        content: [{text: 'Use the '}, {code: 'force'}],\r\n    },\r\n};\r\nconst expectedBullet5level2 = {\r\n    bullet: {\r\n        level: 2,\r\n        content: [{text: 'Destroy Death Star   '}],\r\n    },\r\n};\r\n\r\nconst expectedBullets = [\r\n    expectedBullet1,\r\n    expectedBullet2,\r\n    expectedBullet3,\r\n    expectedBullet4level2,\r\n    expectedBullet5level2,\r\n];\r\n\r\nexport default {\r\n    setUp: function(done) {\r\n        done();\r\n    },\r\n\r\n    'Multilines lines paragraph should be accepted': function(test) {\r\n        const block = `${standardParagraph}`;\r\n        testBlock(block);\r\n        const expected = [expectedStandardParagraph];\r\n        test.deepEqual(expected, value, 'bad value for multiline');\r\n        test.done();\r\n    },\r\n\r\n    'Complex Multilines lines should be accepted': function(test) {\r\n        const block = `${complexParagraph}`;\r\n        testBlock(block);\r\n        const expected = [expectedComplexParagraph];\r\n        test.deepEqual(expected, value, 'bad value for complex paragraph');\r\n        test.done();\r\n    },\r\n\r\n    'Read title and its paragraphs': function(test) {\r\n        const block = `${lev1Title}\\n${standardParagraph}\\n\\n${complexParagraph}`;\r\n        testBlock(block);\r\n        const expected = [\r\n            expectedLev1Title,\r\n            expectedStandardParagraph,\r\n            expectedComplexParagraph,\r\n        ];\r\n\r\n        test.deepEqual(expected, value, 'bad value for title & paragraphs');\r\n        test.done();\r\n    },\r\n\r\n    'Read bullets': function(test) {\r\n        //test.expect(2);\r\n        const block = `${bullets}`;\r\n        testBlock(block);\r\n\r\n        //test.ok(accepted, 'should be accepted.');\r\n        test.deepEqual(expectedBullets, value, 'bad value for bullets');\r\n        test.done();\r\n    },\r\n\r\n    'Read title, paragraph & bullets': function(test) {\r\n        //test.expect(2);\r\n        const block = `${lev1Title}\\n${bullets}\\n${standardParagraph}`;\r\n        testBlock(block);\r\n        const expected = [expectedLev1Title]\r\n            .concat(expectedBullets)\r\n            .concat([expectedStandardParagraph]);\r\n        test.deepEqual(expected, value, 'bad value for bullets');\r\n        test.done();\r\n    },\r\n\r\n    'Read multilevel chapters': function(test) {\r\n        const block = `${lev1AltTitle}\\n${bullets}\\n ${lev2AltTitle}\\n ${standardParagraph}\\n  \r\n${otherLev1Title}\\n ${complexParagraph}`;\r\n        testBlock(block);\r\n\r\n        //test.ok(accepted, 'should be accepted.');\r\n        const expected = [expectedLev1Title]\r\n            .concat(expectedBullets)\r\n            .concat([\r\n                expectedLev2Title,\r\n                expectedStandardParagraph,\r\n                expectedOtherLev1Title,\r\n                expectedComplexParagraph,\r\n            ]);\r\n\r\n        test.deepEqual(value, expected, 'bad value for complex text');\r\n        test.done();\r\n    },\r\n\r\n    /*\r\n     'Read multilevel with initial \\n ': function (test) {\r\n     //test.expect(2);\r\n     const block = `\r\n     ${lev1AltTitle}\r\n     ${bullets}\r\n     ${lev2AltTitle}\r\n     ${standardParagraph}\r\n     ${otherLev1Title}\r\n     ${complexParagraph}\r\n     `;\r\n     testBlock(block);\r\n\r\n     //test.ok(accepted, 'should be accepted.');\r\n     const expected= [expectedLev1Title, expectedBullets,\r\n     expectedLev2Title, expectedStandardParagraph,\r\n     expectedOtherLev1Title, expectedComplexParagraph];\r\n\r\n     test.deepEqual(value, expected, 'bad value for complex text');\r\n     test.done();\r\n     }  */\r\n    'Read space code line': function(test) {\r\n        const spaceCodeLine = '        Star Wars is an Atari game';\r\n        const expectedSpaceCodeLine = [{code: 'Star Wars is an Atari game'}];\r\n\r\n        testBlock(spaceCodeLine);\r\n        test.deepEqual(\r\n            value,\r\n            expectedSpaceCodeLine,\r\n            'bad value for space code line'\r\n        );\r\n        test.done();\r\n    },\r\n\r\n    'Read tab code line': function(test) {\r\n        const tabCodeLine = '\\t\\tStar Wars is an Amstrad game';\r\n        const expectedTabCodeLine = [{code: 'Star Wars is an Amstrad game'}];\r\n        testBlock(tabCodeLine);\r\n        test.deepEqual(\r\n            value,\r\n            expectedTabCodeLine,\r\n            'bad value for space code line'\r\n        );\r\n        test.done();\r\n    },\r\n\r\n    'Read tab code blocks': function(test) {\r\n        //test.expect(2);\r\n\r\n        const haskellCode = `\\t\\timport Control.Monad\r\n\\t\\t\r\n\\t\\tsolveTable :: [String] -> [String] -> [(String, Integer)]`;\r\n\r\n        const expectedHaskellCode = [\r\n            {code: 'import Control.Monad'},\r\n            {code: ''},\r\n            {code: 'solveTable :: [String] -> [String] -> [(String, Integer)]'},\r\n        ];\r\n\r\n        testBlock(haskellCode);\r\n        test.deepEqual(value, expectedHaskellCode, 'bad value for bullets');\r\n        test.done();\r\n    },\r\n    'Read space code blocks': function(test) {\r\n        //test.expect(2);\r\n\r\n        // there are 8 spaces for first line, then 10 for the second line\r\n        const spaceCodeBloc = `        Star Wars is an Amstrad game\r\n           Star Wars is an Atari game`;\r\n\r\n        const expectedSpaceCodeBloc = [\r\n            {code: 'Star Wars is an Amstrad game'},\r\n            {code: '   Star Wars is an Atari game'},\r\n        ];\r\n\r\n        testBlock(spaceCodeBloc);\r\n        test.deepEqual(expectedSpaceCodeBloc, value, 'bad value for bullets');\r\n        test.done();\r\n    },\r\n\r\n    /*  commented until I find a proper way to do this\r\n    'parseFile test': function (test) {\r\n        const fileName = path.join(__dirname, 'samples/trivial-test.md');\r\n        const expectedTrivialFile = [{ title: { level: 1, text: 'title1' } }];\r\n        let parserTemp = Parser.parseFile(fileName);\r\n        test.deepEqual(parserTemp.value, expectedTrivialFile, 'bad value for file \"trivial-test.md\"');\r\n        test.done();\r\n    },  */\r\n};\r\n"]}