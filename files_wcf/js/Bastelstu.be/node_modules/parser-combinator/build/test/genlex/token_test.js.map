{"version":3,"sources":["../../../src/test/genlex/token_test.js"],"names":["setUp","done","test","expect","equal","parser","keyword","parse","ofArray","isAccepted","builder","ident","number","string","char"],"mappings":"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","file":"token_test.js","sourcesContent":["import stream from '../../lib/stream/index';\r\nimport token from '../../lib/genlex/token';\r\n\r\n/*\r\n  ======== A Handy Little Nodeunit Reference ========\r\n  https://github.com/caolan/nodeunit\r\n\r\n  Test methods:\r\n    test.expect(numAssertions)\r\n    test.done()\r\n  Test assertions:\r\n    test.ok(value, [message])\r\n    test.equal(actual, expected, [message])\r\n    test.notEqual(actual, expected, [message])\r\n    test.deepEqual(actual, expected, [message])\r\n    test.notDeepEqual(actual, expected, [message])\r\n    test.strictEqual(actual, expected, [message])\r\n    test.notStrictEqual(actual, expected, [message])\r\n    test.throws(block, [error], [message])\r\n    test.doesNotThrow(block, [error], [message])\r\n    test.ifError(value)\r\n*/\r\n\r\nexport default {\r\n    setUp: function(done) {\r\n        done();\r\n    },\r\n\r\n    'expect (literal) to be rejected when empty stream': function(test) {\r\n        test.expect(1);\r\n        // tests here\r\n        test.equal(\r\n            token.parser.keyword.parse(stream.ofArray([]), 0).isAccepted(),\r\n            false,\r\n            'should be rejected.'\r\n        );\r\n        test.done();\r\n    },\r\n\r\n    'expect (keyword) to be accepted': function(test) {\r\n        test.expect(1);\r\n        // tests here\r\n        test.equal(\r\n            token.parser.keyword\r\n                .parse(stream.ofArray([token.builder.keyword('')]), 0)\r\n                .isAccepted(),\r\n            true,\r\n            'should be accepted.'\r\n        );\r\n        test.done();\r\n    },\r\n\r\n    'expect (ident) to be accepted': function(test) {\r\n        test.expect(1);\r\n        // tests here\r\n        test.equal(\r\n            token.parser.ident\r\n                .parse(stream.ofArray([token.builder.ident('')]), 0)\r\n                .isAccepted(),\r\n            true,\r\n            'should be accepted.'\r\n        );\r\n        test.done();\r\n    },\r\n\r\n    'expect (number) to be accepted': function(test) {\r\n        test.expect(1);\r\n        // tests here\r\n        test.equal(\r\n            token.parser.number\r\n                .parse(stream.ofArray([token.builder.number('')]), 0)\r\n                .isAccepted(),\r\n            true,\r\n            'should be accepted.'\r\n        );\r\n        test.done();\r\n    },\r\n\r\n    'expect (string) to be accepted': function(test) {\r\n        test.expect(1);\r\n        // tests here\r\n        test.equal(\r\n            token.parser.string\r\n                .parse(stream.ofArray([token.builder.string('')]), 0)\r\n                .isAccepted(),\r\n            true,\r\n            'should be accepted.'\r\n        );\r\n        test.done();\r\n    },\r\n\r\n    'expect (char) to be accepted': function(test) {\r\n        test.expect(1);\r\n        // tests here\r\n        test.equal(\r\n            token.parser.char\r\n                .parse(stream.ofArray([token.builder.char('')]), 0)\r\n                .isAccepted(),\r\n            true,\r\n            'should be accepted.'\r\n        );\r\n        test.done();\r\n    },\r\n\r\n    'expect (keyword) to be rejected': function(test) {\r\n        test.expect(1);\r\n        // tests here\r\n        test.equal(\r\n            token.parser.keyword\r\n                .parse(stream.ofArray([token.builder.ident('')]), 0)\r\n                .isAccepted(),\r\n            false,\r\n            'should be rejected.'\r\n        );\r\n        test.done();\r\n    },\r\n\r\n    'expect (ident) to be rejected': function(test) {\r\n        test.expect(1);\r\n        // tests here\r\n        test.equal(\r\n            token.parser.ident\r\n                .parse(stream.ofArray([token.builder.number('')]), 0)\r\n                .isAccepted(),\r\n            false,\r\n            'should be rejected.'\r\n        );\r\n        test.done();\r\n    },\r\n\r\n    'expect (number) to be rejected': function(test) {\r\n        test.expect(1);\r\n        // tests here\r\n        test.equal(\r\n            token.parser.number\r\n                .parse(stream.ofArray([token.builder.string('')]), 0)\r\n                .isAccepted(),\r\n            false,\r\n            'should be rejected.'\r\n        );\r\n        test.done();\r\n    },\r\n\r\n    'expect (string) to be rejected': function(test) {\r\n        test.expect(1);\r\n        // tests here\r\n        test.equal(\r\n            token.parser.string\r\n                .parse(stream.ofArray([token.builder.char('')]), 0)\r\n                .isAccepted(),\r\n            false,\r\n            'should be rejected.'\r\n        );\r\n        test.done();\r\n    },\r\n\r\n    'expect (char) to be rejected': function(test) {\r\n        test.expect(1);\r\n        // tests here\r\n        test.equal(\r\n            token.parser.char\r\n                .parse(stream.ofArray([token.builder.keyword('')]), 0)\r\n                .isAccepted(),\r\n            false,\r\n            'should be rejected.'\r\n        );\r\n        test.done();\r\n    },\r\n};\r\n"]}