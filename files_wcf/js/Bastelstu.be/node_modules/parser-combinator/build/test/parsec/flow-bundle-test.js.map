{"version":3,"sources":["../../../src/test/parsec/flow-bundle-test.js"],"names":["value","undefined","accepted","testParser","parser","string","myStream","ofString","parsing","parse","isAccepted","setUp","done","test","char","then","deepEqual","any","rep","eos","thenReturns","ok"],"mappings":";;;;;;AAAA;;;;AACA;;;;AAEA,IAAIA,QAAQC,SAAZ;AACA,IAAIC,WAAWD,SAAf;;AAEA,SAASE,UAAT,CAAoBC,MAApB,EAA4BC,MAA5B,EAAoC;AAChC,QAAIC,WAAW,gBAAOC,QAAP,CAAgBF,MAAhB,CAAf;AACA,QAAIG,UAAUJ,OAAOK,KAAP,CAAaH,QAAb,CAAd;;AAEAN,YAAQQ,QAAQR,KAAhB;AACAE,eAAWM,QAAQE,UAAR,EAAX;AACH;;kBAEc;AACXC,WAAO,eAASC,IAAT,EAAe;AAClBA;AACH,KAHU;;AAKX,sCAAkC,mCAASC,IAAT,EAAe;AAC7C,YAAMR,SAAS,QAAf;AACA;AACA,YAAMD,SAAS,UAAEU,IAAF,CAAO,GAAP,EACVC,IADU,CACL,UAAED,IAAF,CAAO,GAAP,CADK,EAEVC,IAFU,CAEL,UAAED,IAAF,CAAO,GAAP,CAFK,EAGVC,IAHU,CAGL,UAAEV,MAAF,CAAS,KAAT,CAHK,CAAf;AAIAF,mBAAWC,MAAX,EAAmBC,MAAnB;AACAQ,aAAKG,SAAL,CAAehB,KAAf,EAAsB,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,KAAhB,CAAtB,EAA8C,uBAA9C;AACAa,aAAKD,IAAL;AACH,KAfU;;AAiBX,iDAA6C,4CAASC,IAAT,EAAe;AACxD,YAAMR,SAAS,MAAf;AACA;AACA,YAAMD,SAAS,UAAEa,GAAF,CAAMC,GAAN,GAAYH,IAAZ,CAAiB,UAAEI,GAAnB,EAAwBC,WAAxB,CAAoC,EAApC,CAAf;AACAjB,mBAAWC,MAAX,EAAmBC,MAAnB;AACAQ,aAAKQ,EAAL,CAAQnB,QAAR;AACAW,aAAKG,SAAL,CAAehB,KAAf,EAAsB,EAAtB,EAA0B,uBAA1B;AACAa,aAAKD,IAAL;AACH;AAzBU,C","file":"flow-bundle-test.js","sourcesContent":["import stream from '../../lib/stream/index';\r\nimport {F, C} from '../../lib/parsec/index';\r\n\r\nlet value = undefined;\r\nlet accepted = undefined;\r\n\r\nfunction testParser(parser, string) {\r\n    let myStream = stream.ofString(string);\r\n    let parsing = parser.parse(myStream);\r\n\r\n    value = parsing.value;\r\n    accepted = parsing.isAccepted();\r\n}\r\n\r\nexport default {\r\n    setUp: function(done) {\r\n        done();\r\n    },\r\n\r\n    'expect flatten result to be ok': function(test) {\r\n        const string = 'foobar';\r\n        // tests here\r\n        const parser = C.char('f')\r\n            .then(C.char('o'))\r\n            .then(C.char('o'))\r\n            .then(C.string('bar'));\r\n        testParser(parser, string);\r\n        test.deepEqual(value, ['f', 'o', 'o', 'bar'], 'flatten result not ok');\r\n        test.done();\r\n    },\r\n\r\n    'expect flatten result to be ok when empty': function(test) {\r\n        const string = 'some';\r\n        // tests here\r\n        const parser = F.any.rep().then(F.eos).thenReturns([]);\r\n        testParser(parser, string);\r\n        test.ok(accepted);\r\n        test.deepEqual(value, [], 'flatten result not ok');\r\n        test.done();\r\n    },\r\n};\r\n"]}