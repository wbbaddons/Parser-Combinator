{"version":3,"sources":["../../../src/test/parsec/number-bundle-test.js"],"names":["value","undefined","testParser","parser","string","myStream","ofString","parsing","parse","setUp","done","test","integer","equal","numberLiteral","digits"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AAEA,IAAIA,QAAQC,SAAZ;;AAEA,SAASC,UAAT,CAAoBC,MAApB,EAA4BC,MAA5B,EAAoC;AAChC,QAAIC,WAAW,gBAAOC,QAAP,CAAgBF,MAAhB,CAAf;AACA,QAAIG,UAAUJ,OAAOK,KAAP,CAAaH,QAAb,CAAd;;AAEAL,YAAQO,QAAQP,KAAhB;AACH;;kBAEc;AACXS,WAAO,eAASC,IAAT,EAAe;AAClBA;AACH,KAHU;;AAKX,iCAA6B,8BAASC,IAAT,EAAe;AACxC,YAAMP,SAAS,KAAf;AACA;AACA,YAAMD,SAAS,UAAES,OAAjB;AACAV,mBAAWC,MAAX,EAAmBC,MAAnB;AACAO,aAAKE,KAAL,CAAWb,KAAX,EAAkB,CAAlB,EAAqB,WAArB;AACAW,aAAKD,IAAL;AACH,KAZU;;AAcX,2CAAuC,sCAASC,IAAT,EAAe;AAClD,YAAMP,SAAS,MAAf;AACA;AACA,YAAMD,SAAS,UAAES,OAAjB;AACAV,mBAAWC,MAAX,EAAmBC,MAAnB;AACAO,aAAKE,KAAL,CAAWb,KAAX,EAAkB,CAAC,CAAnB,EAAsB,oBAAtB;AACAW,aAAKD,IAAL;AACH,KArBU;;AAuBX,kDAA8C,8CAASC,IAAT,EAAe;AACzD,YAAMP,SAAS,QAAf;AACA;AACA,YAAMD,SAAS,UAAEW,aAAjB;AACAZ,mBAAWC,MAAX,EAAmBC,MAAnB;AACAO,aAAKE,KAAL,CAAWb,KAAX,EAAkB,IAAlB,EAAwB,eAAxB;AACAW,aAAKD,IAAL;AACH,KA9BU;;AAgCX,0DAAsD,kDAASC,IAAT,EAAe;AACjE,YAAMP,SAAS,KAAf;AACA;AACA,YAAMD,SAAS,UAAEY,MAAjB;AACAb,mBAAWC,MAAX,EAAmBC,MAAnB;AACAO,aAAKE,KAAL,QAAkBb,KAAlB,yCAAkBA,KAAlB,GAAyB,QAAzB,EAAmC,6BAAnC;AACAW,aAAKE,KAAL,CAAWb,KAAX,EAAkB,KAAlB,EAAyB,8BAAzB;AACAW,aAAKD,IAAL;AACH;AAxCU,C","file":"number-bundle-test.js","sourcesContent":["import stream from '../../lib/stream/index';\r\nimport {N} from '../../lib/parsec/index';\r\n\r\nlet value = undefined;\r\n\r\nfunction testParser(parser, string) {\r\n    let myStream = stream.ofString(string);\r\n    let parsing = parser.parse(myStream);\r\n\r\n    value = parsing.value;\r\n}\r\n\r\nexport default {\r\n    setUp: function(done) {\r\n        done();\r\n    },\r\n\r\n    'expect N.integer to be ok': function(test) {\r\n        const string = '007';\r\n        // tests here\r\n        const parser = N.integer;\r\n        testParser(parser, string);\r\n        test.equal(value, 7, 'N.integer');\r\n        test.done();\r\n    },\r\n\r\n    'expect N.integer with sign to be ok': function(test) {\r\n        const string = '-007';\r\n        // tests here\r\n        const parser = N.integer;\r\n        testParser(parser, string);\r\n        test.equal(value, -7, 'negative N.integer');\r\n        test.done();\r\n    },\r\n\r\n    'expect numberLiteral without sign to be ok': function(test) {\r\n        const string = '007.12';\r\n        // tests here\r\n        const parser = N.numberLiteral;\r\n        testParser(parser, string);\r\n        test.equal(value, 7.12, 'numberLiteral');\r\n        test.done();\r\n    },\r\n\r\n    'expect many digits to be joined and to be a string': function(test) {\r\n        const string = '007';\r\n        // tests here\r\n        const parser = N.digits;\r\n        testParser(parser, string);\r\n        test.equal(typeof value, 'string', 'N.digits should be a string');\r\n        test.equal(value, '007', 'N.digits returns a bad value');\r\n        test.done();\r\n    },\r\n};\r\n"]}