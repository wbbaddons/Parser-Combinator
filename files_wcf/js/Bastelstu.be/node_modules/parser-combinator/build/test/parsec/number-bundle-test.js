'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _index = require('../../lib/stream/index');

var _index2 = _interopRequireDefault(_index);

var _index3 = require('../../lib/parsec/index');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var value = undefined;

function testParser(parser, string) {
    var myStream = _index2.default.ofString(string);
    var parsing = parser.parse(myStream);

    value = parsing.value;
}

exports.default = {
    setUp: function setUp(done) {
        done();
    },

    'expect N.integer to be ok': function expectNIntegerToBeOk(test) {
        var string = '007';
        // tests here
        var parser = _index3.N.integer;
        testParser(parser, string);
        test.equal(value, 7, 'N.integer');
        test.done();
    },

    'expect N.integer with sign to be ok': function expectNIntegerWithSignToBeOk(test) {
        var string = '-007';
        // tests here
        var parser = _index3.N.integer;
        testParser(parser, string);
        test.equal(value, -7, 'negative N.integer');
        test.done();
    },

    'expect numberLiteral without sign to be ok': function expectNumberLiteralWithoutSignToBeOk(test) {
        var string = '007.12';
        // tests here
        var parser = _index3.N.numberLiteral;
        testParser(parser, string);
        test.equal(value, 7.12, 'numberLiteral');
        test.done();
    },

    'expect many digits to be joined and to be a string': function expectManyDigitsToBeJoinedAndToBeAString(test) {
        var string = '007';
        // tests here
        var parser = _index3.N.digits;
        testParser(parser, string);
        test.equal(typeof value === 'undefined' ? 'undefined' : _typeof(value), 'string', 'N.digits should be a string');
        test.equal(value, '007', 'N.digits returns a bad value');
        test.done();
    }
};
//# sourceMappingURL=number-bundle-test.js.map