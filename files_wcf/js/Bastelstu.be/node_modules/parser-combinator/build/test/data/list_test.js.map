{"version":3,"sources":["../../../src/test/data/list_test.js"],"names":["setUp","done","test","expect","equal","isEmpty","filter","i","deepEqual","map","v","flatmap","array","join","myList","add","size"],"mappings":"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","file":"list_test.js","sourcesContent":["import list from '../../lib/data/list';\r\n\r\n/*\r\n ======== A Handy Little Nodeunit Reference ========\r\n https://github.com/caolan/nodeunit\r\n\r\n Test methods:\r\n test.expect(numAssertions)\r\n test.done()\r\n Test assertions:\r\n test.ok(value, [message])\r\n test.equal(actual, expected, [message])\r\n test.notEqual(actual, expected, [message])\r\n test.deepEqual(actual, expected, [message])\r\n test.notDeepEqual(actual, expected, [message])\r\n test.strictEqual(actual, expected, [message])\r\n test.notStrictEqual(actual, expected, [message])\r\n test.throws(block, [error], [message])\r\n test.doesNotThrow(block, [error], [message])\r\n test.ifError(value)\r\n */\r\n\r\nexport default {\r\n    setUp: function(done) {\r\n        done();\r\n    },\r\n\r\n    'empty list': function(test) {\r\n        test.expect(1);\r\n        // tests here\r\n        test.equal(list().isEmpty(), true, 'should be empty.');\r\n        test.done();\r\n    },\r\n\r\n    'non empty list': function(test) {\r\n        test.expect(1);\r\n        // tests here\r\n        test.equal(list(1).isEmpty(), false, 'should not be empty.');\r\n        test.done();\r\n    },\r\n\r\n    'filtering elements returns empty list': function(test) {\r\n        test.expect(1);\r\n        // tests here\r\n        test.equal(\r\n            list(1).filter(i => i != 1).isEmpty(),\r\n            true,\r\n            'should be empty.'\r\n        );\r\n        test.done();\r\n    },\r\n\r\n    'filtering elements returns same list': function(test) {\r\n        test.expect(1);\r\n        // tests here\r\n        test.equal(\r\n            list(1).filter(i => i == 1).isEmpty(),\r\n            false,\r\n            'should not be empty.'\r\n        );\r\n        test.done();\r\n    },\r\n\r\n    'map integer list': function(test) {\r\n        test.expect(1);\r\n        // tests here\r\n        test.deepEqual(\r\n            list(1, 2, 3).map(function(v) {\r\n                return v + 1;\r\n            }),\r\n            list(2, 3, 4),\r\n            'should map.'\r\n        );\r\n        test.done();\r\n    },\r\n\r\n    'flatmap integer list': function(test) {\r\n        test.expect(1);\r\n        // tests here\r\n        test.deepEqual(\r\n            list(1, 2, 3).flatmap(function(v) {\r\n                return list(v, v + 1);\r\n            }),\r\n            list(1, 2, 2, 3, 3, 4),\r\n            'should flatmap.'\r\n        );\r\n        test.done();\r\n    },\r\n\r\n    'retrieve non empty array': function(test) {\r\n        test.expect(1);\r\n        // tests here\r\n        test.deepEqual(list(1, 2).array(), [1, 2], 'should not be empty.');\r\n        test.done();\r\n    },\r\n\r\n    'retrieve joined characters array': function(test) {\r\n        test.expect(1);\r\n        // tests here\r\n        test.deepEqual(list('1', '2').join(''), '12', 'should be \"12\".');\r\n        test.done();\r\n    },\r\n    'add element': function(test) {\r\n        test.expect(1);\r\n        // tests here\r\n        const myList = list(1, 2);\r\n\r\n        test.deepEqual([1, 2, 3], myList.add(3).array());\r\n\r\n        test.done();\r\n    },\r\n    'list size': function(test) {\r\n        test.expect(1);\r\n        // tests here\r\n        const myList = list(1, 2, 3, 4);\r\n\r\n        test.equal(4, myList.size());\r\n\r\n        test.done();\r\n    },\r\n};\r\n"]}