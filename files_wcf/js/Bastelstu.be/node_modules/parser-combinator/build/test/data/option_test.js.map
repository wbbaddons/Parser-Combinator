{"version":3,"sources":["../../../src/test/data/option_test.js"],"names":["setUp","done","test","expect","equal","none","isPresent","some","map","a","get","flatmap","orElse","orLazyElse","filter","v"],"mappings":";;;;;;AAAA;;;;;;AAEA;;;;;;;;;;;;;;;;;;;;kBAoBe;AACXA,WAAO,eAASC,IAAT,EAAe;AAClBA;AACH,KAHU;;AAKX,oBAAgB,qBAASC,IAAT,EAAe;AAC3BA,aAAKC,MAAL,CAAY,CAAZ;AACA;AACAD,aAAKE,KAAL,CAAW,iBAAOC,IAAP,GAAcC,SAAd,EAAX,EAAsC,KAAtC,EAA6C,yBAA7C;AACAJ,aAAKD,IAAL;AACH,KAVU;;AAYX,wBAAoB,wBAASC,IAAT,EAAe;AAC/BA,aAAKC,MAAL,CAAY,CAAZ;AACA;AACAD,aAAKE,KAAL,CACI,iBAAOG,IAAP,CAAY,EAAZ,EAAgBD,SAAhB,EADJ,EAEI,IAFJ,EAGI,6BAHJ;AAKAJ,aAAKD,IAAL;AACH,KArBU;;AAuBX,2BAAuB,2BAASC,IAAT,EAAe;AAClCA,aAAKC,MAAL,CAAY,CAAZ;AACA;AACAD,aAAKE,KAAL,CACI,iBACKC,IADL,GAEKG,GAFL,CAES,UAASC,CAAT,EAAY;AACb,mBAAOA,CAAP;AACH,SAJL,EAKKH,SALL,EADJ,EAOI,KAPJ,EAQI,yBARJ;AAUAJ,aAAKD,IAAL;AACH,KArCU;;AAuCX,+BAA2B,8BAASC,IAAT,EAAe;AACtCA,aAAKC,MAAL,CAAY,CAAZ;AACA;AACAD,aAAKE,KAAL,CACI,iBACKG,IADL,CACU,EADV,EAEKC,GAFL,CAES,UAASC,CAAT,EAAY;AACb,mBAAOA,CAAP;AACH,SAJL,EAKKC,GALL,EADJ,EAOI,EAPJ,EAQI,6BARJ;AAUAR,aAAKD,IAAL;AACH,KArDU;;AAuDX,8CAA0C,0CAASC,IAAT,EAAe;AACrDA,aAAKC,MAAL,CAAY,CAAZ;AACA;AACAD,aAAKE,KAAL,CACI,iBACKG,IADL,CACU,EADV,EAEKI,OAFL,CAEa,UAASF,CAAT,EAAY;AACjB,mBAAO,iBAAOF,IAAP,CAAYE,CAAZ,CAAP;AACH,SAJL,EAKKC,GALL,EADJ,EAOI,EAPJ,EAQI,6BARJ;AAUAR,aAAKD,IAAL;AACH,KArEU;;AAuEX,gCAA4B,+BAASC,IAAT,EAAe;AACvCA,aAAKC,MAAL,CAAY,CAAZ;AACA;AACAD,aAAKE,KAAL,CACI,iBACKG,IADL,GAEKI,OAFL,CAEa,UAASF,CAAT,EAAY;AACjB,mBAAOA,CAAP;AACH,SAJL,EAKKH,SALL,EADJ,EAOI,KAPJ,EAQI,yBARJ;AAUAJ,aAAKD,IAAL;AACH,KArFU;;AAuFX,4BAAwB,2BAASC,IAAT,EAAe;AACnCA,aAAKC,MAAL,CAAY,CAAZ;AACA;AACAD,aAAKE,KAAL,CAAW,iBAAOC,IAAP,GAAcO,MAAd,CAAqB,EAArB,CAAX,EAAqC,EAArC,EAAyC,yBAAzC;AACAV,aAAKD,IAAL;AACH,KA5FU;;AA8FX,gCAA4B,8BAASC,IAAT,EAAe;AACvCA,aAAKC,MAAL,CAAY,CAAZ;AACA;AACAD,aAAKE,KAAL,CACI,iBAAOG,IAAP,CAAY,EAAZ,EAAgBK,MAAhB,CAAuB,EAAvB,CADJ,EAEI,EAFJ,EAGI,6BAHJ;AAKAV,aAAKD,IAAL;AACH,KAvGU;;AAyGX,iCAA6B,+BAASC,IAAT,EAAe;AACxCA,aAAKC,MAAL,CAAY,CAAZ;AACA;AACAD,aAAKE,KAAL,CACI,iBAAOC,IAAP,GAAcQ,UAAd,CAAyB,YAAW;AAChC,mBAAO,EAAP;AACH,SAFD,CADJ,EAII,EAJJ,EAKI,yBALJ;AAOAX,aAAKD,IAAL;AACH,KApHU;;AAsHX,qCAAiC,kCAASC,IAAT,EAAe;AAC5CA,aAAKC,MAAL,CAAY,CAAZ;AACA;AACAD,aAAKE,KAAL,CACI,iBAAOG,IAAP,CAAY,EAAZ,EAAgBM,UAAhB,CAA2B,YAAW;AAClC,mBAAO,EAAP;AACH,SAFD,CADJ,EAII,EAJJ,EAKI,6BALJ;AAOAX,aAAKD,IAAL;AACH,KAjIU;;AAmIX,2BAAuB,2BAASC,IAAT,EAAe;AAClCA,aAAKC,MAAL,CAAY,CAAZ;AACA;AACAD,aAAKE,KAAL,CACI,iBACKC,IADL,GAEKS,MAFL,CAEY,UAASC,CAAT,EAAY;AAChB,mBAAOA,MAAM,CAAb;AACH,SAJL,EAKKT,SALL,EADJ,EAOI,KAPJ,EAQI,yBARJ;AAUAJ,aAAKD,IAAL;AACH,KAjJU;;AAmJX,+BAA2B,8BAASC,IAAT,EAAe;AACtCA,aAAKC,MAAL,CAAY,CAAZ;AACA;AACAD,aAAKE,KAAL,CACI,iBACKG,IADL,CACU,EADV,EAEKO,MAFL,CAEY,UAASC,CAAT,EAAY;AAChB,mBAAOA,MAAM,EAAb;AACH,SAJL,EAKKL,GALL,EADJ,EAOI,EAPJ,EAQI,6BARJ;AAUAR,aAAKD,IAAL;AACH,KAjKU;;AAmKX,qCAAiC,mCAASC,IAAT,EAAe;AAC5CA,aAAKC,MAAL,CAAY,CAAZ;AACA;AACAD,aAAKE,KAAL,CACI,iBACKG,IADL,CACU,EADV,EAEKO,MAFL,CAEY,UAASC,CAAT,EAAY;AAChB,mBAAOA,MAAM,EAAb;AACH,SAJL,EAKKT,SALL,EADJ,EAOI,KAPJ,EAQI,yBARJ;AAUAJ,aAAKD,IAAL;AACH;AAjLU,C","file":"option_test.js","sourcesContent":["import option from '../../lib/data/option';\r\n\r\n/*\r\n  ======== A Handy Little Nodeunit Reference ========\r\n  https://github.com/caolan/nodeunit\r\n\r\n  Test methods:\r\n    test.expect(numAssertions)\r\n    test.done()\r\n  Test assertions:\r\n    test.ok(value, [message])\r\n    test.equal(actual, expected, [message])\r\n    test.notEqual(actual, expected, [message])\r\n    test.deepEqual(actual, expected, [message])\r\n    test.notDeepEqual(actual, expected, [message])\r\n    test.strictEqual(actual, expected, [message])\r\n    test.notStrictEqual(actual, expected, [message])\r\n    test.throws(block, [error], [message])\r\n    test.doesNotThrow(block, [error], [message])\r\n    test.ifError(value)\r\n*/\r\n\r\nexport default {\r\n    setUp: function(done) {\r\n        done();\r\n    },\r\n\r\n    'option empty': function(test) {\r\n        test.expect(1);\r\n        // tests here\r\n        test.equal(option.none().isPresent(), false, 'should be empty option.');\r\n        test.done();\r\n    },\r\n\r\n    'option not empty': function(test) {\r\n        test.expect(1);\r\n        // tests here\r\n        test.equal(\r\n            option.some(12).isPresent(),\r\n            true,\r\n            'should not be empty option.'\r\n        );\r\n        test.done();\r\n    },\r\n\r\n    'option empty mapped': function(test) {\r\n        test.expect(1);\r\n        // tests here\r\n        test.equal(\r\n            option\r\n                .none()\r\n                .map(function(a) {\r\n                    return a;\r\n                })\r\n                .isPresent(),\r\n            false,\r\n            'should be empty option.'\r\n        );\r\n        test.done();\r\n    },\r\n\r\n    'option not empty mapped': function(test) {\r\n        test.expect(1);\r\n        // tests here\r\n        test.equal(\r\n            option\r\n                .some(12)\r\n                .map(function(a) {\r\n                    return a;\r\n                })\r\n                .get(),\r\n            12,\r\n            'should not be empty option.'\r\n        );\r\n        test.done();\r\n    },\r\n\r\n    'option not empty flat mapped to option': function(test) {\r\n        test.expect(1);\r\n        // tests here\r\n        test.equal(\r\n            option\r\n                .some(12)\r\n                .flatmap(function(a) {\r\n                    return option.some(a);\r\n                })\r\n                .get(),\r\n            12,\r\n            'should not be empty option.'\r\n        );\r\n        test.done();\r\n    },\r\n\r\n    'option empty flat mapped': function(test) {\r\n        test.expect(1);\r\n        // tests here\r\n        test.equal(\r\n            option\r\n                .some()\r\n                .flatmap(function(a) {\r\n                    return a;\r\n                })\r\n                .isPresent(),\r\n            false,\r\n            'should be empty option.'\r\n        );\r\n        test.done();\r\n    },\r\n\r\n    'option empty or else': function(test) {\r\n        test.expect(1);\r\n        // tests here\r\n        test.equal(option.none().orElse(12), 12, 'should be empty option.');\r\n        test.done();\r\n    },\r\n\r\n    'option not empty or else': function(test) {\r\n        test.expect(1);\r\n        // tests here\r\n        test.equal(\r\n            option.some(12).orElse(14),\r\n            12,\r\n            'should be not empty option.'\r\n        );\r\n        test.done();\r\n    },\r\n\r\n    'option empty or lazy else': function(test) {\r\n        test.expect(1);\r\n        // tests here\r\n        test.equal(\r\n            option.none().orLazyElse(function() {\r\n                return 12;\r\n            }),\r\n            12,\r\n            'should be empty option.'\r\n        );\r\n        test.done();\r\n    },\r\n\r\n    'option not empty or lazy else': function(test) {\r\n        test.expect(1);\r\n        // tests here\r\n        test.equal(\r\n            option.some(12).orLazyElse(function() {\r\n                return 14;\r\n            }),\r\n            12,\r\n            'should be not empty option.'\r\n        );\r\n        test.done();\r\n    },\r\n\r\n    'option empty filter': function(test) {\r\n        test.expect(1);\r\n        // tests here\r\n        test.equal(\r\n            option\r\n                .none()\r\n                .filter(function(v) {\r\n                    return v === 1;\r\n                })\r\n                .isPresent(),\r\n            false,\r\n            'should be empty option.'\r\n        );\r\n        test.done();\r\n    },\r\n\r\n    'option not empty filter': function(test) {\r\n        test.expect(1);\r\n        // tests here\r\n        test.equal(\r\n            option\r\n                .some(12)\r\n                .filter(function(v) {\r\n                    return v === 12;\r\n                })\r\n                .get(),\r\n            12,\r\n            'should be not empty option.'\r\n        );\r\n        test.done();\r\n    },\r\n\r\n    'option not empty wrong filter': function(test) {\r\n        test.expect(1);\r\n        // tests here\r\n        test.equal(\r\n            option\r\n                .some(12)\r\n                .filter(function(v) {\r\n                    return v === 13;\r\n                })\r\n                .isPresent(),\r\n            false,\r\n            'should be empty option.'\r\n        );\r\n        test.done();\r\n    },\r\n};\r\n"]}