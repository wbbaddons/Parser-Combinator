{"version":3,"sources":["../../../../src/lib/standard/markdown/title-parser.js"],"names":["sharps","char","rep","map","string","array","length","white","charIn","equals","then","rawTextUntil","eol","thenReturns","minuses","titleSharp","thenLeft","or","eos","title","level","text","titleLine","blank","thenRight","rawTextUntilChar","parseTitle","line","offset","parse","ofString"],"mappings":";;;;;;AAUA;;AACA;;;;AACA;;;;;;AAEA,SAASA,MAAT,GAAkB;AACd,WAAO,SAAEC,IAAF,CAAO,GAAP,EAAYC,GAAZ,GAAkBC,GAAlB,CAAsB;AAAA,eAAUC,OAAOC,KAAP,GAAeC,MAAzB;AAAA,KAAtB,CAAP;AACH;;AAED;AAlBA;;;AAGA;;;;;;;AAgBA,SAASC,KAAT,GAAiB;AACb,WAAO,SAAEC,MAAF,CAAS,SAAT,EAAsBN,GAAtB,EAAP;AACH;;AAED,SAASO,MAAT,GAAkB;AACd,WAAO,SAAEL,MAAF,CAAS,KAAT,EACFM,IADE,CACG,gBAAEC,YAAF,CAAe,gBAAEC,GAAF,EAAf,CADH,EAEFF,IAFE,CAEG,gBAAEE,GAAF,EAFH,EAGFC,WAHE,CAGU,CAHV,CAAP,CADc,CAIO;AACxB;;AAED,SAASC,OAAT,GAAmB;AACf,WAAO,SAAEV,MAAF,CAAS,KAAT,EACFM,IADE,CACG,gBAAEC,YAAF,CAAe,gBAAEC,GAAF,EAAf,CADH,EAEFF,IAFE,CAEG,gBAAEE,GAAF,EAFH,EAGFC,WAHE,CAGU,CAHV,CAAP,CADe,CAIM;AACxB;;AAED,SAASE,UAAT,GAAsB;AAClB,WAAOf,SACFgB,QADE,CACOT,OADP,EAEFG,IAFE,CAEG,gBAAEC,YAAF,CAAe,gBAAEC,GAAF,EAAf,CAFH,EAGFI,QAHE,CAGO,gBAAEJ,GAAF,GAAQK,EAAR,CAAW,SAAEC,GAAb,CAHP,EAIFf,GAJE,CAIE;AAAA,eAAU;AACXgB,mBAAO;AACHC,uBAAOf,MAAM,CAAN,CADJ;AAEHgB,sBAAMhB,MAAM,CAAN;AAFH;AADI,SAAV;AAAA,KAJF,CAAP;AAUH;;AAED,SAASiB,SAAT,GAAqB;AACjB,WAAO,gBAAEC,KAAF,GAAUC,SAAV,CACH,gBAAEC,gBAAF,CAAmB,MAAnB,EACKT,QADL,CACc,gBAAEJ,GAAF,EADd,EAEKF,IAFL,CAEUD,SAASQ,EAAT,CAAYH,SAAZ,CAFV,EAGKX,GAHL,CAGS;AAAA,eAAU;AACXgB,mBAAO;AACHC,uBAAOf,MAAM,CAAN,CADJ;AAEHgB,sBAAMhB,MAAM,CAAN;AAFH;AADI,SAAV;AAAA,KAHT,CADG,CAAP;AAWH;;AAED,SAASc,KAAT,GAAiB;AACb,WAAOJ,aAAaE,EAAb,CAAgBK,WAAhB,CAAP;AACH;;AAED,SAASI,UAAT,CAAoBC,IAApB,EAAsC;AAAA,QAAZC,MAAY,uEAAH,CAAG;;AAClC,WAAOT,QAAQU,KAAR,CAAc,gBAAOC,QAAP,CAAgBH,IAAhB,CAAd,EAAqCC,MAArC,CAAP;AACH;;kBAEc;AACXN,wBADW;AAEXP,0BAFW;AAGXI,gBAHW;AAIXU,SAJW,iBAILF,IAJK,EAIC;AACR,eAAOD,WAAWC,IAAX,EAAiB,CAAjB,CAAP;AACH;AANU,C;;AASf","file":"title-parser.js","sourcesContent":["/**\r\n * Created by Simon on 14/12/2016.\r\n */\r\n/*\r\n * This module try parse a title. The folowing will be recognised as titles:\r\n * \"#foo\\n\"  \"##foo\\n\"  \"foo\\n===\"  \"foo\\n---\"  \"##########     foo     \\n\"\r\n *\r\n * Limits and axiomes\r\n * A \\n in the markdown source ends the parsing of a title.  #foo\\nbar  -> {title:foo},{text:bar}\r\n */\r\nimport {F, C} from '../../parsec/index';\r\nimport stream from '../../stream/index';\r\nimport T from './token';\r\n\r\nfunction sharps() {\r\n    return C.char('#').rep().map(string => string.array().length);\r\n}\r\n\r\n// a white is a sequence of at least one space, tab or non-breakable space\r\nfunction white() {\r\n    return C.charIn(' \\t\\u00A0').rep();\r\n}\r\n\r\nfunction equals() {\r\n    return C.string('===')\r\n        .then(T.rawTextUntil(T.eol()))\r\n        .then(T.eol())\r\n        .thenReturns(1); // this mean a level 1 title\r\n}\r\n\r\nfunction minuses() {\r\n    return C.string('---')\r\n        .then(T.rawTextUntil(T.eol()))\r\n        .then(T.eol())\r\n        .thenReturns(2); // this mean a level 2 title\r\n}\r\n\r\nfunction titleSharp() {\r\n    return sharps()\r\n        .thenLeft(white())\r\n        .then(T.rawTextUntil(T.eol()))\r\n        .thenLeft(T.eol().or(F.eos))\r\n        .map(array => ({\r\n            title: {\r\n                level: array[0],\r\n                text: array[1],\r\n            },\r\n        }));\r\n}\r\n\r\nfunction titleLine() {\r\n    return T.blank().thenRight(\r\n        T.rawTextUntilChar('\\r\\n')\r\n            .thenLeft(T.eol())\r\n            .then(equals().or(minuses()))\r\n            .map(array => ({\r\n                title: {\r\n                    level: array[1],\r\n                    text: array[0],\r\n                },\r\n            }))\r\n    );\r\n}\r\n\r\nfunction title() {\r\n    return titleSharp().or(titleLine());\r\n}\r\n\r\nfunction parseTitle(line, offset = 0) {\r\n    return title().parse(stream.ofString(line), offset);\r\n}\r\n\r\nexport default {\r\n    titleLine,\r\n    titleSharp,\r\n    title,\r\n    parse(line) {\r\n        return parseTitle(line, 0);\r\n    },\r\n};\r\n\r\n/*  SHORTCOMINGS :\r\n* Can not have formatted text in a title.  \"##2*3*4 = 24\\n\" will display \"2*3*4 = 24\"\r\n */\r\n"]}