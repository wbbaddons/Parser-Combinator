{"version":3,"sources":["../../../src/lib/data/option.js"],"names":["Option","value","undefined","bindCall","isPresent","someOrNone","f","none","some"],"mappings":";;;;;;;;;;AAAA;;;;;;;;AAQA;;;IAGMA,M;AACF,oBAAYC,KAAZ,EAAmB;AAAA;;AACf,aAAKA,KAAL,GAAaA,KAAb;AACH;;;;oCAEW;AACR,mBAAO,KAAKA,KAAL,KAAe,IAAf,IAAuB,KAAKA,KAAL,KAAeC,SAA7C;AACH;;;4BAEGC,Q,EAAU;AACV,gBAAI,KAAKC,SAAL,EAAJ,EAAsB;AAClB,uBAAOC,WAAWF,SAAS,KAAKF,KAAd,CAAX,CAAP;AACH,aAFD,MAEO;AACH,uBAAO,IAAP;AACH;AACJ;;;gCAEOE,Q,EAAU;AACd,gBAAI,KAAKC,SAAL,EAAJ,EAAsB;AAClB,uBAAOD,SAAS,KAAKF,KAAd,CAAP;AACH,aAFD,MAEO;AACH,uBAAO,IAAP;AACH;AACJ;;;+BAEMK,C,EAAG;AACN,gBAAI,KAAKF,SAAL,MAAoBE,EAAE,KAAKL,KAAP,CAAxB,EAAuC;AACnC,uBAAO,IAAP;AACH;;AAED;AACA;AACA,mBAAO,IAAID,MAAJ,EAAP;AACH;;;8BAEK;AACF,mBAAO,KAAKC,KAAZ;AACH;;;+BAEMA,K,EAAO;AACV,gBAAI,KAAKG,SAAL,EAAJ,EAAsB;AAClB,uBAAO,KAAKH,KAAZ;AACH,aAFD,MAEO;AACH,uBAAOA,KAAP;AACH;AACJ;;;mCAEUA,K,EAAO;AACd,gBAAI,KAAKG,SAAL,EAAJ,EAAsB;AAClB,uBAAO,KAAKH,KAAZ;AACH,aAFD,MAEO;AACH,uBAAOA,OAAP;AACH;AACJ;;;;;;AAGL,SAASI,UAAT,CAAoBJ,KAApB,EAA2B;AACvB,WAAO,IAAID,MAAJ,CAAWC,KAAX,CAAP;AACH;;AAED,SAASM,IAAT,GAAgB;AACZ,WAAO,IAAIP,MAAJ,EAAP;AACH;;kBAEc;AACXQ,UAAMH,UADK;AAEXE;AAFW,C","file":"option.js","sourcesContent":["/*\r\n * Parsec\r\n * https://github.com/d-plaindoux/parsec\r\n *\r\n * Copyright (c) 2016 Didier Plaindoux\r\n * Licensed under the LGPL2 license.\r\n */\r\n\r\n/**\r\n * Private class Option, accessible from someOrNone() or none()\r\n */\r\nclass Option {\r\n    constructor(value) {\r\n        this.value = value;\r\n    }\r\n\r\n    isPresent() {\r\n        return this.value !== null && this.value !== undefined;\r\n    }\r\n\r\n    map(bindCall) {\r\n        if (this.isPresent()) {\r\n            return someOrNone(bindCall(this.value));\r\n        } else {\r\n            return this;\r\n        }\r\n    }\r\n\r\n    flatmap(bindCall) {\r\n        if (this.isPresent()) {\r\n            return bindCall(this.value);\r\n        } else {\r\n            return this;\r\n        }\r\n    }\r\n\r\n    filter(f) {\r\n        if (this.isPresent() && f(this.value)) {\r\n            return this;\r\n        }\r\n\r\n        // equivalent of return none() without cyclic creation\r\n        // eslint : no-use-before-define\r\n        return new Option();\r\n    }\r\n\r\n    get() {\r\n        return this.value;\r\n    }\r\n\r\n    orElse(value) {\r\n        if (this.isPresent()) {\r\n            return this.value;\r\n        } else {\r\n            return value;\r\n        }\r\n    }\r\n\r\n    orLazyElse(value) {\r\n        if (this.isPresent()) {\r\n            return this.value;\r\n        } else {\r\n            return value();\r\n        }\r\n    }\r\n}\r\n\r\nfunction someOrNone(value) {\r\n    return new Option(value);\r\n}\r\n\r\nfunction none() {\r\n    return new Option();\r\n}\r\n\r\nexport default {\r\n    some: someOrNone,\r\n    none,\r\n};\r\n"]}