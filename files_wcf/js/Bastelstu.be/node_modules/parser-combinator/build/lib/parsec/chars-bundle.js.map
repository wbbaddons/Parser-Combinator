{"version":3,"sources":["../../../src/lib/parsec/chars-bundle.js"],"names":["letter","satisfy","v","isUtf8Letter","char","firstLetter","toUpperCase","toLowerCase","utf8Letter","letters","rep","map","values","join","c","length","Error","notChar","charIn","indexOf","charNotIn","subString","subStream","s","string","input","index","subStreamAt","split","accept","reject","location","notString","not","stringLiteral","anyChar","or","thenRight","optrep","thenLeft","r","charLiteral","lowerCase","upperCase"],"mappings":"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","file":"chars-bundle.js","sourcesContent":["/*\r\n * Parsec\r\n * https://github.com/d-plaindoux/parsec\r\n *\r\n * Copyright (c) 2016 Didier Plaindoux\r\n * Licensed under the LGPL2 license.\r\n */\r\nimport F from './flow-bundle';\r\nimport Parser from './parser';\r\nimport response from './response';\r\n\r\n// unit -> Parser char char\r\nfunction letter() {\r\n    return F.satisfy(v => ('a' <= v && v <= 'z') || ('A' <= v && v <= 'Z'));\r\n}\r\n\r\nfunction isUtf8Letter(char) {\r\n    var firstLetter = char.toUpperCase();\r\n    return firstLetter.toLowerCase() != firstLetter;\r\n}\r\n\r\nfunction utf8Letter() {\r\n    return F.satisfy(v => isUtf8Letter(v));\r\n}\r\n\r\nfunction letters() {\r\n    return letter().rep().map(values => values.join(''));\r\n}\r\n\r\n// char -> Parser char char\r\nfunction char(c) {\r\n    if (c.length !== 1) {\r\n        throw new Error('Char parser must contains one character');\r\n    }\r\n\r\n    return F.satisfy(v => c === v);\r\n}\r\n\r\n// char -> Parser char char\r\nfunction notChar(c) {\r\n    if (c.length !== 1) {\r\n        throw new Error('Char parser must contains one character');\r\n    }\r\n\r\n    return F.satisfy(v => c !== v);\r\n}\r\n\r\n// string -> Parser char char\r\nfunction charIn(c) {\r\n    return F.satisfy(v => c.indexOf(v) !== -1);\r\n}\r\n\r\n// string -> Parser char char\r\nfunction charNotIn(c) {\r\n    return F.satisfy(v => c.indexOf(v) === -1);\r\n}\r\n\r\n// int -> Parser string char\r\nfunction subString(length) {\r\n    return F.subStream(length).map(s => s.join(''));\r\n}\r\n\r\n// string -> Parser string char\r\nfunction string(s) {\r\n    return new Parser((input, index = 0) => {\r\n        if (input.subStreamAt(s.split(''), index)) {\r\n            return response.accept(s, input, index + s.length, true);\r\n        } else {\r\n            return response.reject(input.location(index), false);\r\n        }\r\n    });\r\n}\r\n\r\n// string -> Parser string char\r\nfunction notString(s) {\r\n    return F.not(string(s));\r\n}\r\n\r\n// unit -> Parser string char\r\nfunction stringLiteral() {\r\n    var anyChar = string('\\\\\"').or(notChar('\"'));\r\n    return char('\"')\r\n        .thenRight(anyChar.optrep())\r\n        .thenLeft(char('\"'))\r\n        .map(r => r.join(''));\r\n}\r\n\r\n// unit -> Parser char char\r\nfunction charLiteral() {\r\n    var anyChar = string(\"\\\\'\").or(notChar(\"'\"));\r\n    return char(\"'\").thenRight(anyChar).thenLeft(char(\"'\"));\r\n}\r\n\r\n// unit -> Parser char char\r\nfunction lowerCase() {\r\n    return F.satisfy(v => 'a' <= v && v <= 'z');\r\n}\r\n\r\n// unit -> Parser char char\r\nfunction upperCase() {\r\n    return F.satisfy(v => 'A' <= v && v <= 'Z');\r\n}\r\n\r\nexport default {\r\n    utf8Letter: utf8Letter(),\r\n    letter: letter(),\r\n    letters: letters(),\r\n    notChar: notChar,\r\n    char: char,\r\n    charIn: charIn,\r\n    charNotIn: charNotIn,\r\n    subString: subString,\r\n    string: string,\r\n    notString: notString,\r\n    charLiteral: charLiteral(),\r\n    stringLiteral: stringLiteral(),\r\n    lowerCase: lowerCase(),\r\n    upperCase: upperCase(),\r\n};\r\n"]}