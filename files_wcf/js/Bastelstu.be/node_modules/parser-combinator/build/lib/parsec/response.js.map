{"version":3,"sources":["../../../src/lib/parsec/response.js"],"names":["Response","fold","success","accept","value","failure","Error","reject","offset","Reject","consumed","_","Accept","input","callback","predicate","sequence","response"],"mappings":";;;;;;qjBAAA;;;;;;;;AAQA;;;;;;;;;;;;AAEA;;;;IAIMA,Q;;;;;;;;AACF;qCACa;AACT,mBAAO,KAAKC,IAAL,CACH,YAAW;AACP,uBAAO,IAAP;AACH,aAHE,EAIH,YAAW;AACP,uBAAO,KAAP;AACH,aANE,CAAP;AAQH;;AAED;;;;gCACQ;AACJ,mBAAO,KAAKA,IAAL,CACH;AAAA,uBAAU,cAAKC,OAAL,CAAaC,OAAOC,KAApB,CAAV;AAAA,aADG,EAEH;AAAA,uBACI,cAAKC,OAAL,CAAa,IAAIC,KAAJ,CAAU,qBAAqBC,OAAOC,MAAtC,CAAb,CADJ;AAAA,aAFG,CAAP;AAKH;;;;;;AAGL;;;;;IAGMC,M;;;AACF,oBAAYD,MAAZ,EAAoBE,QAApB,EAA8B;AAAA;;AAAA;;AAE1B,cAAKF,MAAL,GAAcA,MAAd;AACA,cAAKE,QAAL,GAAgBA,QAAhB;AAH0B;AAI7B;;AAED;;;;;6BACKC,C,EAAGJ,M,EAAQ;AACZ,mBAAOA,OAAO,IAAP,CAAP;AACH;;AAED;;;;8BACM;AACF,mBAAO,IAAP;AACH;;AAED;;;;kCACU;AACN,mBAAO,IAAP;AACH;;AAED;;;;iCACS;AACL,mBAAO,IAAIE,MAAJ,CAAW,KAAKD,MAAhB,EAAwB,KAAxB,CAAP;AACH;;;;EAzBgBR,Q;;AA4BrB;;;;;IAGMY,M;;;AACF,oBAAYR,KAAZ,EAAmBS,KAAnB,EAA0BL,MAA1B,EAAkCE,QAAlC,EAA4C;AAAA;;AAAA;;AAExC,eAAKF,MAAL,GAAcA,MAAd;AACA,eAAKE,QAAL,GAAgBA,QAAhB;AACA,eAAKN,KAAL,GAAaA,KAAb;AACA,eAAKS,KAAL,GAAaA,KAAb;AALwC;AAM3C;;AAED;;;;;6BACKV,M,EAAQ;AACT,mBAAOA,OAAO,IAAP,CAAP;AACH;;AAED;;;;4BACIW,Q,EAAU;AACV,mBAAO,IAAIF,MAAJ,CACHE,SAAS,KAAKV,KAAd,CADG,EAEH,KAAKS,KAFF,EAGH,KAAKL,MAHF,EAIH,KAAKE,QAJF,CAAP;AAMH;;AAED;;;;gCACQI,Q,EAAU;AACd,mBAAOA,SAAS,KAAKV,KAAd,CAAP;AACH;;AAED;;;;+BACOW,S,EAAW;AACd,gBAAIA,UAAU,KAAKX,KAAf,CAAJ,EAA2B;AACvB,uBAAO,IAAP;AACH,aAFD,MAEO;AACH,uBAAO,IAAIK,MAAJ,CAAW,KAAKD,MAAhB,EAAwB,KAAxB,CAAP;AACH;AACJ;;;;EApCgBR,Q;;AAuCrB;;;;;AAGA,IAAMG,SAAS,SAATA,MAAS,CAACC,KAAD,EAAQY,QAAR,EAAkBR,MAAlB,EAA0BE,QAA1B;AAAA,WACX,IAAIE,MAAJ,CAAWR,KAAX,EAAkBY,QAAlB,EAA4BR,MAA5B,EAAoCE,QAApC,CADW;AAAA,CAAf;AAEA,IAAMH,SAAS,SAATA,MAAS,CAACC,MAAD,EAASE,QAAT;AAAA,WAAsB,IAAID,MAAJ,CAAWD,MAAX,EAAmBE,QAAnB,CAAtB;AAAA,CAAf;AACA,IAAMO,WAAW,EAACd,cAAD,EAASI,cAAT,EAAjB;;kBAEeU,Q","file":"response.js","sourcesContent":["/*\r\n * Parsec\r\n * https://github.com/d-plaindoux/parsec\r\n *\r\n * Copyright (c) 2016 Didier Plaindoux\r\n * Licensed under the LGPL2 license.\r\n */\r\n\r\nimport atry from '../data/try.js';\r\n\r\n/**\r\n * Response basic type\r\n * fold() is an abstract method implemented in Accept and Reject\r\n */\r\nclass Response {\r\n    // Response 'a 'c => unit -> bool\r\n    isAccepted() {\r\n        return this.fold(\r\n            function() {\r\n                return true;\r\n            },\r\n            function() {\r\n                return false;\r\n            }\r\n        );\r\n    }\r\n\r\n    // Response 'a 'c => unit -> bool\r\n    toTry() {\r\n        return this.fold(\r\n            accept => atry.success(accept.value),\r\n            reject =>\r\n                atry.failure(new Error('parser error at ' + reject.offset))\r\n        );\r\n    }\r\n}\r\n\r\n/**\r\n * Reject response class\r\n */\r\nclass Reject extends Response {\r\n    constructor(offset, consumed) {\r\n        super();\r\n        this.offset = offset;\r\n        this.consumed = consumed;\r\n    }\r\n\r\n    // Response 'a 'c => (Accept 'a 'c -> 'a) -> (Reject 'a 'c -> 'a) -> 'a\r\n    fold(_, reject) {\r\n        return reject(this);\r\n    }\r\n\r\n    // Response 'a 'c => ('a -> 'b) -> Response 'b 'c\r\n    map() {\r\n        return this;\r\n    }\r\n\r\n    // Response 'a 'c => ('a -> Response 'b 'c) -> Response 'b 'c\r\n    flatmap() {\r\n        return this;\r\n    }\r\n\r\n    // Response 'a 'c => ('a -> bool) -> Response 'b 'c\r\n    filter() {\r\n        return new Reject(this.offset, false);\r\n    }\r\n}\r\n\r\n/**\r\n * Accept response class\r\n */\r\nclass Accept extends Response {\r\n    constructor(value, input, offset, consumed) {\r\n        super();\r\n        this.offset = offset;\r\n        this.consumed = consumed;\r\n        this.value = value;\r\n        this.input = input;\r\n    }\r\n\r\n    // Response 'a 'c => (Accept 'a 'c -> 'a) -> (Reject 'a 'c -> 'a) -> 'a\r\n    fold(accept) {\r\n        return accept(this);\r\n    }\r\n\r\n    // Response 'a 'c => ('a -> 'b) -> Response 'b 'c\r\n    map(callback) {\r\n        return new Accept(\r\n            callback(this.value),\r\n            this.input,\r\n            this.offset,\r\n            this.consumed\r\n        );\r\n    }\r\n\r\n    // Response 'a 'c => ('a -> Response 'b 'c) -> Response 'b 'c\r\n    flatmap(callback) {\r\n        return callback(this.value);\r\n    }\r\n\r\n    // Response 'a 'c => ('a -> bool) -> Response 'b 'c\r\n    filter(predicate) {\r\n        if (predicate(this.value)) {\r\n            return this;\r\n        } else {\r\n            return new Reject(this.offset, false);\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Constructors\r\n */\r\nconst accept = (value, sequence, offset, consumed) =>\r\n    new Accept(value, sequence, offset, consumed);\r\nconst reject = (offset, consumed) => new Reject(offset, consumed);\r\nconst response = {accept, reject};\r\n\r\nexport default response;\r\n"]}