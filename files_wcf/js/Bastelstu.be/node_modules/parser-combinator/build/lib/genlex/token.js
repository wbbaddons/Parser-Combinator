'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*
arsec
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * https://github.com/d-plaindoux/parsec

opyright (c) 2016 Didier Plaindoux
icensed under the LGPL2 license.


var _response = require('../parsec/response');

var _response2 = _interopRequireDefault(_response);

var _option = require('../data/option');

var _option2 = _interopRequireDefault(_option);

var _flowBundle = require('../parsec/flow-bundle');

var _flowBundle2 = _interopRequireDefault(_flowBundle);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Token = function () {
    function Token() {
        _classCallCheck(this, Token);
    }

    _createClass(Token, [{
        key: 'keyword',
        value: function keyword() {
            return _option2.default.none();
        }
    }, {
        key: 'ident',
        value: function ident() {
            return _option2.default.none();
        }
    }, {
        key: 'number',
        value: function number() {
            return _option2.default.none();
        }
    }, {
        key: 'string',
        value: function string() {
            return _option2.default.none();
        }
    }, {
        key: 'char',
        value: function char() {
            return _option2.default.none();
        }
    }]);

    return Token;
}();

var TKKeyword = function (_Token) {
    _inherits(TKKeyword, _Token);

    function TKKeyword(value) {
        _classCallCheck(this, TKKeyword);

        var _this = _possibleConstructorReturn(this, (TKKeyword.__proto__ || Object.getPrototypeOf(TKKeyword)).call(this));

        _this.value = value;
        return _this;
    }

    _createClass(TKKeyword, [{
        key: 'keyword',
        value: function keyword() {
            return _option2.default.some(this.value);
        }
    }]);

    return TKKeyword;
}(Token);

var TKIdent = function (_Token2) {
    _inherits(TKIdent, _Token2);

    function TKIdent(value) {
        _classCallCheck(this, TKIdent);

        var _this2 = _possibleConstructorReturn(this, (TKIdent.__proto__ || Object.getPrototypeOf(TKIdent)).call(this));

        _this2.value = value;
        return _this2;
    }

    _createClass(TKIdent, [{
        key: 'ident',
        value: function ident() {
            return _option2.default.some(this.value);
        }
    }]);

    return TKIdent;
}(Token);

var TKNumber = function (_Token3) {
    _inherits(TKNumber, _Token3);

    function TKNumber(value) {
        _classCallCheck(this, TKNumber);

        var _this3 = _possibleConstructorReturn(this, (TKNumber.__proto__ || Object.getPrototypeOf(TKNumber)).call(this));

        _this3.value = value;
        return _this3;
    }

    _createClass(TKNumber, [{
        key: 'number',
        value: function number() {
            return _option2.default.some(this.value);
        }
    }]);

    return TKNumber;
}(Token);

var TKString = function (_Token4) {
    _inherits(TKString, _Token4);

    function TKString(value) {
        _classCallCheck(this, TKString);

        var _this4 = _possibleConstructorReturn(this, (TKString.__proto__ || Object.getPrototypeOf(TKString)).call(this));

        _this4.value = value;
        return _this4;
    }

    _createClass(TKString, [{
        key: 'string',
        value: function string() {
            return _option2.default.some(this.value);
        }
    }]);

    return TKString;
}(Token);

var TKChar = function (_Token5) {
    _inherits(TKChar, _Token5);

    function TKChar(value) {
        _classCallCheck(this, TKChar);

        var _this5 = _possibleConstructorReturn(this, (TKChar.__proto__ || Object.getPrototypeOf(TKChar)).call(this));

        _this5.value = value;
        return _this5;
    }

    _createClass(TKChar, [{
        key: 'char',
        value: function char() {
            return _option2.default.some(this.value);
        }
    }]);

    return TKChar;
}(Token);

// (Token -> Option 'a) -> Parser 'a Token


function literal(tokenise) {
    return _flowBundle2.default.parse(function (input, index) {
        return input.get(index).map(function (value) {
            return tokenise(value).map(function (token) {
                return _response2.default.accept(token, input, index + 1, true);
            }).orLazyElse(function () {
                return _response2.default.reject(input.location(index), false);
            });
        }).lazyRecoverWith(function () {
            return _response2.default.reject(input.location(index), false);
        });
    });
}

var token = {
    builder: {
        keyword: function keyword(value) {
            return new TKKeyword(value);
        },
        ident: function ident(value) {
            return new TKIdent(value);
        },
        number: function number(value) {
            return new TKNumber(value);
        },
        string: function string(value) {
            return new TKString(value);
        },
        char: function char(value) {
            return new TKChar(value);
        }
    },
    parser: {
        keyword: literal(function (token) {
            return token.keyword();
        }),
        ident: literal(function (token) {
            return token.ident();
        }),
        number: literal(function (token) {
            return token.number();
        }),
        string: literal(function (token) {
            return token.string();
        }),
        char: literal(function (token) {
            return token.char();
        })
    }
};

exports.default = token;
//# sourceMappingURL=token.js.map