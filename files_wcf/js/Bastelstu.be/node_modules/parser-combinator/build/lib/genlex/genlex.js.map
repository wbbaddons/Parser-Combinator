{"version":3,"sources":["../../../src/lib/genlex/genlex.js"],"names":["GenlexFactory","keyword","ident","number","string","char","Genlex","keywords","idletter","letter","or","digit","identParser","then","optrep","map","r","concat","array","join","keywordParser","reduce","p","s","error","charIn","space","f","numberLiteral","stringLiteral","charLiteral","spaces","thenRight","token","thenLeft","tokenBetweenSpaces","eos","factory","generator"],"mappings":"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","file":"genlex.js","sourcesContent":["/*\r\n * Parsec\r\n * https://github.com/d-plaindoux/parsec\r\n *\r\n * Copyright (c) 2016 Didier Plaindoux\r\n * Licensed under the LGPL2 license.\r\n */\r\n\r\nimport F from '../parsec/flow-bundle';\r\nimport C from '../../lib/parsec/chars-bundle';\r\nimport N from '../../lib/parsec/numbers-bundle';\r\nimport unit from '../data/unit.js';\r\n\r\n// (string -> 'a,string -> 'a,number -> 'a,string -> 'a,char -> 'a) -> GenlexFactory 'a\r\nfunction GenlexFactory(keyword, ident, number, string, char) {\r\n    this.keyword = keyword;\r\n    this.ident = ident;\r\n    this.number = number;\r\n    this.string = string;\r\n    this.char = char;\r\n}\r\n\r\nclass Genlex {\r\n    // [String] -> Genlex\r\n    constructor(keywords = []) {\r\n        var idletter = C.letter.or(C.char('_')).or(N.digit);\r\n        this.identParser = C.letter\r\n            .then(idletter.optrep())\r\n            .map(r => [r[0]].concat(r[1].array()).join(''));\r\n        this.keywordParser = keywords.reduce(\r\n            (p, s) => C.string(s).or(p),\r\n            F.error\r\n        );\r\n    }\r\n\r\n    // unit -> Parser char char\r\n    space() {\r\n        return C.charIn(' \\r\\n\\f\\t');\r\n    }\r\n\r\n    // unit -> Parser unit char\r\n    spaces() {\r\n        return this.space().optrep().map(() => unit);\r\n    }\r\n\r\n    // GenLexFactory 'a -> Parser 'a char\r\n    keyword(f) {\r\n        return this.keywordParser.map(f.keyword);\r\n    }\r\n\r\n    // GenLexFactory 'a -> Parser 'a char\r\n    ident(f) {\r\n        return this.identParser.map(f.ident);\r\n    }\r\n\r\n    // GenLexFactory 'a -> Parser 'a char\r\n    number(f) {\r\n        return N.numberLiteral.map(f.number);\r\n    }\r\n\r\n    // GenLexFactory 'a -> Parser 'a char\r\n    string(f) {\r\n        return C.stringLiteral.map(f.string);\r\n    }\r\n\r\n    // GenLexFactory 'a -> Parser 'a char\r\n    char(f) {\r\n        return C.charLiteral.map(f.char);\r\n    }\r\n\r\n    // GenLexFactory 'a -> Parser 'a char\r\n    token(f) {\r\n        return this.keyword(f)\r\n            .or(this.ident(f))\r\n            .or(this.number(f))\r\n            .or(this.string(f))\r\n            .or(this.char(f));\r\n    }\r\n\r\n    // GenLexFactory 'a -> Parser 'a char\r\n    tokenBetweenSpaces(f) {\r\n        return this.spaces().thenRight(this.token(f)).thenLeft(this.spaces());\r\n    }\r\n\r\n    // GenLexFactory 'a -> Parser ['a] char\r\n    tokens(f) {\r\n        return this.tokenBetweenSpaces(f)\r\n            .optrep()\r\n            .thenLeft(F.eos)\r\n            .map(r => r.array());\r\n    }\r\n}\r\n\r\nexport default {\r\n    factory: function(keyword, ident, number, string, char) {\r\n        return new GenlexFactory(keyword, ident, number, string, char);\r\n    },\r\n    generator: function(keywords) {\r\n        return new Genlex(keywords);\r\n    },\r\n};\r\n"]}